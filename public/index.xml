<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mr. Pointing</title>
    <link>https://mrpointing.com/</link>
    <description>Recent content on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 21 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mrpointing.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linear Regression</title>
      <link>https://mrpointing.com/notes/computer-science/python/machine-learning/linear-regression/</link>
      <pubDate>Sun, 21 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/machine-learning/linear-regression/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;single-variable&#34;&gt;Single Variable&lt;/h1&gt;&#xA;&lt;p&gt;A great beginner model, &lt;em&gt;Linear Regression&lt;/em&gt; uses input and output features to predict new inputs. There are lots of things we can predict; stock prices, collectibles, cars, you name it. An easy one we can use for now is home prices. Take the following table for example;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Area&lt;/th&gt;&#xA;          &lt;th&gt;Price&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1750&lt;/td&gt;&#xA;          &lt;td&gt;465000&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2000&lt;/td&gt;&#xA;          &lt;td&gt;545000&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2300&lt;/td&gt;&#xA;          &lt;td&gt;570000&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2800&lt;/td&gt;&#xA;          &lt;td&gt;595000&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3200&lt;/td&gt;&#xA;          &lt;td&gt;614000&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;Our objective is to create a model that will correctly price out a new house given we provide a square footage area. We can see a really clear pattern; as the area increase, the price increases. We could easily plot this on a scatter plot and see the correlation. We should also remember from algebra that we can create a line of best fit, that would minimize the amount of error between the expected amount and the actual amount (the price). Sounds, confusing, let&amp;rsquo;s actually see what happens.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How AI Works - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/how-ai-works/how-ai-works---chapter-2/</link>
      <pubDate>Wed, 10 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/how-ai-works/how-ai-works---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;why-now-history-of-ai&#34;&gt;Why Now? History of AI&lt;/h1&gt;&#xA;&lt;p&gt;Like we learned in the last chapter, AI has been around for a while. In the grand scheme of things, this &amp;ldquo;while&amp;rdquo; is seen as a blip, still in it&amp;rsquo;s infancy. It certainly did not just appear with ChatGPT. Let&amp;rsquo;s take a look at the landscape that got us here.&lt;/p&gt;&#xA;&lt;h2 id=&#34;types-of-ai&#34;&gt;Types of AI&lt;/h2&gt;&#xA;&lt;p&gt;I know I said we&amp;rsquo;d get a lot of definitions out of the way in the last chapter, but I lied. We have some more to go. AI can fall into two major categories; &lt;em&gt;Symbolic AI&lt;/em&gt; and &lt;em&gt;Connectionism&lt;/em&gt;. Where symbolic AI takes advantage of visual symbols and logical statements to build it&amp;rsquo;s &amp;ldquo;intelligence&amp;rdquo;, connectionism will try to build it&amp;rsquo;s intelligence using a compilation of simpler, smaller components. These are significant because it&amp;rsquo;s how our human brains work. We consider symbolic to be &amp;ldquo;Top-Down&amp;rdquo; (high level tasks getting broken up) and connectionism as &amp;ldquo;Bottom-up&amp;rdquo; (smaller tasks combined to create larger complex tasks).&lt;/p&gt;</description>
    </item>
    <item>
      <title>How AI Works - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/how-ai-works/how-ai-works---chapter-1/</link>
      <pubDate>Tue, 09 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/how-ai-works/how-ai-works---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;and-away-we-go-an-ai-overview&#34;&gt;And Away We Go: An AI Overview&lt;/h1&gt;&#xA;&lt;p&gt;Consider this the master chapter for all basic AI definitions. Everything following this chapter will build off of the points brought up in this chapter. Some foundational stuff right here.&lt;/p&gt;&#xA;&lt;p&gt;Again, we should start at the most basic; &lt;em&gt;Artificial Intelligence&lt;/em&gt; is the process of training a machine or computer to act like an intelligent human being. This original terminology was first used by John McCarthy in the 1950&amp;rsquo;s!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Modern Linux - Chapter 7</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-7/</link>
      <pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;networking&#34;&gt;Networking&lt;/h1&gt;&#xA;&lt;p&gt;A topic I&amp;rsquo;ve gone over before in a few notes now, so if you want a deeper dive on general topics, see &lt;a href=&#34;https://mrpointing.com/notes/computer-science/internet-and-it/coursera/introduction-to-computer-networking/&#34;&gt;this&lt;/a&gt; note. What we&amp;rsquo;re going to look at now is the Linux side of things, and how the Linux protocol deals with connecting to the world wide web. Specifically, the network protocols used and tooling provided.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;&#xA;&lt;p&gt;Without network connection, everything in the last chapter would be a moot point. There&amp;rsquo;s no external applications, supply chain past the initial purchase, and connection with the outside world. The tough part about networking is the amount of moving parts between all of the layers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Modern Linux - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-6/</link>
      <pubDate>Mon, 21 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;chapter-6-applications-package-management-and-containers&#34;&gt;Chapter 6: Applications, Package Management, and Containers&lt;/h1&gt;&#xA;&lt;p&gt;Like most things in computer science, the term &lt;em&gt;application&lt;/em&gt; is used in a variety of different settings, and have other names that are often thought to be interchangeable (&lt;em&gt;program&lt;/em&gt;, &lt;em&gt;binary&lt;/em&gt;, &lt;em&gt;executable&lt;/em&gt;). They are all technically different, so that&amp;rsquo;s where we&amp;rsquo;ll start.&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;re also going to look into how Linux systems &lt;strong&gt;boot&lt;/strong&gt;, and &lt;code&gt;systemd&lt;/code&gt;. These applications also need to be accessed, and for an enjoyable seamless experience they should be easily installable. We&amp;rsquo;ll look at &lt;em&gt;package managers&lt;/em&gt; and how they give users the ability to install applications across different distros and platforms.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Glass Castle</title>
      <link>https://mrpointing.com/notes/entertainment/books/the-glass-castle/</link>
      <pubDate>Tue, 01 Mar 2005 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/the-glass-castle/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;What began as a search for a birthday gift for my mother, became a dive deep into the life of Jeannette Walls. In true Richie fashion, I picked the biggest downer I could&amp;rsquo;ve picked for a happy birthday. Knowing nothing about the book, I had saw it a few times show up as a &amp;ldquo;BookTok&amp;rdquo; recommendation, and even appear on my mom&amp;rsquo;s &amp;ldquo;Want to Read&amp;rdquo; list on her Goodreads account. Knowing that there was a book in common the both of us wanted to read, I didn&amp;rsquo;t even bother reading the back before purchasing and gifting it to her.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Satanic Verses</title>
      <link>https://mrpointing.com/notes/entertainment/books/the-satanic-verses/</link>
      <pubDate>Mon, 26 Sep 1988 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/the-satanic-verses/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;What makes you unique from your contemporaries? How does the culmination of all of your past experiences affect your present choices, and what does that mean about the choices you end up making? Are you destined to fall back into the cycle of what has been, or can you throw everything away and start over, and be able to tell the tale of it all?&lt;/p&gt;&#xA;&lt;p&gt;These are the questions I gathered Mr. Rushdie is trying to ask with the Satanic Verses, among other things (should everything that&amp;rsquo;s said from those you trust be taken face value without question?). What sets a Salman Rushdie book apart from the rest, other than me having to heavily reference a dictionary, is it&amp;rsquo;s beautiful presentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>In The Distance</title>
      <link>https://mrpointing.com/notes/entertainment/books/in-the-distance/</link>
      <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/in-the-distance/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;While browsing a Strand affiliated pop-up next to central park one spring day not so many weeks ago, a good friend picked this book up and told me it was one of their favorite books. I of course took their opinion seriously, given I&amp;rsquo;ll read, watch, or play just about anything a friend recommends out of principle. It&amp;rsquo;s situations like this very one that makes that principle worth while; this book was amazing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Modern Linux - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-5/</link>
      <pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;filesystems&#34;&gt;Filesystems&lt;/h1&gt;&#xA;&lt;p&gt;Some would call this a dry topic, but in Linux and any UNIX based system &amp;ldquo;everything is a file&amp;rdquo;, so you should understand what&amp;rsquo;s going on with files. As the analogy suggests, nearly everything within the kernel is a file (with minor deviations). The &lt;em&gt;filesystem&lt;/em&gt; within the kernel defines how each file is laid out.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;&#xA;&lt;p&gt;Most distros give each user a single filesystem tree starting at &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;root&lt;/code&gt;. Within each tree is either a directory or file. Easily list all files with &lt;code&gt;ls&lt;/code&gt;, change directories with &lt;code&gt;cd&lt;/code&gt;, and print your current working directory with &lt;code&gt;cwd&lt;/code&gt;. The above are so important and at first, you&amp;rsquo;ll be using them pretty much all the time. Lastly, file systems are implemented in the kernel, rather than user land.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1 Year of Obsidian</title>
      <link>https://mrpointing.com/posts/1-year-of-obsidian/</link>
      <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/posts/1-year-of-obsidian/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;It has been a wild year. It&amp;rsquo;s hard to even think of a time where I didn&amp;rsquo;t have my online notebook as a backup for all of the important information I need on a daily basis. It&amp;rsquo;s moved and changed slightly here and there, but at the end of the day it&amp;rsquo;s consistently been-what I think is the most important part-useful.&lt;/p&gt;&#xA;&lt;p&gt;Some topics have come and gone. After trying out diary entries I realized I don&amp;rsquo;t get the same sense of satisfaction from it as I do when I write in my physical journal, so that came and went. I only lightly use the dictionary portion of my vault that I don&amp;rsquo;t make public. It&amp;rsquo;s mostly words I come across in books that I have to look up and write down to try and not forget it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Modern Linux - Chapter 4</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-4/</link>
      <pubDate>Mon, 16 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;access-control&#34;&gt;Access Control&lt;/h1&gt;&#xA;&lt;p&gt;Like most things in the world, access is a means of collateral control. There are certain parts of your system you &lt;em&gt;wouldn&amp;rsquo;t&lt;/em&gt; want anyone to touch (think of your network settings or startup settings). Let&amp;rsquo;s discuss the means of enforcing access control, how files are ran, and some advanced Linux features for controlling your environment.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;&#xA;&lt;p&gt;Linux has the ability to have multiple users running on one machine. Each user has a given ID and certain &lt;em&gt;permissions&lt;/em&gt; that dictate what that user is capable of. Users own &lt;em&gt;resources&lt;/em&gt;, or just files, and launch &lt;strong&gt;processes&lt;/strong&gt;, which use files through a user.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Modern Linux - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-3/</link>
      <pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;shells-and-scripting&#34;&gt;Shells and Scripting&lt;/h1&gt;&#xA;&lt;p&gt;A huge part of getting comfortable with Linux is getting comfortable using the &lt;em&gt;command line&lt;/em&gt;, or &lt;em&gt;CLI&lt;/em&gt;. Most common distros today will have some standard GUI application to accomplish most tasks. However, like we discussed, this text is going to be applicable to all Linux releases, and some are entirely command-line driven. We&amp;rsquo;ll discuss some different types of shells, then take a look at &lt;em&gt;scripting&lt;/em&gt;, or pre-written chunks of commands in a file meant to be ran by the computer at designated times.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 23</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-23/</link>
      <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-23/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;garbage&#34;&gt;Garbage&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 22</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-22/</link>
      <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-22/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-environment&#34;&gt;The Environment&lt;/h1&gt;&#xA;&lt;p&gt;Now it&amp;rsquo;s time to talk about &lt;em&gt;global variables&lt;/em&gt;. Technically speaking, Lua doesn&amp;rsquo;t actually have any. Why would you want global variables? For the most part they over complicate code, and can lead to messy implementation if caution isn&amp;rsquo;t used. That being said, global variables can also help tremendously if used correctly.&lt;/p&gt;&#xA;&lt;p&gt;What it does have, are variables placed within a table called the &lt;strong&gt;global environment&lt;/strong&gt;. It&amp;rsquo;s a cheeky way to circumnavigate having to actually implement global variables. Lua uses a table named &lt;code&gt;_G&lt;/code&gt; to store all of the global variables, and we can use the following to list out everything inside of it;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Modern Linux - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-1/</link>
      <pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;introduction-to-linux&#34;&gt;Introduction to Linux&lt;/h1&gt;&#xA;&lt;p&gt;Linux is one of the most used operating systems in the world. It&amp;rsquo;s used for a wide variety of applications, and has roots that go back years. TO understand where we are at and how we got here, let&amp;rsquo;s define &lt;strong&gt;modern&lt;/strong&gt; Linux.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-modern-environment&#34;&gt;What is a Modern Environment?&lt;/h2&gt;&#xA;&lt;p&gt;Put simply, these &amp;ldquo;environments&amp;rdquo; are spaces in which Linux is commonly used. These range from &lt;em&gt;mobile devices&lt;/em&gt;, (Android is developed with Linux!), &lt;em&gt;cloud computing&lt;/em&gt;, to &lt;em&gt;Internet of Things&lt;/em&gt; (think of smart appliances or cars). We even see Linux get involved when we are &lt;em&gt;diversifying processors&lt;/em&gt;. All of these spaces are heavily influenced by Linux.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Modern Linux - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-2/</link>
      <pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-linux-kernel&#34;&gt;The Linux Kernel&lt;/h1&gt;&#xA;&lt;p&gt;In the last chapter, we gained a new perspective on what an Operating System actually does; gives us the ability to use an API to talk to our system hardware and abstracts out all of the obscure and human-intensive tasks. We&amp;rsquo;ll take a look now at where the kernel falls into place in this diagram; not as a separate entity, but a crucial part of the OS.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 21</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-21/</link>
      <pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-21/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;object-oriented-programming&#34;&gt;Object-Oriented Programming&lt;/h1&gt;&#xA;&lt;p&gt;Like everything in Lua, we can use tables as a stand-in for many different structures. We can accomplish &lt;em&gt;Object-Oriented Programming&lt;/em&gt;, or a method of programming in which all variables and functions belong to objects, using tables (of course). Objects in OOP need an identity (self), a state, operations, life cycles, etc. Lua can accomplish a lot of this using tables.&lt;/p&gt;&#xA;&lt;p&gt;While the verbiage used can become interchangeable, we technically define &lt;em&gt;methods&lt;/em&gt; as functions that belong to objects. The &lt;em&gt;self&lt;/em&gt; as a concept is integral to OOP;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 20</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-20/</link>
      <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-20/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;metatables-and-metamethods&#34;&gt;Metatables and Metamethods&lt;/h1&gt;&#xA;&lt;p&gt;There are a few things that aren&amp;rsquo;t possible within Lua by default, like adding tables, comparing functions, or calling a string. All of this and more is possible with the implementation of &lt;em&gt;metatables&lt;/em&gt;. Metatables give us the ability to give context to unused operators for objects. Metatables have &lt;em&gt;metamethods&lt;/em&gt;, or methods that are within metatables that are called in these new situations.&lt;/p&gt;&#xA;&lt;p&gt;The text refers to metatables as a restricted type of class, but they don&amp;rsquo;t fail to mention that they&amp;rsquo;re even more strict, since the operations are limited. Any value in Lua can have a metatable, but they are split up into tables or userdata who have their own metatables, while all variables share one giant metatable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Secret History</title>
      <link>https://mrpointing.com/notes/entertainment/books/the-secret-history/</link>
      <pubDate>Tue, 01 Sep 1992 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/the-secret-history/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;What a beautifully written book. Of all the events that transpire, it&amp;rsquo;s the writing that keeps me recommending The Secret History. The story is presented as a mix of a tragedy, a comedy, and a reflection of what powerful influence looks like on impressionable young people. The allure of Julian Morrow sets up a rock that rolls into a boulder, crushing those both caught in the trajectory and the ones behind the push.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 17</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-17/</link>
      <pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-17/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;modules-and-packages&#34;&gt;Modules and Packages&lt;/h1&gt;&#xA;&lt;p&gt;When it comes to Lua, there are generally no policies set in place. However, starting with Lua 5.1, there are policies set up for modules and packages. Programmers are open to follow these policies or define their own as they see fit. We consider a &lt;em&gt;module&lt;/em&gt; as some code in Lua or C, and can be loaded into an environment using the function &lt;code&gt;require&lt;/code&gt; that creates and returns a table. All things defined (variables, functions, etc.) are defined in the table provided.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 18</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-18/</link>
      <pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-18/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;iterators-and-the-generic-for&#34;&gt;Iterators and the Generic &lt;code&gt;for&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s learn how to make our own &lt;em&gt;Iterators&lt;/em&gt; in Lua. We&amp;rsquo;ll accomplish this by taking a look at the &lt;code&gt;for&lt;/code&gt; loop in more detail; more specifically, the &lt;strong&gt;generic&lt;/strong&gt; &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;&#xA;&lt;h2 id=&#34;iterators-and-closures&#34;&gt;Iterators and Closures&lt;/h2&gt;&#xA;&lt;p&gt;We consider an iterator to be any construction that will allow is to iterate over the elements within some collection of objects. Most commonly we use functions to accomplish this. We make calls to the function when we want the next item, and so on. We&amp;rsquo;ve seen this with &lt;code&gt;io.read&lt;/code&gt; in the past.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 16</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-16/</link>
      <pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-16/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;compilation-execution-and-errors&#34;&gt;Compilation, Execution, and Errors&lt;/h1&gt;&#xA;&lt;p&gt;Lua is an interpreted language. Regardless, Lua will always pre-compile source code to a temporary middle-form in the &lt;em&gt;compilation phase&lt;/em&gt;. This is standard practice, but feels out of place knowing that interpreted languages are known to be quick and run without any compilers. This chapter is dense and nerdy, but will explain part of the process and why Lua chooses to use that system. This chapter should probably be read on it&amp;rsquo;s own, as my notes will not be sufficient.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Thus Spoke Zarathustra</title>
      <link>https://mrpointing.com/notes/entertainment/books/thus-spoke-zarathustra/</link>
      <pubDate>Mon, 01 Jan 1883 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/thus-spoke-zarathustra/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;A philosophical endeavor to say the least, Thus Spoke Zarathustra was a tough read and an enlightening one. To start, this is a book I&amp;rsquo;ve owned for many years. As a teenager, I had only a cursory understanding of who Nietzsche was, and was angsty/thought he had all the answers to my questions. It was exactly the opposite; I thought I knew what he was talking about, but I had not even a hint of a clue.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 14</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-14/</link>
      <pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-14/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-structures&#34;&gt;Data Structures&lt;/h1&gt;&#xA;&lt;p&gt;As we know, Lua just has tables. Within this, we can arrange tables in numerous different fashions to create whatever data structure we need. Since tables work so well, some of these aren&amp;rsquo;t entirely necessary but can be done.&lt;/p&gt;&#xA;&lt;h2 id=&#34;arrays&#34;&gt;Arrays&lt;/h2&gt;&#xA;&lt;p&gt;To accomplish the array structure, we can do something we&amp;rsquo;ve done previously; create a table with numbered indexes. Super simple to accomplish.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  a[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above creates an array with a range of 1 to 100, and any call to a field out of that range will return &lt;code&gt;nil&lt;/code&gt;. We can find the length of &lt;code&gt;a&lt;/code&gt; easily with &lt;code&gt;#a&lt;/code&gt;. A one liner version for an array type of table is accomplished with any set of numbers like so;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 15</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-15/</link>
      <pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-15/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-files-and-serialization&#34;&gt;Data Files and Serialization&lt;/h1&gt;&#xA;&lt;p&gt;Writing data is usually much cleaner than reading in data. There are many different ways in which the process can be corrupted. This calls for writing well written, error-preventative code. Problem is, that&amp;rsquo;s pretty hard. We can do one better; we can make our data easier to read in by writing it in readable formats. Lua makes this easy. We can write code that will generate our data objects for us.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generators</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/generators/</link>
      <pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/generators/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://wiki.python.org/moin/Generators&#34;&gt;Link&lt;/a&gt; to article 1.&#xA;&lt;a href=&#34;https://realpython.com/introduction-to-python-generators/&#34;&gt;Link&lt;/a&gt; to article 2.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;what-is-a-generator&#34;&gt;What is a Generator?&lt;/h1&gt;&#xA;&lt;p&gt;Straight from the Python wiki, &lt;em&gt;Generators&lt;/em&gt; are functions built to act like an iterator, which most commonly are used in for loops. Generators were made with the intention to have iterator functions, meaning we could take the following;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;first_n&lt;/span&gt;(n):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Builds and returns a List&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num, nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nums&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(num)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        num &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nums&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sum_of_first_n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum(first_n(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(sum_of_first_n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Can be remade with the following;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wind and Truth</title>
      <link>https://mrpointing.com/notes/entertainment/books/wind-and-truth/</link>
      <pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/wind-and-truth/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Previously:&lt;/strong&gt;&lt;/em&gt; &lt;a href=&#34;https://mrpointing.com/notes/entertainment/books/rhythm-of-war/&#34;&gt;Rhythm of War&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m really torn on this one. Part of my loved this book, and part of me hated it. I gave it a 4 out of 5, so I must&amp;rsquo;ve liked it more than disliked; I still cannot get over the fact that it&amp;rsquo;s actually done. To be honest, a lot of the reason I gave it a 4 instead of anything lower is that there couldn&amp;rsquo;t possibly be the ending I know my heart wants. I want all of my favorite characters to come out not just good, but better, stronger (maybe even Kaladin/Shallan finally happening). Unfortunately, I am a realist.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 13</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-13/</link>
      <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-13/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;bits-and-bytes&#34;&gt;Bits and Bytes&lt;/h1&gt;&#xA;&lt;p&gt;Not a dense chapter, but we should recognize that Lua handles binary data very similarly to text. Let&amp;rsquo;s dive right into it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bitwise-operators&#34;&gt;Bitwise Operators&lt;/h2&gt;&#xA;&lt;p&gt;There are a few Lua operators that work only on integers and binary data; &lt;code&gt;&amp;amp;&lt;/code&gt; or AND, &lt;code&gt;|&lt;/code&gt; or OR, &lt;code&gt;~&lt;/code&gt; or BITWISE OR, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; or SHIFT RIGHT, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; or SHIFT LEFT, and &lt;code&gt;~&lt;/code&gt; which can also mean BITWISE NOT.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string.format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xabcd&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; cd&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string.format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xabcd&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; abff&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unsigned-integers&#34;&gt;Unsigned Integers&lt;/h2&gt;&#xA;&lt;p&gt;Essentially, unsigned integers are any numbers that can only represent non-negative values. By default, Lua does not support them, but there are workarounds that can help implement them in necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 12</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-12/</link>
      <pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;date-and-time&#34;&gt;Date and Time&lt;/h1&gt;&#xA;&lt;p&gt;Not Lua&amp;rsquo;s strong-suit, but there are ways to retrieve and filter on date and time. Although, the system is quite weird.&lt;/p&gt;&#xA;&lt;p&gt;Lua officially has two ways of representing date and time. First is a single number, known as the number of seconds from the &lt;em&gt;epoch&lt;/em&gt;, or some fixed date. POSIX and Windows use the date January 1st, 1970, 0:00 UTC.&lt;/p&gt;&#xA;&lt;p&gt;The second is through a table that&amp;rsquo;s a lot more human readable. &lt;em&gt;Date tables&lt;/em&gt; have fields for &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sec&lt;/code&gt;, &lt;code&gt;wday&lt;/code&gt;, &lt;code&gt;yday&lt;/code&gt;, and &lt;code&gt;isdst&lt;/code&gt;. All are integers save for &lt;code&gt;isdst&lt;/code&gt;, which is a Boolean for daylight savings. There is no time zone set.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 11</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-11/</link>
      <pubDate>Thu, 17 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;most-frequent-words&#34;&gt;Most Frequent Words&lt;/h1&gt;&#xA;&lt;p&gt;Another interlude chapter, this time going over a pretty simple concept; reading and counting all the words within a file. It accomplishes three main tasks;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Reads all of the text, storing each count of the occurring word within a table&lt;/li&gt;&#xA;&lt;li&gt;Sorts the table based on the order of frequency&lt;/li&gt;&#xA;&lt;li&gt;Prints all results for &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; io.lines() &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; string.gmatch(line, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%w+&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    counter[word] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (counter[word] &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; pairs(counter) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  words[&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;words &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;table.sort(words, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (w1, w2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; counter[w1] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; counter[w2] &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         counter[w1] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; counter[w2] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; w1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; w2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; math.min(tonumber(arg[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; math,huge, &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;words)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  io.write(words[i], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, counter[words[i]], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exercises&#34;&gt;Exercises&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;When we apply this type of function to some text, usually we get uninteresting small words as our most frequent. Change the above code to only get words with a count of 4 or more characters.&lt;/li&gt;&#xA;&lt;li&gt;Repeat the previous exercise, but instead of using length as the criteria for ignoring a word, the program should read from a text file a list of words to be ignored.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;[[Programming in Lua - Chapter 12|Chapter 12]]&lt;/p&gt;</description>
    </item>
    <item>
      <title>How .join Works</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/how-.join-works/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/how-.join-works/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://realpython.com/python-join-string/&#34;&gt;Link&lt;/a&gt; to article&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;A simple built-in string method of Python, &lt;code&gt;.join()&lt;/code&gt; allows you to combine strings passed through an iterable of strings, using a &lt;em&gt;separator string&lt;/em&gt; as the delimiter.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; facts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Giorno&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;the&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;strongest&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jojo&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(facts)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Giorno is the strongest Jojo&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# You could also set the delimiter into it&amp;#39;s own variable for more modularity&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; separator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; separator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(facts)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Giorno is the strongest Jojo&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You don&amp;rsquo;t have to use a whitespace either if you don&amp;rsquo;t want too. You could just as easily concatenate them like so;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Neovim</title>
      <link>https://mrpointing.com/notes/computer-science/neovim/advent-of-neovim/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/neovim/advent-of-neovim/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;I found myself using the &lt;a href=&#34;https://mrpointing.com/notes/computer-science/neovim/neovim-tutor/&#34;&gt;Neovim Tutor&lt;/a&gt; note quite often, so I wanted to also document the other tips and tricks I pick up along the way of watching TJ&amp;rsquo;s videos. For now, I&amp;rsquo;ll keep all the videos here separated by headings.&lt;/p&gt;&#xA;&lt;h2 id=&#34;lazynvim-explained&#34;&gt;Lazy.nvim Explained&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;To open up a new tab, write &lt;code&gt;:new&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Not sure how to switch yet, but any new commands will open in the second area&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use &lt;code&gt;:q&lt;/code&gt; to go back to just one&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;:e .&lt;/code&gt; to open a file manager&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;:echo nvim_list_runtime_paths()&lt;/code&gt; to list run time paths (lol)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;configuring-more-neovim-options&#34;&gt;Configuring More Neovim Options&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Set &lt;code&gt;vim.opt.shiftwidth&lt;/code&gt; to a number to set spaces used after carriage return&lt;/li&gt;&#xA;&lt;li&gt;Use the &lt;code&gt;/after/ftplugin/&lt;/code&gt; directory to store &lt;code&gt;.lua&lt;/code&gt; files for each language you want local options for.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For Lua, we probably want to make a &lt;code&gt;lua.lua&lt;/code&gt; file and set &lt;code&gt;vim.opt_local.shiftwidth = 2&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;To set numbers on the left hand side and the relative position, use;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;vim.opt.number = true&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;vim.opt.relativenumber = true&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;A neat trick he does in the local files is use the following to make things nicer to read/write;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vim.opt_local&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set.shiftwidth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set.number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;treesitter-basics&#34;&gt;Treesitter Basics&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;vim.opt.clipboard = &amp;quot;unnamedplus&amp;quot;&lt;/code&gt; allows for pasting into Neovim&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;lsp-in-neovim&#34;&gt;LSP in Neovim&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;=g to format a file&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;K&lt;/code&gt; for a hover over a function&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl+]&lt;/code&gt; to find the root of a function/variable/path/etc.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;grn&lt;/code&gt; to rename all instances of a name&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;:help lsp&lt;/code&gt; for more info on these&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;telescope-introduction&#34;&gt;Telescope Introduction&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can use &lt;code&gt;Ctrl+/&lt;/code&gt; to bring up the movement guide while in a telescope window&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl+n&lt;/code&gt; to move forward, &lt;code&gt;Ctrl-p&lt;/code&gt; to move backwards&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 10</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-10/</link>
      <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;pattern-matching&#34;&gt;Pattern Matching&lt;/h1&gt;&#xA;&lt;p&gt;Due to Lua&amp;rsquo;s goal of maintaining a lite and quick language, it relies on it&amp;rsquo;s own method of pattern matching rather than POSIX regex or even Perl regex.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pattern-matching-functions&#34;&gt;Pattern Matching Functions&lt;/h2&gt;&#xA;&lt;p&gt;There are four pattern matching functions within Lua&amp;rsquo;s standard string library. We&amp;rsquo;ve actually already seen two of them, &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;gsub&lt;/code&gt;. We will cover those in slightly more detail, as well as the other two, &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;gmatch&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generate Parentheses</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/generate-parentheses/</link>
      <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/generate-parentheses/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt;&#xA;You are given an integer &lt;code&gt;n&lt;/code&gt;. Return all well-formed parentheses strings that you can generate with &lt;code&gt;n&lt;/code&gt; pairs of parentheses.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Input: n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Output: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;()&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Input: n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Output: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;((()))&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(()())&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(())()&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;()(())&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;()()()&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This one was rough. It was hard to imagine exactly how to get all of the different configurations of the parenthesis. I started out with a basic &lt;code&gt;for&lt;/code&gt; loop to create the most basic version, or the first from the examples;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Neovim Tutor</title>
      <link>https://mrpointing.com/notes/computer-science/neovim/neovim-tutor/</link>
      <pubDate>Sat, 29 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/neovim/neovim-tutor/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;After going through &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/&#34;&gt;Programming in Lua&lt;/a&gt;, I started watching a video series on &lt;a href=&#34;https://mrpointing.com/&#34;&gt;learning Neovim&lt;/a&gt;. It really got me wanting to try out Neovim, so I started with the tutor. I&amp;rsquo;ll probably just throw in a few of the most important things I learn in each chapter of the tutor.&lt;/p&gt;&#xA;&lt;h2 id=&#34;chapter-1&#34;&gt;Chapter 1&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Moving can be done with the arrows or &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, and &lt;code&gt;l&lt;/code&gt; to move left, down, up, and right respectively&lt;/li&gt;&#xA;&lt;li&gt;You can open any file in Neovim with &lt;code&gt;nvim FILENAME&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Exiting Neovim is done with &lt;code&gt;:q!&lt;/code&gt; to discard changes, and &lt;code&gt;:wq&lt;/code&gt; to keep changes&lt;/li&gt;&#xA;&lt;li&gt;Deleting characters outside of &lt;code&gt;insert&lt;/code&gt; mode can be done with hitting &lt;code&gt;x&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Entering &lt;code&gt;insert&lt;/code&gt; mode can be done by hitting &lt;code&gt;i&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can append to any line by hitting &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Hitting &lt;code&gt;Esc&lt;/code&gt; brings you back to &lt;code&gt;normal&lt;/code&gt; mode&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;chapter-2&#34;&gt;Chapter 2&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The &lt;code&gt;delete&lt;/code&gt; operator can be used to quickly get rid of words&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;dw&lt;/code&gt; to delete from your cursor to the next word&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;d$&lt;/code&gt; to delete from your cursor to the end of a line&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;dd&lt;/code&gt; to delete an entire line&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;You can use numbers before operators to repeat operations&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;w&lt;/code&gt; moves word to word by the first letter&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;e&lt;/code&gt; moves word to word by the last letter&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Change command syntax is as follows, &lt;code&gt;operator [number] motion&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;0&lt;/code&gt; moves to the beginning of a line&lt;/li&gt;&#xA;&lt;li&gt;Undo changes with &lt;code&gt;u&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Undo all changes to a line with &lt;code&gt;U&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go forward in time with &lt;code&gt;Ctrl+r&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;chapter-3&#34;&gt;Chapter 3&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;After deleting anything, you can put it anywhere with &lt;code&gt;p&lt;/code&gt;, placing it after the cursor&lt;/li&gt;&#xA;&lt;li&gt;Replace any character with &lt;code&gt;r&lt;/code&gt; and the character you want&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;c&lt;/code&gt; is the change operator; it replaces a section with putting you into &lt;code&gt;insert&lt;/code&gt; mode to make changes&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ce&lt;/code&gt; or &lt;code&gt;c#e&lt;/code&gt; will delete from the cursor to the end of the word or # amount of words&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;chapter-4&#34;&gt;Chapter 4&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If you want to display your current line location, you can with &lt;code&gt;Ctrl+g&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;gg&lt;/code&gt; brings your cursor to the first line&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;#G&lt;/code&gt; brings your cursor to line number #&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;G&lt;/code&gt; brings your cursor to the end of the file&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;You can search for text using &lt;code&gt;/&lt;/code&gt; and text to search forward in the file&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You search backwards using &lt;code&gt;?&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;When searching, press &lt;code&gt;n&lt;/code&gt; for the next occurrence and &lt;code&gt;N&lt;/code&gt; for the previous&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;%&lt;/code&gt; to bring your cursor to the opening or closing of a pair of brackets&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;:s/old/new&lt;/code&gt; to substitute the first occurrence of &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can specify what lines you want to effect with &lt;code&gt;:#,#s&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;You can use &lt;code&gt;:s/old/new/g&lt;/code&gt; to replace an entire lines &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;:%s/old/new&lt;/code&gt; to replace all &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;chapter-5&#34;&gt;Chapter 5&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can use external commands using the &lt;code&gt;!&lt;/code&gt; operator;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;:!ls&lt;/code&gt; will run &lt;code&gt;ls&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Usually opens it up in a smaller window&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;We can create new files easily with &lt;code&gt;:w FILENAME&lt;/code&gt;, and just as easily remove it with &lt;code&gt;:!rm FILENAME&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Traditional highlighting can be accomplished using &lt;code&gt;v&lt;/code&gt; or &lt;code&gt;Visual Selection&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;After highlighting a section of text, you can use &lt;code&gt;d&lt;/code&gt; to simply delete the selection&lt;/li&gt;&#xA;&lt;li&gt;You can even save and move selected text into a separate file, writing &lt;code&gt;:w FILENAME&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You&amp;rsquo;ll notice after writing the &lt;code&gt;:&lt;/code&gt;, some more characters appeared after it, &lt;code&gt;&#39;&amp;lt;, &#39;&amp;gt;&lt;/code&gt;. I don&amp;rsquo;t know why this happens, but it does let you know nicely that you are in some modifier mode&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;You can retrieve and place the contents of any file using &lt;code&gt;:r FILENAME&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A cool trick is reading the output of external commands; you can use &lt;code&gt;:r !ls&lt;/code&gt; to read in the output of &lt;code&gt;ls&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;chapter-6&#34;&gt;Chapter 6&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Open is a command you can use to insert a new line under or above an existing line&#xA;&lt;ul&gt;&#xA;&lt;li&gt;On a line, type &lt;code&gt;o&lt;/code&gt; to insert a new line under the line your cursor exists on&lt;/li&gt;&#xA;&lt;li&gt;Typing &lt;code&gt;O&lt;/code&gt; will do the same but above the line your cursor is on&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;You can append to any line&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;a&lt;/code&gt; brings you to the end of the word of your cursor&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;A&lt;/code&gt; brings you to the end of the line your cursor is on&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;A new mode, &lt;code&gt;Replace&lt;/code&gt; mode, can be entered not using &lt;code&gt;r&lt;/code&gt;, but &lt;code&gt;R&lt;/code&gt;. It works like &lt;code&gt;Insert&lt;/code&gt; mode but replaces over characters instead of inserting them into the line&lt;/li&gt;&#xA;&lt;li&gt;Copy using &lt;code&gt;y&lt;/code&gt; and paste with &lt;code&gt;p&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can use &lt;code&gt;v&lt;/code&gt; to select and &lt;code&gt;y&lt;/code&gt; to copy it&lt;/li&gt;&#xA;&lt;li&gt;You could also use &lt;code&gt;yank&lt;/code&gt; as an operator, like using &lt;code&gt;yw&lt;/code&gt; to copy a word&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;P&lt;/code&gt; places before your cursor instead of after&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;:set&lt;/code&gt; operator can be used to configure other commands&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;:set ic&lt;/code&gt; ignores casing when searching&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;:set is&lt;/code&gt; shows partial matches&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;:set hls&lt;/code&gt; highlights all matching phrases&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use &lt;code&gt;no&lt;/code&gt; in front of any of these options to switch them off&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 9</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-9/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;closures&#34;&gt;Closures&lt;/h1&gt;&#xA;&lt;p&gt;The first advanced topic, more of a clarification, let&amp;rsquo;s discuss the true nature of functions and how they&amp;rsquo;re treated in Lua.&lt;/p&gt;&#xA;&lt;p&gt;Any function inside Lua is a &lt;em&gt;first-class value&lt;/em&gt;, meaning they are treated with similar properties as strings and numbers. This implies that not only can we store functions inside of variables, but we can also pass functions as arguments.&lt;/p&gt;&#xA;&lt;p&gt;Another concept that gives Lua additional flexibility is &lt;em&gt;lexical scoping&lt;/em&gt;, meaning nested functions have automatic access to variables in their enclosing function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 8</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-8/</link>
      <pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;filling-in-some-gaps&#34;&gt;Filling in Some Gaps&lt;/h1&gt;&#xA;&lt;p&gt;A quick send off chapter for the basics of Lua. Let&amp;rsquo;s review some key components that are necessary, but maybe doesn&amp;rsquo;t need an entire chapter.&lt;/p&gt;&#xA;&lt;h2 id=&#34;local-variables-and-blocks&#34;&gt;Local Variables and Blocks&lt;/h2&gt;&#xA;&lt;p&gt;Quite simply, Lua makes all variables global by default. To specify a local variable, you have to call it with &lt;code&gt;local&lt;/code&gt; in front. Local variables only have a scope inside the block it was declared in.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s considered a good programming habit to use local variables when possible. It allows for less confusion with existing global variables, it&amp;rsquo;s cleaner, and also faster as access to local variables is faster than global variables.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 7</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-7/</link>
      <pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-external-world&#34;&gt;The External World&lt;/h1&gt;&#xA;&lt;p&gt;Lua is not the language for powerful performance with the exterior world. Even the text admits that most use of Input and Output are done through the host application or external libraries. Lua can handle basic file manipulation, which we&amp;rsquo;ll review now.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-simple-io-model&#34;&gt;The Simple I/O Model&lt;/h2&gt;&#xA;&lt;p&gt;Lua assumes the use of two streams, the &lt;em&gt;current input stream&lt;/em&gt; and the &lt;em&gt;current output stream&lt;/em&gt;. Using C terminology, the current input is default &lt;code&gt;stdin&lt;/code&gt; while output is &lt;code&gt;stdout&lt;/code&gt;. We can route either using &lt;code&gt;io.input&lt;/code&gt; and &lt;code&gt;io.output&lt;/code&gt;, respectively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fateful Triangle</title>
      <link>https://mrpointing.com/notes/entertainment/books/fateful-triangle/</link>
      <pubDate>Fri, 01 Jan 1999 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/fateful-triangle/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;After deep reflection, I still lack the ability to properly give my feedback while remaining professional. This was an incredibly difficult read. Not only was it incredibly lengthy and full of citations and footnotes, it was dense with historical information and new vocabulary. I found myself looking up definitions, synopsis&amp;rsquo; of political parties and events, and having to watch numerous supplemental material to actually follow along. Was this a good thing? I like to think so; it drove me to research a lot on my own, and after 50 or so pages the prose and vocabulary became more tolerable. If only it didn&amp;rsquo;t take another 600 pages/3 months to finish it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-6/</link>
      <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;functions&#34;&gt;Functions&lt;/h1&gt;&#xA;&lt;p&gt;Functions in Lua are the main method of abstracting out commands. We&amp;rsquo;ve been using functions the entire time. Like most other languages, we can accomplish direct tasks or solve complicated problems with repeatable calls.&lt;/p&gt;&#xA;&lt;p&gt;When calling functions, we use parenthesis, even when there are no parameters. The only time we can leave parenthesis out is when the argument is a literal string or a table constructor.&lt;/p&gt;&#xA;&lt;p&gt;A fun addition of Lua is the colon operator, which supports method like calling;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-5/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;tables&#34;&gt;Tables&lt;/h1&gt;&#xA;&lt;p&gt;Funnily enough, &lt;em&gt;tables&lt;/em&gt; are the only data structure natively in Lua. Tables can be used to represent basic arrays, sets, records, and others. We&amp;rsquo;ll see some of these created this chapter.&lt;/p&gt;&#xA;&lt;p&gt;By default, a table acts like a Python dictionary, or an associative array. They can contain any number or string value, &lt;strong&gt;except for nil&lt;/strong&gt;. The tables themselves are considered objects. Programs only manipulate references to a table; Lua will never create a hidden copy of your table.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 4</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-4/</link>
      <pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;strings&#34;&gt;Strings&lt;/h1&gt;&#xA;&lt;p&gt;A string is basically a representation of some text. They can be tiny, or huge, depending on how you&amp;rsquo;d like. We consider strings as a sequence of bytes, which we can go into more detail on later. For now, just know we can store any binary data as a string, or even Unicode representation.&lt;/p&gt;&#xA;&lt;p&gt;Any string we make in Lua is immutable, so we can&amp;rsquo;t alter it once it&amp;rsquo;s made. Any alterations would have to be made to an entirely new string. Not only that, but Lua also has &lt;em&gt;automatic memory management&lt;/em&gt;, so we don&amp;rsquo;t have to concern ourselves with allocation and deallocation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Geometry Managers</title>
      <link>https://mrpointing.com/notes/computer-science/python/tkinter/geometry-managers/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/tkinter/geometry-managers/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;controlling-layouts-with-geometry-managers&#34;&gt;Controlling Layouts with Geometry Managers&lt;/h1&gt;&#xA;&lt;p&gt;Tkinter has three &lt;em&gt;geometry managers&lt;/em&gt;, or methods that define how the content of your app is structured. &lt;code&gt;.pack()&lt;/code&gt; is just one of them; we also could use &lt;code&gt;.place()&lt;/code&gt; or &lt;code&gt;.grid()&lt;/code&gt;. You can only use one at a time, so let&amp;rsquo;s discover the instances in which we&amp;rsquo;d use them.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pack&#34;&gt;&lt;code&gt;.pack()&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;When using &lt;code&gt;.pack()&lt;/code&gt;, you&amp;rsquo;re actually using a &lt;em&gt;packing algorithm&lt;/em&gt; in order to place the widgets on screen. It accomplishes this in two steps;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interactive Applications</title>
      <link>https://mrpointing.com/notes/computer-science/python/tkinter/interactive-applications/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/tkinter/interactive-applications/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;The above has taught you how to make things appear inside your window. This will only get you so far; the things in your window need to do things. Let&amp;rsquo;s learn about &lt;em&gt;events&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;using-events-and-event-handlers&#34;&gt;Using Events and Event Handlers&lt;/h1&gt;&#xA;&lt;p&gt;Going back to when we learned about the &lt;code&gt;window.mainloop()&lt;/code&gt;, the loop this starts is known as the &lt;em&gt;event loop&lt;/em&gt;. During this, the window will wait for some response. All we have to code is the events that we want to happen in response to these events, otherwise known as &lt;em&gt;event handlers&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Widgets</title>
      <link>https://mrpointing.com/notes/computer-science/python/tkinter/widgets/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/tkinter/widgets/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Below are a few different types of widgets;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Label&lt;/code&gt;: displays text&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Button&lt;/code&gt;: displays a button that can have text and do action commands&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Entry&lt;/code&gt;: displays a text input form for a single line&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Text&lt;/code&gt;: displays a text input form for multi-line entry&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Frame&lt;/code&gt;: a rectangular area for widgets or padding between widgets&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;There are many more widgets, as well as &lt;em&gt;themed widgets&lt;/em&gt;, which are more updated versions of classic widgets, but we don&amp;rsquo;t need to get into that today.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPL - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-6/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-types&#34;&gt;Data Types&lt;/h1&gt;&#xA;&lt;p&gt;What is a data type? &lt;em&gt;Data types&lt;/em&gt; are a collection of data values and set of pre-defined operations on those values. One major benefit of data typing is error catching. Another is documentation; we can tell a lot about about a program based on it&amp;rsquo;s data types and types used.&lt;/p&gt;&#xA;&lt;p&gt;The two most common structured (non-scalar) data types are arrays and records. Structured data types defined w/ type operators, or constructors (C uses brackets for arrays, asterisks for pointers). &lt;em&gt;Descriptors&lt;/em&gt; are the collection of the attributes of a variable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-3/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;numbers&#34;&gt;Numbers&lt;/h1&gt;&#xA;&lt;p&gt;Up until recently, all numbers in Lua were floating point numbers. Now, Lua past version 5.3, has two representations for numbers; 64-bit &lt;em&gt;integers&lt;/em&gt; and double-precision floating points, just &lt;em&gt;floats&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The Lua interpreter will allow the input of numbers in whatever format you want, and return it that way (unless specified not too).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 0.4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4.57e-3&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 0.00457&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3e12&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 300000000000.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5E+20&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 5e+20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you call &lt;code&gt;type()&lt;/code&gt; on any number, it will always return as a &lt;code&gt;number&lt;/code&gt; type. If you wanted to ensure you have an integer or float, you would have to specify it as a math type using &lt;code&gt;math.type()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 13</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-13/</link>
      <pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-13/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;where-to-go-next&#34;&gt;Where To Go Next&lt;/h1&gt;&#xA;&lt;p&gt;What a journey this has been! The next few sections are light on detail, and geared more towards exposure. Please feel free to dive into each of these topics on your own, as each is large enough to devote an entire chapter to.&lt;/p&gt;&#xA;&lt;h2 id=&#34;linear-regression&#34;&gt;Linear Regression&lt;/h2&gt;&#xA;&lt;p&gt;Given a data set of points, a line of best fit is generated to make predictions. This is one of the first topics covered when you begin learning about Machine Learning (due to how easy it is to set up), so you&amp;rsquo;re likely going to have first hand experience with this soon enough.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 12</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-12/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;k-nearest-neighbor&#34;&gt;K-Nearest Neighbor&lt;/h1&gt;&#xA;&lt;p&gt;K-nearest neighbor, or simply &lt;em&gt;KNN&lt;/em&gt;, is a classification algorithm. Whenever we are given a set of data, given the unique attributes of that dataset, we can plot it on a graph. Like most things from this text, it&amp;rsquo;s something best understood visually. Let&amp;rsquo;s use one of the most common examples, classifying fruit;&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/knn.png&#34;  alt=&#34;knn&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;In the above example, the orange marks indicate an orange, and the red marks indicate an apple. Now, we could use this graph to classify the next fruit I get. If I find a place to put it, we can look at that new point&amp;rsquo;s neighbors to classify what kind of fruit it must be.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-2/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-eight-queens-problem&#34;&gt;The Eight Queens Problem&lt;/h1&gt;&#xA;&lt;p&gt;Not a whole lot going on in this chapter, but they present a fun example of Lua&amp;rsquo;s capabilities. Walking through this code is worthwhile; I recommend giving it a read first, trying it out yourself, and changing some things around to get some different outcomes.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;-- board size&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- check whether position (n,c) is free from attacks&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isplaceok&lt;/span&gt; (a, n, c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- for each queen already placed...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- same column?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;   (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; n) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- same diagonal?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;   (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n) &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- other diagonal?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- place can be attacked&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;-- print a board&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printsolution&lt;/span&gt; (a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- for each row&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- and for each column&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;-- write &amp;#34;X&amp;#34; or &amp;#34;-&amp;#34; plus a space&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      io.write(a[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  io.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- add to board &amp;#39;a&amp;#39; all queens from &amp;#39;n&amp;#39; to &amp;#39;N&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addqueen&lt;/span&gt; (a, n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- checks for all queens being placed&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printsolution(a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isplaceok(a, n, c) &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;    a[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;addqueen(a,n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- run the program&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addqueen({}, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exercises&#34;&gt;Exercises&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Modify the program so that it stops after printing the first solution&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;For me, I just put &lt;code&gt;os.exit()&lt;/code&gt; after the first call for &lt;code&gt;printsolution()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 10</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-10/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;greedy-algorithms&#34;&gt;Greedy Algorithms&lt;/h1&gt;&#xA;&lt;p&gt;A simpler concept than the last few we just tackled, &lt;em&gt;Greedy Algorithms&lt;/em&gt; are algorithms that pick the most optimal movement at each step. This seems vague, and it is! You are literally just picking the most &lt;em&gt;locally optimal solution&lt;/em&gt;, or the best choice, until you&amp;rsquo;re left with the &lt;em&gt;globally optimal solution&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;If you have a day where you&amp;rsquo;re trying to schedule classes &amp;amp; have as many as you possibly can, taking up your entire schedule. How would you plan your day? The major issue is that the classes times overlap; some start while others are still going, etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 11</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-11/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;dynamic-programming&#34;&gt;Dynamic Programming&lt;/h1&gt;&#xA;&lt;p&gt;The knapsack problem is coming back; this time with a vengeance. This time around, we have the same items, but we have a &lt;em&gt;&lt;strong&gt;four&lt;/strong&gt;&lt;/em&gt; pound limit in our bag. The Switch is $1500 and 1 pound, the P.C. is $3000 and 4 pounds, and the laptop is $2000 and 3 pounds.&lt;/p&gt;&#xA;&lt;p&gt;If we went with the most simple solution, we could just add up all possible combinations and pick the best. For 3 items, it&amp;rsquo;s no big deal. There are only 8 sets of possible combinations; easy to walk through. However, increasing from there is &lt;em&gt;incredibly&lt;/em&gt; slow ($2^n$), so past 10 items it begins to become massive amounts of processing power to produce an answer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 8</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-8/</link>
      <pubDate>Mon, 03 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;balanced-trees&#34;&gt;Balanced Trees&lt;/h1&gt;&#xA;&lt;p&gt;From on out, if an array or linked list isn&amp;rsquo;t enough, a tree should be our next structure to try. It&amp;rsquo;s a balancing act to choose between both, especially for run time. Binary Search Trees are great, especially for insertion.&lt;/p&gt;&#xA;&lt;p&gt;Remember, arrays take longer to insert than linked lists, but provide faster sorts. &lt;em&gt;Binary Search Trees&lt;/em&gt; optimize by providing a clear and easy to understand structure: a root node with values larger to their right, and smaller to the left. This makes searches incredibly fast.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 9</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-9/</link>
      <pubDate>Mon, 03 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;dijkstras-algorithm&#34;&gt;Dijkstra&amp;rsquo;s Algorithm&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Dijkstra&amp;rsquo;s Algorithm&lt;/em&gt; calculates the shortest path on a weighted graph. Unlike Breadth-first search, every step we take has some cost associated with it that we have to take into account. Just like last chapter, we can use graphs to help us get a better understanding:&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/weighted_graph.png&#34;  alt=&#34;weighted_graph&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;From what we know of BFS, we can assume it would probably return &amp;ldquo;Start -&amp;gt; A -&amp;gt; Finish&amp;rdquo; as the shortest path. without weights, that makes perfect sense. However, that has a cost of 7 (7 minutes). Isn&amp;rsquo;t there a cheaper way to get there? We&amp;rsquo;ll see in a second how Dijkstra&amp;rsquo;s algorithm calculates this for us.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 7</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-7/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;trees&#34;&gt;Trees&lt;/h1&gt;&#xA;&lt;p&gt;A subset of graphs, &lt;em&gt;trees&lt;/em&gt; are similarly made with nodes and edges and come in multiple different varieties. The first tree we are going to look at is the rooted tree, which is quite easy to visualize.&lt;/p&gt;&#xA;&lt;p&gt;Rooted trees must have one node that heads to all other nodes in the tree. Nodes have at most one parent, and the only node with no parent is known as the &lt;em&gt;root&lt;/em&gt; node. Nodes with no children are called &lt;em&gt;leaf&lt;/em&gt; nodes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h1&gt;&#xA;&lt;p&gt;Just like any other language, standard output is a great first step. To do so on a windows machine, you have to download Lua much like you do Python, and run it via the command line. The fastest way I did this was through a command line installer &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;, and installed it with &lt;code&gt;scoop install lua&lt;/code&gt;. Then just use &lt;code&gt;lua&lt;/code&gt; to run your environment.&lt;/p&gt;&#xA;&lt;p&gt;A simple &lt;code&gt;print()&lt;/code&gt; will put anything on the screen:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-6/</link>
      <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;breadth-first-search&#34;&gt;Breadth-First Search&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Graphs&lt;/em&gt; are the next data structure we are going to learn. &lt;strong&gt;Breadth-first search&lt;/strong&gt; is the first graphing algorithm we&amp;rsquo;ll take a look at, and will give us the ability to find the shortest distance between two points.&lt;/p&gt;&#xA;&lt;p&gt;There are many use cases for BFS:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spell checker&lt;/li&gt;&#xA;&lt;li&gt;Finding nearby doctors/hospitals&lt;/li&gt;&#xA;&lt;li&gt;Search engines&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Graphs come in many different forms. One of the easiest ways to visualize is with locations:&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/location_graph.png&#34;  alt=&#34;location_graph&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;The arrows are only pointing in one direction, indicating this is a start to finish graph. We start in the Bronx, and want to end in Long Island. How many possible paths do we have there?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-5/</link>
      <pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;hash-tables&#34;&gt;Hash Tables&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Hash tables&lt;/em&gt; are the more formal term for Python&amp;rsquo;s Dictionary structure; a key-value pairing of elements. &lt;em&gt;Hash functions&lt;/em&gt; are any function that does the mapping of a value to an input.&lt;/p&gt;&#xA;&lt;p&gt;Two main rules when implementing hash tables:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Pairings should be consistent&lt;/li&gt;&#xA;&lt;li&gt;Key&amp;rsquo;s should be unique&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The way these mappings work are complex, but essentially, when using Python, grabbing values from a dictionary is pretty fast and grants instant access.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Valid Parenthesis</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-parenthesis/</link>
      <pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-parenthesis/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; You are given a string &lt;code&gt;s&lt;/code&gt; consisting of the following characters: &lt;code&gt;&#39;(&#39;&lt;/code&gt;, &lt;code&gt;&#39;)&#39;&lt;/code&gt;, &lt;code&gt;&#39;{&#39;&lt;/code&gt;, &lt;code&gt;&#39;}&#39;&lt;/code&gt;, &lt;code&gt;&#39;[&#39;&lt;/code&gt; and &lt;code&gt;&#39;]&#39;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The input string &lt;code&gt;s&lt;/code&gt; is valid if and only if:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Every open bracket is closed by the same type of close bracket.&lt;/li&gt;&#xA;&lt;li&gt;Open brackets are closed in the correct order.&lt;/li&gt;&#xA;&lt;li&gt;Every close bracket has a corresponding open bracket of the same type.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;s&lt;/code&gt; is a valid string, and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advanced CSS Selectors</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/advanced-css-selectors/</link>
      <pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/advanced-css-selectors/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;In some occasions, using classes, ID&amp;rsquo;s, or types are not enough. This is about those times. There are a bunch, but we&amp;rsquo;re just going to look at a few.&lt;/p&gt;&#xA;&lt;h2 id=&#34;child-and-sibling-combinators&#34;&gt;Child and Sibling Combinators&lt;/h2&gt;&#xA;&lt;p&gt;Given the following:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;child group1&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grand-child group1&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;child group2&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grand-child group2&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;child group3&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grand-child group3&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;main&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;If we wanted to access all of the &lt;code&gt;div&lt;/code&gt; elements inside of &lt;code&gt;main&lt;/code&gt;, we can do so in a few different ways. One, would include use simply stating the element after your &lt;code&gt;main&lt;/code&gt; declaration in your style sheet:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Valid Sudoku</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-sudoku/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-sudoku/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; You are given a a &lt;code&gt;9 x 9&lt;/code&gt; Sudoku board &lt;code&gt;board&lt;/code&gt;. A Sudoku board is valid if the following rules are followed:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Each row must contain the digits &lt;code&gt;1-9&lt;/code&gt; without duplicates.&lt;/li&gt;&#xA;&lt;li&gt;Each column must contain the digits &lt;code&gt;1-9&lt;/code&gt; without duplicates.&lt;/li&gt;&#xA;&lt;li&gt;Each of the nine &lt;code&gt;3 x 3&lt;/code&gt; sub-boxes of the grid must contain the digits &lt;code&gt;1-9&lt;/code&gt; without duplicates.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if the Sudoku board is valid, otherwise return &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 4</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-4/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;quicksort&#34;&gt;Quicksort&lt;/h1&gt;&#xA;&lt;h2 id=&#34;divide-and-conquer&#34;&gt;Divide and Conquer&lt;/h2&gt;&#xA;&lt;p&gt;To introduce another tool into our algorithm toolbox, we can introduce &lt;strong&gt;Divide &amp;amp; Conquer&lt;/strong&gt;, a useful method to recursively solve problems. Just like we learned in recursion, we need to identify our base case. Then we &lt;em&gt;divide&lt;/em&gt; our problem into smaller problems, until we eventually reach our base case.&lt;/p&gt;&#xA;&lt;p&gt;We can use the example of a plot of land:&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/plot_of_land_base.png&#34;  alt=&#34;plot_of_land_base&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;If we wanted to divide our land into perfectly even square boxes, making sure to use all available land with no land left out. How would you begin to figure this out?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blender Donut Tutorial</title>
      <link>https://mrpointing.com/posts/blender-donut-tutorial/</link>
      <pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/posts/blender-donut-tutorial/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=B0J27sf9N1Y&#34;&gt;Link&lt;/a&gt; to video series&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;why-do-i-want-to-learn-blender&#34;&gt;Why Do I Want to Learn Blender?&lt;/h1&gt;&#xA;&lt;p&gt;My uncle is a huge inspiration in my life and career. I always admired his artistic ability, always drawing my favorite super heroes and other cool pieces. He ended working full time as a graphic design artist, and has been making killer 3D animations for years.&lt;/p&gt;&#xA;&lt;p&gt;This is another way of integrating what things I love, and also possibly picking up a new hobby. Let&amp;rsquo;s see how this goes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fundamental CSS Properties</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/fundamental-css-properties/</link>
      <pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/fundamental-css-properties/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Since there are a ton of CSS properties, you don&amp;rsquo;t and shouldn&amp;rsquo;t memorize all of them. Let&amp;rsquo;s review a few of the most common and useful ones to make your websites stand out.&lt;/p&gt;&#xA;&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;&#xA;&lt;p&gt;The &lt;code&gt;background&lt;/code&gt; property is used mostly as is to set colors and styles to the background frame. However, you actually can use specific background-properties, which effect more specific elements in your background. You can go through exactly what you can do with that in &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/background&#34;&gt;this&lt;/a&gt; documentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Importing CSV to SQL Table Using Python</title>
      <link>https://mrpointing.com/notes/computer-science/sql/importing-csv-to-sql-table-using-python/</link>
      <pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/importing-csv-to-sql-table-using-python/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;From &lt;a href=&#34;https://stackoverflow.com/questions/2887878/importing-a-csv-file-into-a-sqlite3-database-table-using-python&#34;&gt;Stack Overflow&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;h4 id=&#34;using-sqlite&#34;&gt;Using SQLite&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; csv&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sqlite3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;con &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sqlite3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:memory:&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# change to &amp;#39;sqlite:///your_filename.db&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; con&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cursor()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cur&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREATE TABLE t (col1, col2);&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# use your column names here&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data.csv&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; fin: &lt;span style=&#34;color:#75715e&#34;&gt;# `with` statement available in 2.5+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# csv.DictReader uses first line in file for column headings by default&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; csv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DictReader(fin) &lt;span style=&#34;color:#75715e&#34;&gt;# comma is default delimiter&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    to_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;col1&amp;#39;&lt;/span&gt;], i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;col2&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dr]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cur&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;executemany(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INSERT INTO t (col1, col2) VALUES (?, ?);&amp;#34;&lt;/span&gt;, to_db)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;con&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;con&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;using-pandas&#34;&gt;Using Pandas&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(csvfile)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_sql(table_name, conn, if_exists&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;append&amp;#39;&lt;/span&gt;, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-3/</link>
      <pubDate>Sat, 08 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;recursion&#34;&gt;Recursion&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Recursion&lt;/em&gt;, or the process of a sub-program calling itself, is a reoccurring concept in many different algorithms, and a foundational topic in computer science.&lt;/p&gt;&#xA;&lt;p&gt;It &lt;em&gt;is&lt;/em&gt; a hard topic to understand, but not super complicated. All code examples should be ran and written yourself to gain a full understanding.&lt;/p&gt;&#xA;&lt;p&gt;Pseudocode is another term you should familiarize yourself with, since it will be used both by this book and by myself. Pseudocode refers to the code or instruction of a given program written out in plain English, usually written before any code is ran to ensure the logic is sound.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 30</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-30/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-30/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish Portfolio prototype&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I was able to finish a basic prototype for the portfolio page but it kind of sucks.&lt;/p&gt;&#xA;&lt;p&gt;I wanted to figure out an easy way to get the Instagram feed for the artist, but working with Meta&amp;rsquo;s API is almost as sucky as my portfolio page. So I honestly have my work cut out for me.&lt;/p&gt;&#xA;&lt;p&gt;This has been a crazy 30 days. Technically more, but who&amp;rsquo;s counting?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 31 - Summary</title>
      <link>https://mrpointing.com/posts/day-31---summary/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/posts/day-31---summary/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;I can&amp;rsquo;t believe I worked on this project for 30 days. The growth has been fantastic, and I should be proud of all that I was able to accomplish. If this is true, why do I feel a pit in my stomach when I think about this project? If I did such a good job, why do I feel like such crap?&lt;/p&gt;&#xA;&lt;p&gt;To be honest, the more I worked on this the more I understood why it takes teams of people to produce applications. I know there are gurus out there who can solo develop their ideas, but wow I never realized how &lt;em&gt;not&lt;/em&gt; like that I am. I enjoyed every part of the development process, yet the more I saw of the road ahead of me to actually make this usable? That is what really scared me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-2/</link>
      <pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;selection-sort&#34;&gt;Selection Sort&lt;/h1&gt;&#xA;&lt;p&gt;Before going into choosing an array vs. a linked list, let&amp;rsquo;s do a quick lesson on memory.&lt;/p&gt;&#xA;&lt;p&gt;Think of your computers memory like a dresser full of small drawers. When you want to store a value, in a variable, that variable name is given an address, and whatever value is stored inside of it. Incredibly simple for single value variables- but what about multiple items? This is where picking an array or a linked list comes in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 29</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-29/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-29/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Complete the manual entry form&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;FINALLY&lt;/strong&gt; completed the manual entry form!! I&amp;rsquo;ve been building this out for a while and I was nervous to commit to it since there were a few more moving parts than just a regular request/booking. Happy to say it&amp;rsquo;s done and it&amp;rsquo;s pretty close to completion. The next and hopefully last big hurdle is the creation of the portfolio page, and ending with the testing of the hosting and such.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Text Styles</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/text-styles/</link>
      <pubDate>Thu, 30 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/text-styles/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;getting-new-fonts&#34;&gt;Getting New Fonts&lt;/h2&gt;&#xA;&lt;p&gt;If you decided that you wanted to use a custom font for your website, unless the person viewing your site also has that font downloaded, it will default to the standard HTML font. To avoid this, it&amp;rsquo;s common practice to use a system font stack;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;font-family&lt;/span&gt;: system-ui, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Segoe UI&amp;#34;&lt;/span&gt;, Roboto, Helvetica, Arial, &lt;span style=&#34;color:#66d9ef&#34;&gt;sans-serif&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Apple Color Emoji&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Segoe UI Emoji&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Segoe UI Symbol&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will allow your site to have numerous back-up styles, in the off chance your user doesn&amp;rsquo;t have access to that font.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-1/</link>
      <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;introduction-to-algorithms&#34;&gt;Introduction to Algorithms&lt;/h1&gt;&#xA;&lt;p&gt;An &lt;em&gt;algorithm&lt;/em&gt; is simply a set of instructions or code designed in a way to accomplish a specific task. Tasks range from solving a math problem, to how to make decision given a specific scenario.&lt;/p&gt;&#xA;&lt;p&gt;All the algorithms featured in this text are fast, solve interesting problems, or even both. The text will introduce an algorithm, give an example, and discuss the running time in Big O (we&amp;rsquo;ll get back to this in a second).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPL - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-5/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;names-bindings--scope&#34;&gt;Names, Bindings, &amp;amp; Scope&lt;/h1&gt;&#xA;&lt;p&gt;We should understand that in across programming languages, like when we use the term &lt;em&gt;identifier&lt;/em&gt; or &lt;em&gt;name&lt;/em&gt; (both are synonymous), it depends on the language we are using. Different languages have different naming conventions and rules or &lt;strong&gt;syntax&lt;/strong&gt;. We&amp;rsquo;ll look at variables in this chapter, and the different parts their made out of;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Name&lt;/li&gt;&#xA;&lt;li&gt;Address&lt;/li&gt;&#xA;&lt;li&gt;Value&lt;/li&gt;&#xA;&lt;li&gt;Type&lt;/li&gt;&#xA;&lt;li&gt;Lifetime&lt;/li&gt;&#xA;&lt;li&gt;Scope&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bindings&#34;&gt;Bindings&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;em&gt;binding&lt;/em&gt; is an association between an attribute and an entity, such as between a variable and it&amp;rsquo;s type or value, or between an operation and a symbol. We consider the moment where the binding takes place appropriately as &lt;em&gt;binding time&lt;/em&gt;. Before any variable can be reference, it must be bound to a data type (which will be covered in the next chapter).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 28</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-28/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-28/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Work on email formatting&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish search for bookings&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Look into pagination&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I finished the searching for the bookings table, and tweaked the functions around a bit. This time, instead of creating a second search function, I made a new parameter &lt;code&gt;table&lt;/code&gt; that takes in the type of table you want to search from. This way, I can just create a second view for the page to view the bookings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 27</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-27/</link>
      <pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-27/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I got the search feature working! I honestly was pretty shocked at how easy it was to implement after I got past the initial hurdle of creating the correct SQL query.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I had to change the SQL query that grabbed the search results to format it with the variables before trying to execute it. I think because I was using a question mark placeholder for both column and search term, it was messing up the column value with quotation marks. Now, it&amp;rsquo;s working just fine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>20 Textbooks</title>
      <link>https://mrpointing.com/posts/20-textbooks/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/posts/20-textbooks/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;For 2025, I want to read and document my notes on Obsidian for 20 different textbooks. I acquired most of these throughout 2024 (thank you Humble Bundle!), and I thought why not put my money where my mouth is and actually use all the books I&amp;rsquo;ve purchased. Below is a list that I&amp;rsquo;ll keep updated, as well as a link to their inevitable notes.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1. &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/&#34;&gt;Learning Git&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2. &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---preface--chapter-1/&#34;&gt;Deep Learning - Math&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3. &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-1/&#34;&gt;Grokking Algorithms&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4. &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/&#34;&gt;Programming in Lua&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5. &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-1/&#34;&gt;Learning Modern Linux&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6. Real World Python&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7. Impractical Python Projects&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8. Foundations of Information Security&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9. Penetration Testing&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10. Python for DevOps&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11. Fast API&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12. The Shape of Data&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13. Deep Learning: A Visual Approach&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14. Practical Linux Systems Administration&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15. Efficient Linux at the Command Line&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16. Linux Basics for Hackers&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17. Cyberjutsu&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18. Network Programmability &amp;amp; Automation&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19. Docker Up &amp;amp; Running&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20. Learning DevSecOps&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Day 26</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-26/</link>
      <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-26/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I was able to get the progress from yesterday into a bit more of a tangible solution. Currently, in order to update the SQL table of when a booking has been confirmed, is when the embedded widget passes an event scheduled action, it will notify the window which will in turn send the scheduled events information to a Flask view. From there, I need to make another call using the events information unique identifier to retrieve the start time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deep Learning - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-3/</link>
      <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;probability-and-information-theory&#34;&gt;Probability and Information Theory&lt;/h1&gt;&#xA;&lt;p&gt;When we encounter situations where the output is unknown, &lt;em&gt;probability theory&lt;/em&gt; gives us a mathematical framework to deal with these statements. They use the term &amp;ldquo;quantifying uncertainty&amp;rdquo; which I like a lot. The connection between AI applications and probability come from two places; algorithms often use probability theory to give AI it&amp;rsquo;s reasoning abilities, and probability with statistics are used to grade and categorize the behavior of the AI models/agents.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hikaru no Go</title>
      <link>https://mrpointing.com/notes/entertainment/manga/hikaru-no-go/</link>
      <pubDate>Tue, 08 Dec 1998 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/manga/hikaru-no-go/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;If this had a proper ending, it might have gone down as one of my favorite manga of all time. Unfortunately, it&amp;rsquo;ll have to settle for one of the best.&lt;/p&gt;&#xA;&lt;p&gt;I really enjoyed reading Hikaru No Go, mostly for Sai and because I will most likely never play or get into Go. Just shown here, with how little attention they give to explaining how the game really works, go to show how complex Go can be. When attempting to look into it, I immeditately went back to Chess and happily never looked back.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 25</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-25/</link>
      <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-25/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I worked for a bit yesterday and a lot today, so I&amp;rsquo;ll count them as one. I was able to implement some more font choices so we can narrow that down sooner rather than later, and was also able to work on the color scheme a bit.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Today was a daunting experience. I was finally able to get the API connection with Calendly going, just to realize I&amp;rsquo;m getting into more unfamiliar territory. This time, I have to learn a bit about webhooks and how I can implement them to update my SQLite table when a booking is made. It seems like I have two options; I can use webhooks and figure out how that works, or I can find out how to get the response from the embedded widget. The webhooks seem like the better response long term.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 24</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-24/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-24/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Get current bookings page working&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Look into filtering requests/bookings&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Don&amp;rsquo;t want to have to refresh the page, but it doesn&amp;rsquo;t need to constantly update as the user is typing. Results should only appear upon hitting enter.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Current bookings was a lot easier now that I&amp;rsquo;m using a template for all my pages, and it was a breeze to create a new blueprint for the page since it&amp;rsquo;s even less code than the requests page, due to their not needing to handle any &lt;code&gt;post&lt;/code&gt; requests.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 23</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-23/</link>
      <pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-23/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Coming back from a few days to think about a game plan for the finish line, I think I can get something out and working by the end of these 30 days. Maybe.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish applying &lt;code&gt;base.html&lt;/code&gt; to all pages&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Make the admin index&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; page for current requests&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; page for current bookings&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; page for manual application form&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish CSS for pages&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Got a ton done today, and worked for probably over 2 hours. I was able to extend the &lt;code&gt;base.html&lt;/code&gt; to all files needed, and differentiated between admin and client-side facing pages with the creation of the &lt;code&gt;admin_base.html&lt;/code&gt; file. Not much different, but eventually I may split the stylesheets as well to really separate them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 12</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-12/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;We&amp;rsquo;re on our final chapter, and almost through with the rainbow project. Before we move onto our last lesson, let&amp;rsquo;s review where we&amp;rsquo;re at;&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/repo_status_12.png&#34;  alt=&#34;repo_status_12&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;An important distinction we need to make up front first is that in the past, we have introduced and used &lt;code&gt;pull&lt;/code&gt;. While that is involved in what we&amp;rsquo;re about to learn, we&amp;rsquo;re going to go more specifically into &lt;em&gt;pull requests&lt;/em&gt;, or a request to collaborate on work via a hosting service. You can integrate them using merging or rebasing, but mostly you&amp;rsquo;ll be using merging, so you&amp;rsquo;ll often hear the term &amp;ldquo;merge a pull request.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSS Units</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/css-units/</link>
      <pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/css-units/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;There are mainly two types of ways to define sizes in CSS; &lt;em&gt;absolute&lt;/em&gt; and &lt;em&gt;relative&lt;/em&gt;. Absolute units are any measurement where the size will retain the same size no matter what; regardless of the other elements on screen, and screen size. The only absolute unit that should be in use is pixels, or &lt;code&gt;px&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The other, relative, change based on a few factors. When using text, you&amp;rsquo;ll want to use &lt;code&gt;rem&lt;/code&gt; or &lt;code&gt;em&lt;/code&gt;, but most likely just &lt;code&gt;rem&lt;/code&gt;. When using &lt;code&gt;rem&lt;/code&gt; for font size, you&amp;rsquo;re setting the font size of the root element, which means as scale increases so does your text.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flexbox and Tables</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/flexbox-and-tables/</link>
      <pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/flexbox-and-tables/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;When progressing through the Odin Project, I went directly into the Full Stack JavaScript path, which started with &lt;a href=&#34;https://mrpointing.com/notes/computer-science/front-end/the-odin-project/svgs/&#34;&gt;SVGs&lt;/a&gt; and continues with Tables. I did see one topic I didn&amp;rsquo;t remember from the beginner path; flexboxes. My HTML is rusty, so I decided to read that article before hopping into tables. I thought why not combine them, since it was a quick read.&lt;/p&gt;&#xA;&lt;p&gt;Essentially, &lt;code&gt;flex&lt;/code&gt; is a way of organizing content on a web page so that it can be uniform and behavior is expected/controlled. Actually, &lt;em&gt;any&lt;/em&gt; element can be what we call a &lt;code&gt;flexbox&lt;/code&gt;, which holds and organizes the content, often referred too as it&amp;rsquo;s children. All you need to do is use the CSS style &lt;code&gt;display: flex;&lt;/code&gt; and you&amp;rsquo;ll have a &lt;code&gt;flexbox&lt;/code&gt;. Below is a basic example;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SVGs</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/svgs/</link>
      <pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/svgs/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;SVGs is an image formatting type, known for its use in web design. It is used so commonly due to it being scalable (part of the name, &lt;em&gt;Scalable Vector Graphics&lt;/em&gt;) and compatibility with CSS and JavaScript. Use cases range from icons to simple graphs and images, even backgrounds.&lt;/p&gt;&#xA;&lt;p&gt;The main reason to use an SVG instead of a pixel based format would be the resolution not being so limiting. To increase the size of an image using what we call &lt;em&gt;raster graphics&lt;/em&gt; would be stuck having to adjust for pixels not originally intended to be concerned with. SVGs on the other hand use mathematical formulas, which can scale up and down easily without issue.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 22</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-22/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-22/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Start working on HTML/CSS changes&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish reformatting HTML with  &lt;code&gt;base.html&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Surprisingly, got a decent amount done in just under an hour. I was able to complete the &lt;code&gt;base.html&lt;/code&gt; file, and worked out some of the kinks of the formatting. It doesn&amp;rsquo;t look exactly like the Figma yet, but I want to make sure all of the HTML files have the &lt;code&gt;base.html&lt;/code&gt; extension first.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;&lt;a href=&#34;https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-23/&#34;&gt;Day 23&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 11</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-11/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;rebasing&#34;&gt;Rebasing&lt;/h1&gt;&#xA;&lt;p&gt;We&amp;rsquo;re over ten chapters into this text; let&amp;rsquo;s get a quick recap of the status of our repos:&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/repo_status_11.png&#34;  alt=&#34;repo_status_11&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;One thing to notice about the repos up until this point is that up to the &lt;code&gt;green&lt;/code&gt; commit, our project&amp;rsquo;s history was linear. Some people prefer to keep their history this way, and want to avoid branching pathways, like we had to do for the three-way merges we had to make.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 21</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-21/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-21/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Get Calendly to prefill info for booking link&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I really thought todays goal was going to be harder, but it actually ended up being pretty easy. All I had to do was edit the URL and pass in some parameters. I thought maybe I&amp;rsquo;d have to set up a developer account and use JSON/JavaScript, but honestly it seems fine without it?&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;&lt;a href=&#34;https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-22/&#34;&gt;Day 22&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 20</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-20/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-20/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Correctly sync the booking form to choose which type of session&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Caret drop down menu &amp;amp; link to appropriate function&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Small Tattoo Session&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Medium Tattoo Session&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Large Tattoo Session&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Small Tattoo Reschedule&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Medium Tattoo Reschedule&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tattoo Touchup&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Got a ton done today; walked through the Figma with Big Boss and was able to get going on the layout. Promising results on that front shortly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 10</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-10/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;merge-conflicts&#34;&gt;Merge Conflicts&lt;/h1&gt;&#xA;&lt;p&gt;In our last chapter, we were able to pull off our first three way merge without any issues. This time, we&amp;rsquo;re about to experience some merge conflicts, and what to do when we encounter them. You can view the end of &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/&#34;&gt;Chapter 9&lt;/a&gt; to see the visualization of where we&amp;rsquo;re at; we&amp;rsquo;ve got the &lt;code&gt;M1&lt;/code&gt; commit as the latest in all three repos.&lt;/p&gt;&#xA;&lt;p&gt;One important distinction we need to make about this experiment we&amp;rsquo;re going to do versus the last chapter is the type of changes we&amp;rsquo;re going to make. In the last chapter, we had changes between &lt;em&gt;different&lt;/em&gt; files. Our &lt;code&gt;friend-rainbow&lt;/code&gt; edited the &lt;code&gt;othercolors.txt&lt;/code&gt; file, while our &lt;code&gt;rainbow&lt;/code&gt; repo only edited the &lt;code&gt;rainbowcolors.txt&lt;/code&gt; file. This time around, we&amp;rsquo;re going to make changes to the same file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 19</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-19/</link>
      <pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-19/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish the Figma for site&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Mess around on Calendly&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Finished the preliminary wireframe for the site, handed off to big boss&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So another rejection as far as my current layout for the site. I was able to get started and get an actual calendar embedded into the site which worked nicely. I now have a new slew of issues to worry about;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;There are 3 types of bookings to account for&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Normal tattoo sessions, three types&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Small (&amp;gt;2hrs)&lt;/li&gt;&#xA;&lt;li&gt;Medium (2 - 5hrs)&lt;/li&gt;&#xA;&lt;li&gt;Large (5+hrs)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Reschedules&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Small (2hrs)&lt;/li&gt;&#xA;&lt;li&gt;Medium (3hrs30)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Touchups (1hr30)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Change Admin&amp;rsquo;s booking page to choose which type of session&lt;/li&gt;&#xA;&lt;li&gt;&lt;del&gt;Booking should generate and save a link to it in the SQLite database for use later&lt;/del&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Artist can send via dm with info already filled out&lt;/li&gt;&#xA;&lt;li&gt;Figure out how to give Calendly forms pre-saved information&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;&lt;a href=&#34;https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-20/&#34;&gt;Day 20&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 18</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-18/</link>
      <pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-18/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Goals for today are quite simple; complete the look of the website on Figma, so the boss can come in and make design changes before I start committing any time towards building in HTML/CSS. I&amp;rsquo;m building out a basic skeleton for her to build off of, and I should be able to finish that today.&lt;/p&gt;&#xA;&lt;p&gt;As far as the project is coming along, since we are moving &lt;em&gt;away&lt;/em&gt; from using Full Calendar, I think we&amp;rsquo;re going to just integrate with Calendly. Two main reasons why I did this;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 17</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-17/</link>
      <pubDate>Tue, 17 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-17/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;First day back!&lt;/p&gt;&#xA;&lt;p&gt;I was sick for maybe 2, 3 weeks? Probably the worst cold I&amp;rsquo;ve had in my life, and of course it happened in the midst of my 30 day challenge. I almost tried to work through it, but I couldn&amp;rsquo;t focus at all and had to stop completely. Instead of calling it quits though, I&amp;rsquo;m going to start Day 17 over as a new day, and try and get back up on the saddle.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 16</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-16/</link>
      <pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-16/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Honestly, I might be taking a small break today? I mostly wanted to get the ball rolling this week but after yesterday, I think I might have to settle for Calendly integration before trying to re-create their services. The Twilio account rejected my verification &lt;em&gt;again&lt;/em&gt;, and after trying to build a working calendar system through JavaScript, I realized two things; I suck at JavaScript and don&amp;rsquo;t know what I&amp;rsquo;m doing, &lt;strong&gt;and&lt;/strong&gt; Twilio has everything I&amp;rsquo;m looking for plus a little more. Until I have enough free time to actually justify spending time trying to build a calendar system, I&amp;rsquo;d rather go for the faster approach, then come back later and see if there&amp;rsquo;s anything I can implement myself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 15</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-15/</link>
      <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-15/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text message for request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Artist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Integrate with Google Calendar&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For Today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Change calendar to full month and change the formatting&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Had a talk with the boss, and she wants it to look a little bit different than the week-hour grid I had going on. Instead, I need each date to be clickable when available, and when clicked, needs to open up a little window in front with the available times. I need to account for multiple things;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 14</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-14/</link>
      <pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-14/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text message for request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Artist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For Today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Refactor for Yagmail instead of Gmail&amp;rsquo;s Oauth2 set up&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Refactor requests for asking for consent for text messages&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create JSON file for artist schedule&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Integrate with Google Calendar? (maybe way down the line)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Make a confirm booking button that checks to make sure there is no issue with timing&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Getting a lot done today; more so with understanding how the calendar features work for Fullcalendar. So far, I know I&amp;rsquo;m going to use a Grid view, and I&amp;rsquo;m currently able to place events anywhere with the limit set by the artist.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 13</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-13/</link>
      <pubDate>Fri, 13 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-13/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I looked more into Twilio and it seems like they have their own API that can be used to make sure it&amp;rsquo;s compliant with their rules. I&amp;rsquo;m going to try editing in a checkbox option that allows the user to check yes before submitting the application. If they don&amp;rsquo;t say yes, the database save will &lt;em&gt;not&lt;/em&gt; include the phone number, save it as &lt;code&gt;None&lt;/code&gt;, and text message reminders won&amp;rsquo;t be sent to them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 12</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-12/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text message for request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Artist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For Today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Booking Python file&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Figure out how Google Calendar works&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Had a good talk with the boss about the structuring of the site so far. I had misunderstood the need for a &amp;ldquo;fast form&amp;rdquo;, it really should just be a button that sends a booking form that she fills out the request details and customer information for.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rhythm of War</title>
      <link>https://mrpointing.com/notes/entertainment/books/rhythm-of-war/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/rhythm-of-war/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Previous:&lt;/strong&gt;&lt;/em&gt; &lt;a href=&#34;https://mrpointing.com/notes/entertainment/books/dawnshard/&#34;&gt;Dawnshard&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Wow. Completely floored that I was so captivated by this entry. I began as a book 4 hater; it felt like so much had been accomplished in the first three, what else could possibly happen to our cast of characters? Well, it turns out, a lot can happen and change, which is a recurring theme not only throughout this series, but especially in this one. Almost all of our main characters are going through internal and external factors that push them to make decisions, some life-altering, others not so much. What this installation does perfectly I think, is the pain and confusion that comes along with change.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 11</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-11/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text message for request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Artist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Accept Request &amp;amp; Booking Feature&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &amp;ldquo;Accept&amp;rdquo; button HTML site&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Booking HTML site&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Booking Python file (refactor requests to make recs_books?)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I got a Twilio phone number waiting to be verified, added the booking form and all the logic to get there, as well as fixed a small issue where requests were stuck and would re-send after refreshing the page.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 10</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-10/</link>
      <pubDate>Tue, 10 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text message for request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Artist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For Today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Accept Request &amp;amp; Booking Feature&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &amp;ldquo;Accept&amp;rdquo; button HTML site&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Booking HTML site&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Booking Python file (refactor requests to make recs_books?)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Set up the text messaging API account.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;&lt;a href=&#34;https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-11/&#34;&gt;Day 11&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arch Linux on Virtual Machine</title>
      <link>https://mrpointing.com/projects/arch-linux-on-virtual-machine/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/arch-linux-on-virtual-machine/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;After running my laptop on Ubuntu for the past 4 months (and enjoying it) I figured it was time to give some other distros a chance. One of the YouTube channels I watch in order to expand my horizons is &lt;a href=&#34;https://www.youtube.com/@mischavandenburg&#34;&gt;Mischa van den Burg&lt;/a&gt; who specializes in cloud computing dev ops things. I&amp;rsquo;ve watched a ton of his videos and got inspired to learn more about dev ops mostly through his influence.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 9</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-9/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Last Week:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For Today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up email to Client w/ request form&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up email to Admin saying there&amp;rsquo;s a new request w/ client info&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text messages for both&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I was able to get a decent chunk of things today for today. One thing that I&amp;rsquo;m trying to to stress is the prettification of all of my elements. I got the emails working, but they look like crap. I am slightly worried when it comes time to use HTML to build them, they might break, but for now I&amp;rsquo;ll try not to let it stress me out.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 8</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-8/</link>
      <pubDate>Sun, 08 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Tattooed today, so maybe today will be nice free day?&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;&lt;a href=&#34;https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-9/&#34;&gt;Day 9&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 7</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-7/</link>
      <pubDate>Sat, 07 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I didn&amp;rsquo;t get to work on this project much this weekend, and honestly I feel kind of okay about it? I am going to be putting off the AI roadmap on hold until this month is over to see if that helps with my workflow. This week I tried to do both and it left me really wanting to pick one over the other, so perhaps I&amp;rsquo;ll just leave the AI roadmap stuff on the back burner while I work hard on the next few days.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 6</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-6/</link>
      <pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test email sending/receiving&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Today was a very busy work day, so I really didn&amp;rsquo;t get that far on anything. The biggest thing I did was I was able to locate the right documentation to help out with the next few steps. Otherwise, not a whole lot got done today.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;When running the Gmail quickstart code, I neglected to realize you would need to change the &lt;code&gt;SCOPE&lt;/code&gt; list variable to allow more authorizations. I spent way too long yesterday getting a validation error.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sending Emails from Python</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/sending-emails-from-python/</link>
      <pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/sending-emails-from-python/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;As shown in one of the chapter 10 in the &lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/&#34;&gt;Python Tutorial&lt;/a&gt;, we can send emails over a built-in &lt;code&gt;smtplib&lt;/code&gt; module that you can send emails with. You can find a basic example there. In wanting to implement a email to the tattoo booking app, I wanted to do a tutorial on how I can set it up so that emails are sent from the tattoo artist&amp;rsquo;s email address, so it would be easy for the client to respond.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 5</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-5/</link>
      <pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; View Request Page (Admin page for Sarah)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Work on getting pictures to display&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test and integrate email to client &amp;amp; Sarah w/ request form&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Work Time:&lt;/strong&gt;&lt;/em&gt; 1hr&lt;/p&gt;&#xA;&lt;p&gt;So far so okay. I was able to finally get the images working, but I had to rely on ChatGPT for help since none of the videos I watched were able to really help. I also dived into docs but couldn&amp;rsquo;t really find what I was looking for. So for today, I&amp;rsquo;m going to have to be happy with what I got done, and call it till tomorrow, where I&amp;rsquo;ll give a shot at multiple images and the email function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 4</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-4/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; View Request Page (Admin page for Sarah)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Work on the &lt;code&gt;JOIN&lt;/code&gt; to bring client info along with each request&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Work on getting pictures to display&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test and integrate email to client &amp;amp; Sarah w/ request form&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Work Time:&lt;/strong&gt;&lt;/em&gt; 1hr 20&lt;/p&gt;&#xA;&lt;p&gt;Not my best day, but to be expected. Today wasn&amp;rsquo;t one of my best days, so I shouldn&amp;rsquo;t be too hard on myself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 3</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-3/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; View Request Page (Admin page for Sarah)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Python file (Flask View)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; HTML file (formatting)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Work on the &lt;code&gt;JOIN&lt;/code&gt; to bring client info along with each request&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test and integrate email to client &amp;amp; Sarah w/ request form&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Work Time:&lt;/strong&gt;&lt;/em&gt; 2 hours&lt;/p&gt;&#xA;&lt;p&gt;While I didn&amp;rsquo;t get that much done as far as my lists are concerned, I was able to get a lot done today. I had to make all of the logging in and out features, as well as the pages for it and viewing all the requests. I was able to work it out nicely so all Sarah has to do is change the ending of the URL to get to the log-in form, and people are tempted to mess around with it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sorting Techniques</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/sorting-techniques/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/sorting-techniques/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/howto/sorting.html&#34;&gt;Link&lt;/a&gt; to article&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sorting-basics&#34;&gt;Sorting Basics&lt;/h1&gt;&#xA;&lt;p&gt;There are two basic ways we can ascending sort (organize from least to greatest on value) built into Python, &lt;code&gt;.sort()&lt;/code&gt; on a list object, and the &lt;code&gt;sorted()&lt;/code&gt; function, which takes in any iterable sequence.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt; will actually return the sequence in order, while &lt;code&gt;.sort()&lt;/code&gt; is more of a step to be done, and will actually return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sorted(a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;key-functions&#34;&gt;Key Functions&lt;/h2&gt;&#xA;&lt;p&gt;Both of the methods we looked at above have an additional parameter &lt;code&gt;key&lt;/code&gt;, which takes in a function that is performed on each element within the sorted list before making any comparisons. This allows for different sorting methods; some even use lambda which is pretty cool.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 1</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-1/</link>
      <pubDate>Sat, 30 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write down a step-by-step initial guide to follow to help track/maintain progress&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Complete the initial booking form&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up the SQLite database/schema&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Work Time:&lt;/strong&gt;&lt;/em&gt; 1hr 45&lt;/p&gt;&#xA;&lt;p&gt;So today was the first day and I feel like I was able to make some pretty decent progress. I created a really simple step-by-step guide to keep me on track, and to make the scope less creepy. I also was able to get a working schema for my tables, and I currently have &lt;code&gt;user&lt;/code&gt; for Sarah, &lt;code&gt;client&lt;/code&gt; for all people who book, and a &lt;code&gt;requests&lt;/code&gt; for initial requests. I&amp;rsquo;m not sure if I&amp;rsquo;ll have a separate table for full bookings or not, who knows.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 2</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-2/</link>
      <pubDate>Sat, 30 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Complete the initial booking form&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Allow Images to be stored in SQLite database&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; View Request Page (Admin page for Sarah)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Work Time:&lt;/strong&gt;&lt;/em&gt; 1hr 30&lt;/p&gt;&#xA;&lt;p&gt;I got a lot done today, or at least it feels like it. First up, I messed around with the CSS Cursor gave me and tried to play with the setting up of the text entry fields for the requests. That went by smoothly, but I wanted to look into how I could use conditionals to retrieve different question fields.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 9</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/</link>
      <pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;three-way-merges&#34;&gt;Three Way Merges&lt;/h1&gt;&#xA;&lt;p&gt;Every merge we&amp;rsquo;ve done so far has been a fast-forward merge. In this chapter, we&amp;rsquo;re going to take a look at performing our first three way merge, and also get some hands on experience with how editing our files out of order will affect our work flow. First, let&amp;rsquo;s simplify our visualization and update it to reflect where we left off in the last chapter;&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/three_way_simple.png&#34;  alt=&#34;three_way_simple&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;Again, three way merges are important and necessary to understand. To reiterate &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/&#34;&gt;Chapter 5&lt;/a&gt;, three way merges are for branches whose paths have diverged at some point. There&amp;rsquo;s a great example there about exactly how a three-way merge would work with a good example; be sure to review.&lt;/p&gt;</description>
    </item>
    <item>
      <title>13. Roman to Integer</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/13.-roman-to-integer/</link>
      <pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/13.-roman-to-integer/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Roman numerals are represented by seven different symbols: &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Symbol&lt;/strong&gt;       &lt;strong&gt;Value&lt;/strong&gt;&#xA;I             1&#xA;V             5&#xA;X             10&#xA;L             50&#xA;C             100&#xA;D             500&#xA;M             1000&lt;/p&gt;&#xA;&lt;p&gt;For example, &lt;code&gt;2&lt;/code&gt; is written as &lt;code&gt;II&lt;/code&gt; in Roman numeral, just two ones added together. &lt;code&gt;12&lt;/code&gt; is written as &lt;code&gt;XII&lt;/code&gt;, which is simply &lt;code&gt;X + II&lt;/code&gt;. The number &lt;code&gt;27&lt;/code&gt; is written as &lt;code&gt;XXVII&lt;/code&gt;, which is &lt;code&gt;XX + V + II&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dawnshard</title>
      <link>https://mrpointing.com/notes/entertainment/books/dawnshard/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/dawnshard/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Previous:&lt;/strong&gt; &lt;a href=&#34;https://mrpointing.com/notes/entertainment/books/oathbringer/&#34;&gt;Oathbringer&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m not sure who keeps telling Brando Sando to keep making Novellas, but whoever it is needs to actually &lt;em&gt;read&lt;/em&gt; them. I really can&amp;rsquo;t justify this being it&amp;rsquo;s own story. Even more than the first, this felt like a different type of filler. Filler with the audacity to be a hardcover.&lt;/p&gt;&#xA;&lt;p&gt;My issues don&amp;rsquo;t come with the story at all really. I actually enjoyed Rysn, and thought every time she was on the page she felt real. She had valid concerns about being treated as a disabled person in a world not built for one. I loved these parts, and had never even considered before how impossible something like a wheelchair would be in a place without smooth paved roads. I even thought her ability to naturally lead her crew even though she was constantly anxious about it actually made sense. My issues come with how easily digestible this story is, and how it could&amp;rsquo;ve been condensed to take place in the interludes of Rhythm of War.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decorators</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/decorators/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/decorators/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;what-is-a-decorator&#34;&gt;What is a Decorator?&lt;/h1&gt;&#xA;&lt;p&gt;Essentially, a decorator, is a wrapping for function. It allows you to do something &lt;em&gt;before&lt;/em&gt; and/or &lt;em&gt;after&lt;/em&gt; a function is called. Let&amp;rsquo;s look at a super basic example;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uppercase_word&lt;/span&gt;(function):  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wrapper&lt;/span&gt;():  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; function()  &lt;span style=&#34;color:#75715e&#34;&gt;# call the function to get the return value  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        make_upper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; make_upper  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; wrapper&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s say we make a really basic function to print text out;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;say_word&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;say wooooord&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could print it out like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inheritance</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/inheritance/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/inheritance/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;According to the AI road map I&amp;rsquo;ve been following, this and the rest of the concepts in this folder are meant to be considered more advanced concepts. Some of these have been covered in the &lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/&#34;&gt;Python Tutorial&lt;/a&gt;, some have not. This is the starting note, but I won&amp;rsquo;t link these concepts together unless necessary, as the concepts aren&amp;rsquo;t explicitly tied together.&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-is-inheritance&#34;&gt;What is Inheritance?&lt;/h1&gt;&#xA;&lt;p&gt;Inheritance is the concept that you can build a new class based off of, or &lt;em&gt;derived&lt;/em&gt; from, an existing class. You can actually build one based off many, and the syntax is as follows;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 8</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-8/</link>
      <pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;cloning-and-fetching&#34;&gt;Cloning and Fetching&lt;/h1&gt;&#xA;&lt;p&gt;As it stands, we have just pushed our local repo onto our remote repo, and updated it with all currently created branches. For this chapter, we&amp;rsquo;re going to start working through what it would be like if you&amp;rsquo;d like to start working on your project with a friend or coworker through an essential core concept of Git called &lt;em&gt;cloning&lt;/em&gt;, or copying a remote repository.&lt;/p&gt;&#xA;&lt;h2 id=&#34;cloning-a-remote-repository&#34;&gt;Cloning a Remote Repository&lt;/h2&gt;&#xA;&lt;p&gt;Like we know for the beginning of this text, Git is a major player in collaborative coding. The below example returns to our Book Project for another example of how we would use it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ring</title>
      <link>https://mrpointing.com/notes/entertainment/books/ring/</link>
      <pubDate>Tue, 01 Jan 1991 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/ring/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;One that&amp;rsquo;s been on my reading list since I was a kid and saw the dynamic spiral cover, Ring is the original book that inspired the prolific and perfectly-spoofed movie of the same name. Hearing this was a series made me nervous this wouldn&amp;rsquo;t be great, but I ended up enjoying it at some parts.&lt;/p&gt;&#xA;&lt;p&gt;It went by really fast. The main character was the &lt;em&gt;worst&lt;/em&gt; dude. Hated how much he clearly did not care about his wife and kids until he put them in danger. Spoiler alert, this guy has the worst gut instincts of all time. He of course becomes friends with the other worst character of all time, and unfortunately make a dynamic duo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flask&#39;s Tutorial</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-tutorial/</link>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-tutorial/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://flask.palletsprojects.com/en/stable/tutorial/&#34;&gt;Link&lt;/a&gt; to tutorial.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I was really hesitant to start this note, since I basically ran through this tutorial once already to start and complete my final project, &lt;a href=&#34;https://mrpointing.com/projects/lython/&#34;&gt;Lython&lt;/a&gt;. However, since I&amp;rsquo;m starting Sarah&amp;rsquo;s site, and I want to test out a bunch of features/really get to understand Flask, let&amp;rsquo;s go through it once more.&lt;/p&gt;&#xA;&lt;p&gt;Last time, I did a combination of going through the tutorial, then making changes as I saw fit. I feel like I missed some crucial details I want to review, and I never documented my process. I&amp;rsquo;m going to completely go through it as if I don&amp;rsquo;t want to make any edits, then make edits &lt;em&gt;after&lt;/em&gt; it&amp;rsquo;s finished.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deep Learning - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-2/</link>
      <pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;linear-algebra&#34;&gt;Linear Algebra&lt;/h1&gt;&#xA;&lt;p&gt;This book covers all topics of linear algebra that are important to deep learning, not necessarily all topics within Linear Algebra. For a text more focused in linear algebra, see &lt;a href=&#34;https://cosmathclub.wordpress.com/wp-content/uploads/2014/10/georgi-shilov-linear-algebra4.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;scalars-vectors-matrices-and-tensors&#34;&gt;Scalars, Vectors, Matrices, and Tensors&lt;/h2&gt;&#xA;&lt;h3 id=&#34;scalars&#34;&gt;Scalars&lt;/h3&gt;&#xA;&lt;p&gt;Single numbers, usually denoted by a lowercase variable name, and introduced with some information on the number.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Ex.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Let $s \in R$ be the slope of the line for a &lt;em&gt;real-valued&lt;/em&gt; scalar&lt;/li&gt;&#xA;&lt;li&gt;Let $n \in N$ be the number of units for a &lt;em&gt;natural number&lt;/em&gt; scalar&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;vectors&#34;&gt;Vectors&lt;/h3&gt;&#xA;&lt;p&gt;An ordered array of numbers, obtainable via the index position of the number in the array. Usually denoted with a lowercase variable name in bold. The elements start counting at 1, and are usually subscript attached to the name of the vector to show each element.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Your First App</title>
      <link>https://mrpointing.com/notes/computer-science/python/tkinter/your-first-app/</link>
      <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/tkinter/your-first-app/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://realpython.com/python-gui-tkinter/&#34;&gt;Link&lt;/a&gt; to the tutorial.&lt;/p&gt;&#xA;&lt;p&gt;What makes Tkinter nice is that it&amp;rsquo;s a built-in library, meaning it should come with all versions of Python 3.12. If you&amp;rsquo;re using Ubuntu (like me) for this example you will have to install it but it doesn&amp;rsquo;t take long at all (&lt;code&gt;sudo apt-get install python3-tk&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;p&gt;Creating your first window is incredibly simple. The following code will get you up and running in no time:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tkinter &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; tk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tk()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Label(text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I Love Python!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;words&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mainloop()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code will give you an empty window that will stay open until you close it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deep Learning - Preface</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---preface--chapter-1/</link>
      <pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---preface--chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;preface&#34;&gt;Preface&lt;/h1&gt;&#xA;&lt;h2 id=&#34;mit-press-online-edition&#34;&gt;MIT Press Online Edition&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ian-goodfellow-yoshua-bengio-and-aaron-courville&#34;&gt;Ian Goodfellow, Yoshua Bengio, and Aaron Courville&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.deeplearningbook.org/&#34;&gt;Link&lt;/a&gt; to the book.&lt;/p&gt;&#xA;&lt;h1 id=&#34;chapter-1&#34;&gt;Chapter 1&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This book is intended to prepare you for concepts and theory used in Machine Learning and Artificial Intelligence, more specifically &lt;em&gt;deep learning&lt;/em&gt;, or the multi-layered stacked concepts that make up the intelligence of an AI model.&lt;/p&gt;&#xA;&lt;p&gt;Like most textbooks, it goes into the why of AI, and what they do best; solving problems that humans are generally not good at. AI was designed to tackle these problems, problems that are generally abstract or formal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Computer Networking</title>
      <link>https://mrpointing.com/notes/computer-science/internet-and-it/coursera/introduction-to-computer-networking/</link>
      <pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/internet-and-it/coursera/introduction-to-computer-networking/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;tcpip-and-the-five-layer-network-model&#34;&gt;TCP/IP and the Five Layer Network Model&lt;/h1&gt;&#xA;&lt;p&gt;Below is a basic table outlining the five layers:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Layer Name&lt;/th&gt;&#xA;          &lt;th&gt;Protocol&lt;/th&gt;&#xA;          &lt;th&gt;Protocol Data Unit&lt;/th&gt;&#xA;          &lt;th&gt;Addressing&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Application&lt;/td&gt;&#xA;          &lt;td&gt;HTTP, SMTP, etc.&lt;/td&gt;&#xA;          &lt;td&gt;Messages&lt;/td&gt;&#xA;          &lt;td&gt;n/a&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Transport&lt;/td&gt;&#xA;          &lt;td&gt;TCP/UDP&lt;/td&gt;&#xA;          &lt;td&gt;Segment&lt;/td&gt;&#xA;          &lt;td&gt;Port #&amp;rsquo;s&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Network&lt;/td&gt;&#xA;          &lt;td&gt;IP&lt;/td&gt;&#xA;          &lt;td&gt;Packet/Datagram&lt;/td&gt;&#xA;          &lt;td&gt;IP Addresses&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Data Link&lt;/td&gt;&#xA;          &lt;td&gt;Ethernet, Wi-Fi&lt;/td&gt;&#xA;          &lt;td&gt;Frames&lt;/td&gt;&#xA;          &lt;td&gt;MAC Address&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Physical&lt;/td&gt;&#xA;          &lt;td&gt;n/a&lt;/td&gt;&#xA;          &lt;td&gt;Bits&lt;/td&gt;&#xA;          &lt;td&gt;n/a&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Physical Layer&lt;/strong&gt;: The actual computing device(s) and the cables that connect them, sends and receives signals&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Link Layer&lt;/strong&gt;: Also known as the network access layer, it&amp;rsquo;s our first protocol to interpret signals sent from and to each computing device&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;Ethernet&lt;/em&gt; is our first and most common protocol, which is responsible for transporting data across the network&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Network Layer&lt;/strong&gt;: Also know as the internet layer, this layer is what actually allows the computing devices to communicate with each other. Helps the data move along from your computer to a server for a webpage or application. &lt;em&gt;Routers&lt;/em&gt; are used to accomplish this.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Routers with communication actually define a internetwork, and the largest and most popular of these is obviously, the &lt;strong&gt;internet&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;IP&lt;/em&gt; is the protocol the computing devices follow to ensure accurate travels through routers.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Transport Layer&lt;/strong&gt;: This is where the decision to dictate which device is the client (using an app) versus the server (where the information is stored).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cables&#34;&gt;Cables&lt;/h2&gt;&#xA;&lt;p&gt;Quick note on cables since I think Khan Academy went into enough detail on this. One new thing I picked up was this term, &lt;em&gt;Crosstalk&lt;/em&gt;. So, Cat5 cables were the most common copper cabling for some amount of time. Most are being replaced by Cat5e and Cat6 due to this issue of Crosstalk, where one wire in the cable unintentionally picks up the electrical pulse from a different wire.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 7</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-7/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;creating-and-pushing-to-a-remote-repository&#34;&gt;Creating and Pushing to a Remote Repository&lt;/h1&gt;&#xA;&lt;p&gt;Currently, we have three commits, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;orange&lt;/code&gt;, and &lt;code&gt;yellow&lt;/code&gt;. We have two branches, both of them (&lt;code&gt;head&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt;) pointing at our &lt;code&gt;yellow&lt;/code&gt; commit, and &lt;code&gt;HEAD&lt;/code&gt; is attached to &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Now that we&amp;rsquo;re beginning to talk about remote repositories, it&amp;rsquo;s important to understand how these projects are started. We&amp;rsquo;ve been working on our Rainbow project, which we know is a &lt;em&gt;local&lt;/em&gt; repository.&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s our first way; to start from a local repository. We already looked at how to start a local repository, so there are only two more steps: Create a remote repository using your service of choice, then &lt;em&gt;push&lt;/em&gt; your local repository to your remote repository. We can use the &lt;code&gt;git push&lt;/code&gt; command to make this happen.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Do Androids Dream of Electric Sheep</title>
      <link>https://mrpointing.com/notes/entertainment/books/do-androids-dream-of-electric-sheep/</link>
      <pubDate>Mon, 01 Jan 1968 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/do-androids-dream-of-electric-sheep/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Not remembering much from my initial watch of Blade Runner, I wasn&amp;rsquo;t sure what to expect going into this one. I did really enjoy A Scanner Darkly by Dick, so I expected to like this one despite not knowing much. I was not disappointed, and after blowing through this in 2 days I can say I really enjoyed it.&lt;/p&gt;&#xA;&lt;p&gt;The philosophical questions presented combined with the loose answers they provide were interesting and engaging enough for me to think about throughout the read. Trying to find the meaning for the actions and motivations of the characters, just to be given a major thematic question of &amp;ldquo;Should we assign meaning to meaningless things&amp;rdquo; halfway through got me good.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Technical Support Fundamentals</title>
      <link>https://mrpointing.com/notes/computer-science/internet-and-it/coursera/technical-support-fundamentals/</link>
      <pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/internet-and-it/coursera/technical-support-fundamentals/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;I started this Corsera course in hopes of getting a certification (and that helping me get a job). I&amp;rsquo;m going to assume it&amp;rsquo;s similar to Khan Academy&amp;rsquo;s &lt;a href=&#34;https://mrpointing.com/notes/computer-science/internet-and-it/khan-academy/ap-computer-science-principles---unit-1/&#34;&gt;courses&lt;/a&gt;, but we&amp;rsquo;ll find out if completing it helps or not after the fact.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-it-support&#34;&gt;What is IT Support?&lt;/h2&gt;&#xA;&lt;p&gt;The people behind the scenes helping &lt;em&gt;Information Technology (IT)&lt;/em&gt; run and troubleshoot issues. Digital literacy is the &amp;ldquo;defining factor&amp;rdquo; that makes a good IT support technician.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 16</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-16/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-16/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;creating-tables&#34;&gt;Creating Tables&lt;/h1&gt;&#xA;&lt;p&gt;One of the hardest things to do in data science (at least, to me) is pick up another person&amp;rsquo;s collected data. It will often take a few minutes of &amp;ldquo;getting calibrated&amp;rdquo; to understand the rows from simple things like understanding naming conventions (some are really bad) to more complex things like what story the data is telling.&lt;/p&gt;&#xA;&lt;p&gt;The more complicated problems will end up needing some visualization tools which is something we&amp;rsquo;ll look at later, so for now let&amp;rsquo;s not think too big. However, one of the best ways to become more familiar with a dataset is to build it from scratch. Since we&amp;rsquo;re building it from scratch, that means we&amp;rsquo;re going to need some tables to store the data in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 17 &amp; 18</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-17--18/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-17--18/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;altering-tables&#34;&gt;Altering Tables&lt;/h1&gt;&#xA;&lt;p&gt;If you need to include additional information not provided by the original tables creation statement, you can use an &lt;code&gt;ALTER TABLE&lt;/code&gt; statement to manipulate and create columns.&lt;/p&gt;&#xA;&lt;h2 id=&#34;adding-columns&#34;&gt;Adding Columns&lt;/h2&gt;&#xA;&lt;p&gt;Extremely similar to how we add in new rows, adding in a new column uses the following syntax:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt; DataType OptionalTableConstraint&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;DEFAULT&lt;/span&gt; default_value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We specify a table we want to add into, provide the column&amp;rsquo;s name and datatype, and we have the option for a table constraint and default value if needed. It&amp;rsquo;s usually good practice to insert some default value, since all rows that already exist in the table will need some value for the new column (otherwise it will be NULL).&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLite Tutorial</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlite-tutorial/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlite-tutorial/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;what-is-a-database&#34;&gt;What is a Database?&lt;/h1&gt;&#xA;&lt;p&gt;Essentially, a database is a place in which your data and tables exists, organized in a way described by the &lt;em&gt;database schema&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;There are many database platforms that use SQL as their main language; MySQL, NoSQL, Microsoft SQL Server, just to name a few. The one we&amp;rsquo;re going to work with due to it&amp;rsquo;s ease of use and lightweight installation is SQLite (appropriately named).&lt;/p&gt;&#xA;&lt;h1 id=&#34;creating-our-first-database&#34;&gt;Creating Our First Database&lt;/h1&gt;&#xA;&lt;h2 id=&#34;connection&#34;&gt;Connection&lt;/h2&gt;&#xA;&lt;p&gt;We can actually use SQLite directly inside of PyCharm, our IDE. Just like any other module, we can use &lt;code&gt;pip install sqlite3&lt;/code&gt; to install SQLite in our project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Products of Array Not Including Self</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/products-of-array-not-including-self/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/products-of-array-not-including-self/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given an integer array &lt;code&gt;nums&lt;/code&gt;, return an array &lt;code&gt;output&lt;/code&gt; where &lt;code&gt;output[i]&lt;/code&gt; is the product of all the elements of &lt;code&gt;nums&lt;/code&gt; except &lt;code&gt;nums[i]&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; I originally thought I had an awesome solution, but it only passed with the first test case that didn&amp;rsquo;t have zeros:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;productExceptSelf&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(nums):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            total &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; nums[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(int(total&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;num))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(total)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My issue began when there were 0&amp;rsquo;s to worry about. I spent a decent amount of time on this so I just decided to look at the answer below and I&amp;rsquo;ll dissect it after:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 13</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-13/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-13/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;inserting-rows&#34;&gt;Inserting Rows&lt;/h1&gt;&#xA;&lt;p&gt;When we first started going over SQL databases, we just understood them as basic tables with columns of properties and rows of instances. The next step up is the &lt;em&gt;Database Schema&lt;/em&gt;, which describes all tables in a database and the datatypes those rows can contain.&lt;/p&gt;&#xA;&lt;p&gt;Because each row has defined types that are allowed, it keeps the database cleaner and easier to navigate.&lt;/p&gt;&#xA;&lt;p&gt;Our first non-&lt;code&gt;SELECT&lt;/code&gt; statement, we can start to insert data into our tables using the &lt;code&gt;INSERT&lt;/code&gt; statement:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 14 &amp; 15</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-14--15/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-14--15/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;updating-rows&#34;&gt;Updating Rows&lt;/h1&gt;&#xA;&lt;p&gt;If we can &lt;code&gt;SELECT&lt;/code&gt; rows, and &lt;code&gt;INSERT&lt;/code&gt; data into rows, we can most certainly &lt;code&gt;UPDATE&lt;/code&gt; them as well.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;UPDATE&lt;/code&gt; works similarly to &lt;code&gt;INSERT&lt;/code&gt;, and needs a &lt;code&gt;WHERE&lt;/code&gt; clause to specify which rows should be updated:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value_or_expression&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    other_column &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value_or_expression&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; condition;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Obviously, like &lt;code&gt;INSERT&lt;/code&gt;, the values or expressions returned should match the data type of the expected column/property.&lt;/p&gt;&#xA;&lt;p&gt;A helpful tip is to always try a &lt;code&gt;SELECT&lt;/code&gt; statement out first to make sure you are grabbing all the rows you think you want &lt;em&gt;before&lt;/em&gt; you make any changes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 10 &amp; 11</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-10--11/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-10--11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;queries-with-aggregates&#34;&gt;Queries with Aggregates&lt;/h1&gt;&#xA;&lt;p&gt;Aggregates are analogous with built-in functions. They&amp;rsquo;re helpful pieces of code we can use to make writing our queries easier. The syntax is as follows:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; AGG_FUNC(column_or_expression) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; agg_description&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; constraint_expression;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the previous syntax, we would use said function over all rows and return a single result. Here are some functions we&amp;rsquo;ll use:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;COUNT(column or *)&lt;/code&gt;: returns the number of rows if no columns specified, otherwise returns number of non-NULL values in chosen column&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MIN(column)&lt;/code&gt;: returns smallest numerical value for all rows in group&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MAX(column)&lt;/code&gt;: returns largest numerical value for all rows in group&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AVG(column)&lt;/code&gt;: returns average numerical value for all rows in group&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SUM(column)&lt;/code&gt;: returns sum of all numerical values for all rows in the group&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;There&amp;rsquo;s another concept we should look at called &lt;em&gt;grouped aggregate functions&lt;/em&gt;, which instead of returning values for all rows, allows you to return multiple values based upon a specified delimiter or group. We can achieve this by using the &lt;code&gt;GROUP BY&lt;/code&gt; statement:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 12</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-12/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;order-of-execution&#34;&gt;Order of Execution&lt;/h1&gt;&#xA;&lt;p&gt;The order of execution within queries is important to understand. When getting unexpected output one of the first things you should check is your syntax and be sure you 100% know what you&amp;rsquo;re saying/what you expect to get back. If you aren&amp;rsquo;t writing complete or correct sentences, you&amp;rsquo;ll never get correct responses.&lt;/p&gt;&#xA;&lt;p&gt;The following syntax is the complete structure for a query and is executed sequentially (one after the other):&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 9</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-9/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;queries-with-expressions&#34;&gt;Queries with Expressions&lt;/h1&gt;&#xA;&lt;p&gt;Now that we understand the basics of querying, we can really start to dive deeper by building more complex statements as &lt;em&gt;expressions&lt;/em&gt;. These expressions can be mathematical or even basic string functions.&lt;/p&gt;&#xA;&lt;p&gt;When writing expressions, we should use the &lt;code&gt;AS&lt;/code&gt; keyword to create an alias for our expression, which makes our statements easier to read. This can be used on columns or tables.&lt;/p&gt;&#xA;&lt;p&gt;The following statement is a great example of an expression:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 7</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-7/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;outer-joins-vs-inner-joins&#34;&gt;Outer Joins vs. Inner Joins&lt;/h1&gt;&#xA;&lt;p&gt;Any table from an &lt;code&gt;INNER JOIN&lt;/code&gt; will &lt;em&gt;only contain information that belongs in &lt;strong&gt;BOTH&lt;/strong&gt; tables.&lt;/em&gt; These can be limiting, which is where &lt;code&gt;LEFT&lt;/code&gt;, &lt;code&gt;RIGHT&lt;/code&gt;, and &lt;code&gt;FULL JOIN&lt;/code&gt;&amp;rsquo;s come into the picture.&lt;/p&gt;&#xA;&lt;p&gt;Our syntax for a standard expression doesn&amp;rsquo;t change, only get&amp;rsquo;s different options for our &lt;code&gt;JOIN&lt;/code&gt; keyword.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;, another_table_column, ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RIGHT&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; another_table&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; mytable.id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; another_table.id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; condition(s)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;, ... &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; num_limit &lt;span style=&#34;color:#66d9ef&#34;&gt;OFFSET&lt;/span&gt; num_offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s say we have two tables, joining table A to table B. Doing a &lt;code&gt;LEFT JOIN&lt;/code&gt; will include rows from A even if there isn&amp;rsquo;t a match in B. Similarly, a &lt;code&gt;RIGHT JOIN&lt;/code&gt; will return rows found in B even if there is no match in A. If we were to do a &lt;code&gt;FULL JOIN&lt;/code&gt;, all rows are kept even if there is no match.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 8</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-8/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;null-values&#34;&gt;NULL Values&lt;/h1&gt;&#xA;&lt;p&gt;Unfortunately, working with data is an easy way to see that we don&amp;rsquo;t live in a perfect world. There are more than a few instances of there not being any data available to display, which can cause all sorts of issues with our queries. These values are what we call &lt;strong&gt;NULLS&lt;/strong&gt;*, and can differ depending on your situation.&lt;/p&gt;&#xA;&lt;p&gt;Most often at the start, we can leave them as NULL. However, depending on the structure of your table, you could do a 0, or even an empty text string.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Appendix A</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/appendix-a/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/appendix-a/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;summations&#34;&gt;Summations&lt;/h1&gt;&#xA;&lt;p&gt;As we know, we analyze algorithms by their running time. When algorithms use for or while loops (iterative structures), the running time is expressed as the &lt;strong&gt;sum of all the times spent on execution&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summation-formulas-and-properties&#34;&gt;Summation Formulas and Properties&lt;/h2&gt;&#xA;&lt;p&gt;Say we have $a_1,a_2,&amp;hellip;a_n$ numbers, what we call a &lt;em&gt;sequence&lt;/em&gt;. While $n$ is a non-negative integer, we can say the sum of that set is $\sum_{k=1}^{n}a_k$.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If $n=0$, value is 0.&lt;/li&gt;&#xA;&lt;li&gt;The value of a finite series is always well-defined&lt;/li&gt;&#xA;&lt;li&gt;Order terms are added in doesn&amp;rsquo;t matter (what di I mean with this? who knows)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;We might also have an infinite sequence, the infinite sum could be written as $\sum_{k=1}^{\infty}a_k$, or $lim_{n-&amp;gt;\infty}\sum_{k=1}^{n}a_k$.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-3/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;characterizing-running-times&#34;&gt;Characterizing Running Times&lt;/h1&gt;&#xA;&lt;p&gt;As we saw in Chapter 2, order of growth gives us the ability to quantify the effectiveness of our algorithms, and compare them.&lt;/p&gt;&#xA;&lt;p&gt;Us studying these algorithms at large enough input sizes is us studying the &lt;strong&gt;asymptotic efficiency&lt;/strong&gt; of an algorithm. We can say an algorithm that is &amp;ldquo;&lt;em&gt;more asymptotically efficient&lt;/em&gt;&amp;rdquo; is the better choice for most cases, save small inputs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;o-notation-theta-notation-and-omega-notation&#34;&gt;O-notation, $\Theta$-notation, and $\Omega$-notation&lt;/h2&gt;&#xA;&lt;p&gt;We already met $\Theta$-notation in chapter 2; this is a type of asymptotic notation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploratory Data Analysis with Pandas</title>
      <link>https://mrpointing.com/notes/computer-science/python/exploratory-data-analysis-with-pandas/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/exploratory-data-analysis-with-pandas/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.kaggle.com/code/kashnitsky/topic-1-exploratory-data-analysis-with-pandas&#34;&gt;Link&lt;/a&gt; to article&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-6/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;hosting-services-and-authentication&#34;&gt;Hosting Services and Authentication&lt;/h1&gt;&#xA;&lt;p&gt;Everything we&amp;rsquo;ve done up until this point has been local. Even though some of the things we&amp;rsquo;ve looked at incentive&amp;rsquo;s working in a group, if your repository is local no one else will have access to it. This is where public repositories come into play.&lt;/p&gt;&#xA;&lt;p&gt;There are three main players in the repository game; GitHub, GitLab, and Bitbucket. I personally only have experience with GitHub, so we&amp;rsquo;ll be focusing on that going forward.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NumPy Quickstart</title>
      <link>https://mrpointing.com/notes/computer-science/python/numpy-notes/numpy-quickstart/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/numpy-notes/numpy-quickstart/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://numpy.org/doc/stable/user/quickstart.html&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;&#xA;&lt;p&gt;What should you know to get the most out of this lesson? At the very least, the fundamentals of Python. You should also refer to &lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/numpy-notes/what-is-numpy/&#34;&gt;this&lt;/a&gt; to get a fundamental understanding of the reasons why we&amp;rsquo;d want to use &lt;code&gt;ndarray&lt;/code&gt; in the first place.&lt;/p&gt;&#xA;&lt;p&gt;What are we doing this lesson then? We&amp;rsquo;re going to learn about what one, two, and $n$ dimensional arrays actually are, some algebra operations on &lt;code&gt;ndarray&lt;/code&gt; objects &lt;em&gt;without&lt;/em&gt; &lt;code&gt;for&lt;/code&gt; loops, and even more advanced things like what axis and shape properties are.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 4</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-4/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;filtering-and-sorting-results&#34;&gt;Filtering and Sorting Results&lt;/h1&gt;&#xA;&lt;p&gt;One way to ensure we don&amp;rsquo;t get duplicate rows, we could use the &lt;code&gt;DISTINCT&lt;/code&gt; keyword;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DISTINCT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;, another_column, ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; condition(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This however is pretty indiscriminate, and we&amp;rsquo;ll look at how to specify duplicates with &lt;code&gt;GROUP BY&lt;/code&gt; later.&lt;/p&gt;&#xA;&lt;p&gt;Often in the real world, our data is not going to be ordered nice and neatly. Quite often, data is inserted without rhyme or reason, and purely based off when some events happened and collected rather than compared to the rest of the data in the data set. Because of this, we&amp;rsquo;ll want to order our data off a certain condition to make it more readable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 6</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-6/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;multi-table-queries-with-joins&#34;&gt;Multi-table Queries with JOINs&lt;/h1&gt;&#xA;&lt;p&gt;Unlike the database we&amp;rsquo;ve been using for most of these lessons, real world data is usually divided into different tables, often through a process we call &lt;strong&gt;normalization&lt;/strong&gt;. Normalization is the procedure used to break down large tables into smaller more organic tables. This reduces duplicate data, and allows for a more natural growth of data within respective tables.&lt;/p&gt;&#xA;&lt;p&gt;Due to our data being broken up, our queries will in turn have to become more complex to grab information over multiple tables. We can achieve this with a &lt;code&gt;JOIN&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 2</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-2--3/</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-2--3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;specifying-data-to-select-constraints&#34;&gt;Specifying Data to Select (Constraints)&lt;/h1&gt;&#xA;&lt;p&gt;When our table has only a few rows, a &lt;code&gt;select *&lt;/code&gt; query isn&amp;rsquo;t so bad. However, if we have hundreds, sometimes thousands of rows of data, retrieving all of them at once becomes an issue.&lt;/p&gt;&#xA;&lt;p&gt;That reason is why we have the ability to specify our results with conditional statements:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;, another_column, ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; condition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; another_condition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; ...;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can collect more complex results from building more complex queries. Say for example we wanted to collect reptiles who don&amp;rsquo;t have teeth and are the color green, we could use a query like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Note Taking Methods</title>
      <link>https://mrpointing.com/notes/obsidian/note-taking-methods/</link>
      <pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/obsidian/note-taking-methods/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;para-method&#34;&gt;PARA Method&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://fortelabs.com/blog/para/&#34;&gt;Link&lt;/a&gt; to notes.&lt;/p&gt;&#xA;&lt;p&gt;Projects, Areas, Resources, and Archives.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Projects:&lt;/strong&gt; Short term efforts in your work or life that you&amp;rsquo;re actively working on&lt;/p&gt;&#xA;&lt;p&gt;Think of the things you want to accomplish in the short-term. A few days to a few weeks of effort. Think:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Completing a coding project (website, utility)&lt;/li&gt;&#xA;&lt;li&gt;Purchase a new computer/phone/tv&lt;/li&gt;&#xA;&lt;li&gt;Reorganize your room/locker&lt;/li&gt;&#xA;&lt;li&gt;Finishing a school project&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Area:&lt;/strong&gt; Long-term responsibilities you want to manage over time&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contains Duplicate</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/contains-duplicate/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/contains-duplicate/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given an integer array &lt;code&gt;nums&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; if any value appears &lt;strong&gt;more than once&lt;/strong&gt; in the array, otherwise return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; We can create a secondary list that we can start to throw the values from our array &lt;code&gt;nums&lt;/code&gt; into, and check to see if they already exist in the list or not. As soon as we enter a number that already exists in our list, it will return &lt;code&gt;True&lt;/code&gt; and end. If it goes through the entire &lt;code&gt;nums&lt;/code&gt; array without breaking, our list has no duplicates, and we can return &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Two Integer Sum</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/two-integer-sum/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/two-integer-sum/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given an array of integers &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;target&lt;/code&gt;, return the indices &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; such that &lt;code&gt;nums[i] + nums[j] == target&lt;/code&gt; and &lt;code&gt;i != j&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;You may assume that &lt;em&gt;every&lt;/em&gt; input has exactly one pair of indices &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; that satisfy the condition.&lt;/p&gt;&#xA;&lt;p&gt;Return the answer with the smaller index first.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; We can use a two pointer approach with &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;. First, we set up a for loop that will iterate &lt;code&gt;j&lt;/code&gt; from the length of the array to the first position. Then we can use &lt;code&gt;i&lt;/code&gt; to move through the array forwards. We use a nested while loop with a conditional statement that says if the combination of position &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are equal to target, return those positions in &lt;code&gt;[i, j]&lt;/code&gt; format.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Valid Anagram</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-anagram/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-anagram/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given two strings &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; if the two strings are anagrams of each other, otherwise return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;An &lt;strong&gt;anagram&lt;/strong&gt; is a string that contains the exact same characters as another string, but the order of the characters can be different.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; We essentially need to compare two strings and see if the amount of characters are the same for each word. There are probably a few ways to do that, but I went for the extremely direct approach.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Edgedancer</title>
      <link>https://mrpointing.com/notes/entertainment/books/edgedancer/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/edgedancer/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Previous:&lt;/strong&gt; &lt;a href=&#34;https://mrpointing.com/notes/entertainment/books/words-of-radiance/&#34;&gt;Words of Radiance&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Definitely a novella that took me too long to finish, and not really because I was enjoying it. More so because I didn&amp;rsquo;t love Lift as a character. I was actually going to say I didn&amp;rsquo;t hate their childish behavior, but typing that out I had a gut feeling I wasn&amp;rsquo;t being honest with myself.&lt;/p&gt;&#xA;&lt;p&gt;I really &lt;em&gt;didn&amp;rsquo;t&lt;/em&gt; like how childish Lift was. Maybe that was her point, but I didn&amp;rsquo;t seem to grasp onto the story. Wendel, her spren, being a Squidward-type that doesn&amp;rsquo;t want to go anywhere or do anything was a nice contrast, but I couldn&amp;rsquo;t help feel sorry that we find out the character Wendel could have been with died in one of the earlier books, and was a more interesting character.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;merging&#34;&gt;Merging&lt;/h1&gt;&#xA;&lt;p&gt;We last looked at how branches can help a team work on a project together, without losing or any conflicting progress. Now for the logical next step- combining the work together into one branch. We call this &lt;strong&gt;merging&lt;/strong&gt;, or the combining of work from different branches.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;em&gt;source branch&lt;/em&gt; is the merging branch, or where the work is coming from. The &lt;em&gt;target branch&lt;/em&gt; is the branch you&amp;rsquo;re merging into. The only branch altered in a merge is the target branch.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oathbringer</title>
      <link>https://mrpointing.com/notes/entertainment/books/oathbringer/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/oathbringer/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Holy Moly. What a ride. This book took &lt;em&gt;FOREVER&lt;/em&gt; to finish. Exactly 3 months and a day to be exact. But it was so worth it.&lt;/p&gt;&#xA;&lt;p&gt;A true continuation from &lt;a href=&#34;https://mrpointing.com/notes/entertainment/books/words-of-radiance/&#34;&gt;Words of Radiance&lt;/a&gt;, this book follows the logical progression from where that book left off and really begins to open up the world. There are still lots of secrets left to unfold (Who is Wit? Who is the Cremling God that Lift meets in Edgedancer? What&amp;rsquo;s going to happen with Renarin? How is Odium going to exploit Taravangian? WHY DOESN&amp;rsquo;T KALADIN AND SHALLAN GET TOGETHER???) which has me very excited for the next two books.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pandas</title>
      <link>https://mrpointing.com/notes/computer-science/python/pandas/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/pandas/</guid>
      <description>&lt;hr&gt;</description>
    </item>
    <item>
      <title>Python Problems</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-problems/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-problems/</guid>
      <description>&lt;hr&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Introduction</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---introduction/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---introduction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sqlbolt.com/lesson/introduction&#34;&gt;Link&lt;/a&gt; to lessons.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;introduction-to-sql&#34;&gt;Introduction to SQL&lt;/h1&gt;&#xA;&lt;p&gt;What is SQL? &lt;strong&gt;Structured Query Language&lt;/strong&gt; is a language used to create, maintain, and use relational databases. Thousands of applications from simple projects to Microsoft products use SQL through various formats and configurations.&lt;/p&gt;&#xA;&lt;p&gt;Some use SQLite, MySQL, Postgres, Oracle, or Microsoft SQL, to name a few. Each use SQL as base, and include features that garner appeal from different developers.&lt;/p&gt;&#xA;&lt;h2 id=&#34;relational-databases&#34;&gt;Relational Databases&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;em&gt;relational database&lt;/em&gt; is a collection of 2D tables that are linked through some key value. All tables are made of a certain number of rows and columns.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 1</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-1/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;When we want to get information for a SQL table, we use the &lt;code&gt;SELECT&lt;/code&gt; statement, or a &lt;em&gt;query&lt;/em&gt;. Within a query is what data we want, where to get it from, and any additional formatting we want done before we get said data.&lt;/p&gt;&#xA;&lt;p&gt;When selecting information from a table, we have to understand the make-up of a table. Let&amp;rsquo;s say we have a &lt;code&gt;reptiles&lt;/code&gt; table. There might be different types of reptiles (snakes, lizards, turtles, crocodiles) but each reptile has characteristics that make it unique. These characteristics are broken down into the different columns within a table, and each entry of a reptile is denoted by the rows.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reading and Writing Python Files</title>
      <link>https://mrpointing.com/notes/computer-science/python/reading-and-writing-files-with-python/</link>
      <pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/reading-and-writing-files-with-python/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;This is a more general file for Python input and output for files. I feel like I constantly need to look up this stuff, so things I find I&amp;rsquo;ll write down here for reference.&lt;/p&gt;&#xA;&lt;h1 id=&#34;reading-in-a-csv&#34;&gt;Reading in a CSV&lt;/h1&gt;&#xA;&lt;p&gt;I was solving some &lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/python-problems/&#34;&gt;Python Problems&lt;/a&gt; and needed to format easily from a CSV. I did a quick google and came across this &lt;a href=&#34;https://saturncloud.io/blog/how-to-convert-a-csv-file-to-a-dictionary-in-python-using-the-csv-and-pandas-modules/&#34;&gt;article&lt;/a&gt; which reminded me &lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/pandas/&#34;&gt;Pandas&lt;/a&gt; has a easy CSV reader. The syntax is like so,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 4</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-4/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;branches&#34;&gt;Branches&lt;/h1&gt;&#xA;&lt;p&gt;We last left off with our first commit in our &lt;code&gt;rainbow&lt;/code&gt; project. Remember, we can also use &lt;code&gt;git status&lt;/code&gt; to get an update on the status of our repository. Before we get too deep into defining what a &lt;em&gt;branch&lt;/em&gt; is, let&amp;rsquo;s explore why they&amp;rsquo;re used. That might make it a bit easier to understand.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-do-we-use-branches&#34;&gt;Why Do We Use Branches?&lt;/h2&gt;&#xA;&lt;p&gt;Branches help us differentiate changes in a given project. They can be made for an number of reasons, but can be boiled down to two main points:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Obsidian Help - Plugins</title>
      <link>https://mrpointing.com/notes/obsidian/obsidian-help/obsidian-help---plugins/</link>
      <pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/obsidian/obsidian-help/obsidian-help---plugins/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;core-plugins&#34;&gt;Core Plugins&lt;/h1&gt;&#xA;&lt;p&gt;Out of the box, Obsidian has a plethora of usable features. Most you might never touch. Others will be ingrained in your workflow you&amp;rsquo;ll forget they&amp;rsquo;re plugins. This list is not extensive- like everything else, more detailed information can be found in their &lt;a href=&#34;https://help.obsidian.md/Plugins/Core+plugins&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;outgoing-and-backlinks&#34;&gt;Outgoing and Backlinks&lt;/h2&gt;&#xA;&lt;p&gt;We already saw how powerful linking can be using Obsidian. Let&amp;rsquo;s define two specific types of links; &lt;strong&gt;outgoing links&lt;/strong&gt; and &lt;strong&gt;backlinks&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Backlinks&lt;/strong&gt; are a collection of notes that precede a given note. A note can have as many backlinks as there are references; there is no limit. You can view backlinks by default on your right-hand side bar.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Obsidian Help - Editing and Formatting</title>
      <link>https://mrpointing.com/notes/obsidian/obsidian-help/obsidian-help---editing-and-formatting/</link>
      <pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/obsidian/obsidian-help/obsidian-help---editing-and-formatting/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;editing-and-formatting&#34;&gt;Editing and Formatting&lt;/h1&gt;&#xA;&lt;p&gt;Congratulations, after this year you&amp;rsquo;ll technically know &lt;em&gt;two&lt;/em&gt; languages! &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;, what we&amp;rsquo;re writing in, isn&amp;rsquo;t technically a programming language, but it is a useful format to understand and be able to read, just in case something isn&amp;rsquo;t rendered or just browsing files.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basic-formatting-syntax&#34;&gt;Basic Formatting Syntax&lt;/h2&gt;&#xA;&lt;p&gt;A paragraph is just a block of text, separated by a newline. The paragraph for a literal example:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This is a paragraph. &#xA;&#xA;This is a different paragraph.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We talked about headings before, now let&amp;rsquo;s get specific. Headings are paragraphs that start with a certain amount of hashtags. The amount of hashes correlate the the heading number, and the more hashes the smaller it is.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Teaching with Obsidian</title>
      <link>https://mrpointing.com/posts/teaching-with-obsidian/</link>
      <pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/posts/teaching-with-obsidian/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;I&amp;rsquo;m not sure if it&amp;rsquo;s obvious to everyone, but as a teacher I noticed that students do not know how to take notes. At best a student is writing something down, albeit not very good notes. Most are not taking any notes at all.&lt;/p&gt;&#xA;&lt;p&gt;This is a small band-aid fix, but I&amp;rsquo;m going to start implementing Obsidian as a minor section of my curriculum this year. Online notes are not a replacement for good handwritten note-taking, but for my Computer Science Honors kids it&amp;rsquo;s a good place to store code from lessons and start to think about what&amp;rsquo;s really important.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Obsidian Help - User Interface</title>
      <link>https://mrpointing.com/notes/obsidian/obsidian-help/obsidian-help---user-interface/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/obsidian/obsidian-help/obsidian-help---user-interface/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;user-interface&#34;&gt;User Interface&lt;/h1&gt;&#xA;&lt;p&gt;A user interface, otherwise referred to as a UI, is the visual parts of a program you interact with when using it. For Obsidian, the UI is the entire window. Let&amp;rsquo;s break it down piece by piece.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;appearance&#34;&gt;Appearance&lt;/h2&gt;&#xA;&lt;p&gt;Before we go any further, we should go over the fun part. Making it your own. If your left bar isn&amp;rsquo;t already open, hit the button on the top left (it&amp;rsquo;s a little square with lines in it). Once open, you hit the cog on the bottom right of the left bar. Under the options bar, you hit &amp;ldquo;Appearance.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Obsidian Help - Getting Started</title>
      <link>https://mrpointing.com/notes/obsidian/obsidian-help/obsidian-help---getting-started/</link>
      <pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/obsidian/obsidian-help/obsidian-help---getting-started/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h1&gt;&#xA;&lt;p&gt;If you don&amp;rsquo;t know where to start, start here.&lt;/p&gt;&#xA;&lt;h2 id=&#34;downloading-and-installing&#34;&gt;Downloading and Installing&lt;/h2&gt;&#xA;&lt;p&gt;For the most part, you&amp;rsquo;ll have access to the computers at school all year long, so you can always get Obsidian through there. If however you want to get Obsidian going at home, look no further.&lt;/p&gt;&#xA;&lt;h3 id=&#34;install-on-windows&#34;&gt;Install on Windows&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://obsidian.md/download&#34;&gt;Click&lt;/a&gt; the link, then &lt;strong&gt;Universal&lt;/strong&gt; and follow instructions.&lt;/p&gt;&#xA;&lt;h3 id=&#34;install-on-mac&#34;&gt;Install on Mac&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://obsidian.md/download&#34;&gt;Click&lt;/a&gt; the link, then &lt;strong&gt;Universal&lt;/strong&gt; and follow instructions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Obsidian Help - Preface</title>
      <link>https://mrpointing.com/notes/obsidian/obsidian-help/obsidian-help---preface/</link>
      <pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/obsidian/obsidian-help/obsidian-help---preface/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://help.obsidian.md/Home&#34;&gt;Link&lt;/a&gt; to Documentation.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;what-is-obsidian&#34;&gt;What is Obsidian?&lt;/h1&gt;&#xA;&lt;p&gt;Essentially, a note-taking tool. All it boils down too is the format in which your notes are placed (I just think Obsidian is neat). Obsidian uses a Markdown, a markup-language. Not really a programming language, more of an &lt;em&gt;encoding&lt;/em&gt; language, but we don&amp;rsquo;t need to worry about that for right now.&lt;/p&gt;&#xA;&lt;p&gt;For now, all we are going to focus on is the basics-you have something you want to take notes on, and you write down your notes inside. No (strict) syntax, no indenting, no errors, no worries. Unlike a standard document editor however (think Word) it lacks the ability and flare of the more powerful applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Private GPT</title>
      <link>https://mrpointing.com/projects/private-gpt/</link>
      <pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/private-gpt/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.privategpt.dev/installation/getting-started/installation&#34;&gt;Link&lt;/a&gt; to the project.&lt;/p&gt;&#xA;&lt;p&gt;This really tested my time and patience. What should have taken me an hour took me closer to a day, but it was extremely worth the time investment. No mind blowing innovation going on, and certainly nothing I haven&amp;rsquo;t seen before, nevertheless gratifying to bring together.&lt;/p&gt;&#xA;&lt;p&gt;The most frustrating issue was that the configuration for running setting up the llama model in Poetry was either wrong on the tutorial or my machine is weird. Essentially I had to use &lt;code&gt;poetry install --extras &amp;quot;llms-llama-cpp ui vector-stores-qdrant embeddings-huggingface&amp;quot;&lt;/code&gt; instead of there version (not much different, save embeddings and different llama model).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-3/</link>
      <pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;making--a-commit&#34;&gt;Making  a Commit&lt;/h1&gt;&#xA;&lt;p&gt;We left off with our first text file in our working directory, our &lt;code&gt;rainbowcolors.txt&lt;/code&gt; file. It has one sentence in it, and we can check that by either opening it or running &lt;code&gt;cat rainbowcolors.txt&lt;/code&gt; in the working directory. We can see that we haven&amp;rsquo;t made any commits yet, and we only have one untracked file. You can run &lt;code&gt;git status&lt;/code&gt; to gather all of this info.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-do-we-make-commits&#34;&gt;Why Do We Make Commits?&lt;/h2&gt;&#xA;&lt;p&gt;Commits, like we learned, are snapshots of our project at a certain point of time. We obviously need to keep track of our code for numerous reasons. We could list out edge cases all day, the point is we will eventually need them for some reason.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Explaining my Obsidian to Hugo Workflow</title>
      <link>https://mrpointing.com/posts/explaining-my-obsidian-to-hugo-workflow/</link>
      <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/posts/explaining-my-obsidian-to-hugo-workflow/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;where-we-left-off&#34;&gt;Where We Left Off&lt;/h2&gt;&#xA;&lt;p&gt;I was just able to get my &lt;a href=&#34;https://mrpointing.com&#34;&gt;website&lt;/a&gt; viewable for the first time in Hugo&amp;rsquo;s draft view. I worked through the formatting errors that my Hugo theme wasn&amp;rsquo;t compatible with, and everything is looking good.&lt;/p&gt;&#xA;&lt;p&gt;Implementing Git was also incredibly simple. If you don&amp;rsquo;t know anything about Git, you can start by reading my analysis of a beginner &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/&#34;&gt;Git textbook&lt;/a&gt;. Since Hugo requires you using a separate directory for content, just initialize a new repo in your directory, connect it to a GitHub repo, and you&amp;rsquo;re off to the races.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-2/</link>
      <pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;local-repositories&#34;&gt;Local Repositories&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introducing-and-initializing-a-local-repository&#34;&gt;Introducing and Initializing a Local Repository&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;em&gt;repository&lt;/em&gt; (or a repo) is the container of a project version controlled by Git. There are two; &lt;em&gt;local&lt;/em&gt; and &lt;em&gt;remote&lt;/em&gt;. Local is stored on your computer, while remote is obviously hosted remotely (someone else&amp;rsquo;s computer).&lt;/p&gt;&#xA;&lt;p&gt;GitHub is one of the largest platforms and the one I&amp;rsquo;m most familiar with. GitLab and Bitbucket also exist, but I haven&amp;rsquo;t used them myself. Chapter 6 onward deals with this; for now, we can worry about it later.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux File System-Structure Explained!</title>
      <link>https://mrpointing.com/notes/computer-science/videos/linux-file-system-structure-explained/</link>
      <pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/videos/linux-file-system-structure-explained/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HbgzrKJvDRw&amp;list=PLU-P2PlzpIf3EpWfxk-Mu_ZVJVS5Wb-_e&amp;index=21&#34;&gt;Link&lt;/a&gt; to video.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Unlike Windows, the Linux file system is structured a lot differently.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;/bin&lt;/strong&gt; is the directory containing &amp;ldquo;binaries&amp;rdquo;, just another word for programs or applications. /bin contains programs like &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, and all sorts of others.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;/sbin&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beautiful Soup</title>
      <link>https://mrpointing.com/notes/computer-science/python/beautiful-soup/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/beautiful-soup/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;git-and-the-command-line&#34;&gt;Git and the Command Line&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-is-git&#34;&gt;What is Git?&lt;/h2&gt;&#xA;&lt;p&gt;Git is a &lt;em&gt;version control&lt;/em&gt; system that keeps track of the changes done to a project or directory. When you edit a file, Git records what was added and removed. If files are added or removed, Git has it&amp;rsquo;s eyes on it (if you&amp;rsquo;re configuring it correctly).&lt;/p&gt;&#xA;&lt;p&gt;Git was originally created by Linus Torvalds, the creator of Linux. Meant to be used at the command line, it is clearly more complex then a simply saving a file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My Hero Academia</title>
      <link>https://mrpointing.com/notes/entertainment/manga/my-hero-academia/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/manga/my-hero-academia/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;by Kohei Horikoshi&#xA;2014 - 2024&lt;/p&gt;&#xA;&lt;p&gt;Ah man. Ten years of My Hero. Crazy to think of where I was at 10 years ago, in High School myself, seeing these characters grow. Grow up into being one of the most meh pieces of work I&amp;rsquo;ve ever followed.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s hard to even think of where My Hero fell off for me. I want to say it was watching alongside the anime and not really loving it, to around the time Deku started to gain more powers, nothing ever really felt memorable enough to make me want to catch up. I ended up letting hundreds of chapters go by, just to catch up and read week to week for the last 20 or so chapters.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AP Computer Science Principles - Unit 2</title>
      <link>https://mrpointing.com/notes/computer-science/internet-and-it/khan-academy/ap-computer-science-principles---unit-2/</link>
      <pubDate>Wed, 14 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/internet-and-it/khan-academy/ap-computer-science-principles---unit-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;unit-2-the-internet&#34;&gt;Unit 2: The Internet&lt;/h1&gt;&#xA;&lt;p&gt;The internet is a global connection of computers communicating with one another. The constant flow of input and output keeps the internet going.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s an &lt;em&gt;open&lt;/em&gt; system, meaning anyone can join given they follow the proper &lt;strong&gt;protocols&lt;/strong&gt;. These include but aren&amp;rsquo;t limited too:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;IP:&lt;/strong&gt; Protocol for identifying IP addresses with some routing strategy to send and receive information&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;TCP/UDP:&lt;/strong&gt; Protocols that transfer packets of data that check for errors along the route&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;TLS:&lt;/strong&gt; Protocol for encrypting data&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HTTP &amp;amp; DNS:&lt;/strong&gt; Protocols for internet browsers&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Even though we likely use the internet everyday, a lot of these protocols are so far abstracted that we hardly have to think about these. That doesn&amp;rsquo;t mean we shouldn&amp;rsquo;t understand them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flask&#39;s Templates</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-templates/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-templates/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://flask.palletsprojects.com/en/3.0.x/templating/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Starting My Website</title>
      <link>https://mrpointing.com/posts/starting-my-website/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/posts/starting-my-website/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;As a first official post, why not start at the beginning. I want to quickly go over how I started, my motivations, and the first issues I ran into. The footnotes will reference all of the articles and videos I watched that helped contribute to how it works today.&lt;/p&gt;&#xA;&lt;h2 id=&#34;components&#34;&gt;Components&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Obsidian&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/mr-pointing/website&#34;&gt;Git/GitHub&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Cloudflare&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-i-started&#34;&gt;How I Started&lt;/h2&gt;&#xA;&lt;p&gt;Regarding Obsdian, I began writing as if I were dictating to my students. Instead of overthinking the design of the site and never making content, I just started taking notes. I started with going through a &lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/&#34;&gt;python tutorial&lt;/a&gt;, and kept branching out to what it is now. The flow and structure has changed numerous times already; I&amp;rsquo;m sure in a few weeks it will be a little different.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Current Obsidian Plugins</title>
      <link>https://mrpointing.com/notes/obsidian/current-obsidian-plugins/</link>
      <pubDate>Thu, 08 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/obsidian/current-obsidian-plugins/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;community-plugins&#34;&gt;Community Plugins&lt;/h1&gt;&#xA;&lt;p&gt;Community plugins keep some pieces of software alive. When development stops on a product, often the users can keep producing &lt;em&gt;forks&lt;/em&gt; of the initial project and continue developing their own functions and uses for the app. In Obsidian&amp;rsquo;s case, even while production is still going, they implore users to develop their own plugins to meet their own needs.&lt;/p&gt;&#xA;&lt;p&gt;One thing should be stressed; community plugins should only be prioritized &lt;em&gt;after&lt;/em&gt; learning the ins and outs of core Obsidian. Obsidian has tons of features, large and small, some we haven&amp;rsquo;t gone over. Take your time to explore Obsidian before branching out.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Circuit Playground Express</title>
      <link>https://mrpointing.com/projects/circuit-playground-express/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/circuit-playground-express/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;I was listening to a podcast from &lt;a href=&#34;https://realpython.com/&#34;&gt;Real Python&lt;/a&gt; that mentioned getting your hands on a Circuit Playground Express. It was in passing and I probably wouldn&amp;rsquo;t have ordered one, had I not seen one for sale at Micro Center for only $30.&lt;/p&gt;&#xA;&lt;p&gt;From my understanding, it&amp;rsquo;s a very basic introduction to using circuit boards, and I got it mostly because of something called &lt;a href=&#34;https://circuitpython.org/&#34;&gt;Circuit Python&lt;/a&gt;, which is a version of Python meant to introduce students and beginners into controlling single board computers (SBC&amp;rsquo;s).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mr. Pointing Website</title>
      <link>https://mrpointing.com/projects/mr.-pointing-website/</link>
      <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/mr.-pointing-website/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;So, I want to make my website using Obsidian to write Markdown files, have Hugo collect and display them, then use Cloudflare to host it. I have a few things I know I need to get done:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Get pages formatted to look good on Hugo&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Add &lt;code&gt;date&lt;/code&gt; property to all pages&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Get Excalidraw images linked&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Cloudflare Hugo Note Title Needs fixing&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Need to create something to format for Hugo&amp;rsquo;s scientific notation&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Intro to Algorithms&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Khan Academy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Ignore Templates, re-route Excalidraw&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Get mr.pointing domain name&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create README&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create Now Page&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Reading/Listening/Watching&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Web scraper to get info from Discogs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Update/Connect GitHub&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Start &lt;a href=&#34;https://mrpointing.com/posts/starting-my-website/&#34;&gt;Starting My Website&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So some updates before I go to bed:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploying a Flask Application via Apache</title>
      <link>https://mrpointing.com/projects/deploying-a-flask-application-via-apache/</link>
      <pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/deploying-a-flask-application-via-apache/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.opensourceforu.com/2023/03/deploying-a-flask-application-via-the-apache-server/&#34;&gt;Link&lt;/a&gt; to the project website.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Cookies</title>
      <link>https://mrpointing.com/notes/computer-science/internet-and-it/cookies/</link>
      <pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/internet-and-it/cookies/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/learning/privacy/what-are-cookies/&#34;&gt;Link&lt;/a&gt; to Cloudflare, super helpful resource.&lt;/p&gt;&#xA;&lt;p&gt;A &lt;em&gt;cookie&lt;/em&gt; is a piece of data sent from a web server to a web browser filled with information about the client and session, created when the request was sent from the client to the server.&lt;/p&gt;&#xA;&lt;p&gt;The three main reasons why you&amp;rsquo;d want to use cookies would be:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Session Info:&lt;/strong&gt; Storing the session info in the cookie allows you to do things like refresh the page or link to another page without having to retype in your user information.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Personalization:&lt;/strong&gt; Cookies will actually track the things you do on websites that are custom or personal to you, and even remember the interaction so it will prompt your information to log-in again, instead of another user.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tracking:&lt;/strong&gt; The first two sort of count as tracking, but in a more literal sense. Take for example; how do adds on other websites know you&amp;rsquo;ve been shopping for a certain product on Amazon? Third-party tracking cookies.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;There are also different types of cookies:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beginner Tutorial for Obsidian Dataview</title>
      <link>https://mrpointing.com/notes/obsidian/beginner-tutorial-for-obsidian-dataview/</link>
      <pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/obsidian/beginner-tutorial-for-obsidian-dataview/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=G8eOF61wmzI&amp;t=669s&#34;&gt;Link&lt;/a&gt; to the video.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://mrpointing.com/notes/computer-science/hugo/getting-started-with-hugo/</link>
      <pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/hugo/getting-started-with-hugo/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;&#xA;&lt;p&gt;It&amp;rsquo;s remarkably easy to start using Hugo. So much so it makes me want to start working on my portfolio immediately.&lt;/p&gt;&#xA;&lt;p&gt;To start, we need to use &lt;a href=&#34;https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4&#34;&gt;PowerShell&lt;/a&gt; instead of Windows PowerShell. Apparently, they are different.&lt;/p&gt;&#xA;&lt;p&gt;You also need to have Git installed.&lt;/p&gt;&#xA;&lt;p&gt;Once both are done, you can run the following commands:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;hugo new site quicksite&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This creates a new directory that will become our new website. &lt;code&gt;quicksite&lt;/code&gt; is the name of your directory.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cd quicksite&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Change directory to our new website&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Initialize a new git repository&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;git submodule add https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Adds a new submodule, for a theme called Hello Friend, cloning the GitHub page into a new directory called &lt;code&gt;themes&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;echo &amp;quot;theme = &#39;hello-friend-ng&#39;&amp;quot; &amp;gt;&amp;gt; hugo.toml&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Appends the phrase &lt;code&gt;theme = &#39;hello-friend-ng&#39;&lt;/code&gt; into the &lt;code&gt;hugo.toml&lt;/code&gt; file, which allows for the theme to be applied.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;hugo server&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Starts running the server for our new website!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We can set up our content, or the pages for our site, by creating it directly on the command line.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-2/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;getting-sorted&#34;&gt;Getting Sorted&lt;/h2&gt;&#xA;&lt;p&gt;This chapter is meant to familiarize yourself with the framework used throughout the book.&lt;/p&gt;&#xA;&lt;h2 id=&#34;21-insertion-sort&#34;&gt;2.1 Insertion Sort&lt;/h2&gt;&#xA;&lt;p&gt;Solves a sorting problem (obviously).&lt;/p&gt;&#xA;&lt;p&gt;The numbers to be sorted are known as &lt;em&gt;keys&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The input comes in the form of an array with &lt;code&gt;n&lt;/code&gt; elements.&lt;/p&gt;&#xA;&lt;p&gt;A reason to sort is often because those keys are associated with other data, &lt;em&gt;Satellite data&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Key + Satellite = &lt;em&gt;Record&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;We can think of a spreadsheet, with student records having many pieces of data. Any piece can be the key; whatever the key is, is how the record is sorted.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AP Computer Science Principles - Unit 1</title>
      <link>https://mrpointing.com/notes/computer-science/internet-and-it/khan-academy/ap-computer-science-principles---unit-1/</link>
      <pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/internet-and-it/khan-academy/ap-computer-science-principles---unit-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;unit-1-digital-information&#34;&gt;Unit 1: Digital Information&lt;/h1&gt;&#xA;&lt;p&gt;Most of this I should know, being a computer science teacher. However, outlining this should make teaching this rather boring portion easier. I want to try implementing more diagrams while I teach; I&amp;rsquo;ll be looking forward to stealing their ideas.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bits-and-bytes&#34;&gt;Bits and bytes&lt;/h2&gt;&#xA;&lt;h3 id=&#34;how-do-computers-represent-data&#34;&gt;How do computers represent data?&lt;/h3&gt;&#xA;&lt;p&gt;All computers understand is &lt;strong&gt;Binary&lt;/strong&gt;, 0&amp;rsquo;s and 1&amp;rsquo;s.&lt;/p&gt;&#xA;&lt;p&gt;The video explains the example of using one single wire to transfer electricity through it; on or off. This is the most fundamental understanding of how our computers function. This is just one single bit. Common machines use hundreds of thousands of bits to achieve their objective.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Start a Homelab for $0</title>
      <link>https://mrpointing.com/notes/computer-science/videos/how-to-start-a-homelab-for-0/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/videos/how-to-start-a-homelab-for-0/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=upC8G5yFBsA&#34;&gt;Link&lt;/a&gt; to video.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Building a Homelab is easier and more affordable than ever before.&lt;/p&gt;&#xA;&lt;p&gt;You can start homelabbing with extra tech or cloud options.&lt;/p&gt;&#xA;&lt;p&gt;Clustering, through something like Kubernetes, you can start small. One small machine, and expand as you grow. All you need is a command line and 2gb of RAM.&lt;/p&gt;&#xA;&lt;p&gt;Self hosting might need something more stable.&lt;/p&gt;&#xA;&lt;p&gt;One way to start is with an old laptop. The creator started with one with just 4gb of RAM.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How To Use @dataclass in Python</title>
      <link>https://mrpointing.com/notes/computer-science/videos/how-to-use-@dataclass-in-python/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/videos/how-to-use-@dataclass-in-python/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mVea6Mu15l8&#34;&gt;Link&lt;/a&gt; to video.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Can be faster than creating a regular class.&lt;/p&gt;&#xA;&lt;p&gt;How classes are typically written:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fruit&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name: str, calories: float):  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;calories &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calories  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;banana &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fruit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Banana&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can do the same with a &lt;code&gt;dataclass&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fruit&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name: str  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    calories: float  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;banana &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fruit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Banana&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the first example, we wouldn&amp;rsquo;t be able to print it nicely without writing a &lt;code&gt;__str__&lt;/code&gt; representation, but here, we can print out &lt;code&gt;banana&lt;/code&gt; and get &lt;code&gt;Fruit(name=&#39;Banana&#39;, calories=10)&lt;/code&gt;, which looks much nicer. You could also set &lt;code&gt;float = 10&lt;/code&gt; so that calories are set to 10 by default.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lython</title>
      <link>https://mrpointing.com/projects/lython/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/lython/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Lython is my final project for my Masters program. I based it off an idea I had of giving my students a filtered AI, which branched off into editing ChatGPT with prompt filtering. Seeing that alone was particularly easy, I looked into implementing RAG, which works kind of.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mr-pointing/Lython_GCU&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;d like to continue working on my project as an actual tool to use during class. I&amp;rsquo;d like to be able to launch it to a production server, so my students can access it during class. That way, I can cut the websites to just Lython, and the website they need to submit their assignments on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Ultimate Guide to Writing Functions</title>
      <link>https://mrpointing.com/notes/computer-science/videos/the-ultimate-guide-to-writing-functions/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/videos/the-ultimate-guide-to-writing-functions/</guid>
      <description>&lt;p&gt;Modified: July 23 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yatgY4NpZXE&#34;&gt;Link&lt;/a&gt; to video.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;tip-1-do-one-thing-and-do-it-well&#34;&gt;Tip 1: Do one thing, and do it well&lt;/h3&gt;&#xA;&lt;p&gt;A function should perform a single task.&lt;/p&gt;&#xA;&lt;p&gt;Think about the level of abstraction; the function should be on the same level of abstraction.&lt;/p&gt;&#xA;&lt;p&gt;He brings up two examples, one of a function that iterates through a collection, checking each value against a matcher to return if one exists. He says this has two levels of abstraction; the iteration, and the comparison.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Browsers HTTP and You!</title>
      <link>https://mrpointing.com/notes/computer-science/videos/browsers-http-and-you/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/videos/browsers-http-and-you/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZazQd2BCA08&amp;list=PLU-P2PlzpIf3EpWfxk-Mu_ZVJVS5Wb-_e&amp;index=36&#34;&gt;Link&lt;/a&gt; to video.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;requestresponse-cycle&#34;&gt;Request/Response Cycle&lt;/h3&gt;&#xA;&lt;p&gt;It&amp;rsquo;s like a conversation. Client and server advertise capabilities and supported formats to one another.&lt;/p&gt;&#xA;&lt;p&gt;HTTP is stateless, but the implementation will do state like things like caching. You need to see both sides of the conversation.&lt;/p&gt;&#xA;&lt;h3 id=&#34;anatomy-of-a-request&#34;&gt;Anatomy of a request&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; / &lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;localhost:8001&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Request body.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;anatomy-of-a-response&#34;&gt;Anatomy of a response&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OK&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;X-Headers&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;Here&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Response body.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;request-headers&#34;&gt;Request headers&lt;/h3&gt;&#xA;&lt;p&gt;Sent automatically&amp;hellip;when not doing Ajax&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;the-role-of-algorithms-in-computing&#34;&gt;The Role of Algorithms in Computing&lt;/h2&gt;&#xA;&lt;h2 id=&#34;11-algorithms&#34;&gt;1.1 Algorithms&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Algorithm:&lt;/strong&gt; Any well defined computational procedure that takes some value, or set of values, as &lt;em&gt;input&lt;/em&gt; and produces some value, or set of values, as &lt;em&gt;output&lt;/em&gt; in a finite amount of time.&lt;/p&gt;&#xA;&lt;p&gt;We often say algorithms help us solve computational problems.&lt;/p&gt;&#xA;&lt;p&gt;We can define a sorting algorithm like so:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; A sequence of &lt;em&gt;n&lt;/em&gt; numbers, &lt;code&gt;{a_1, a_2, ... a_n}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Templater Formatting Notes</title>
      <link>https://mrpointing.com/notes/obsidian/templater-formatting-notes/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/obsidian/templater-formatting-notes/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/DateFormatting.png&#34;  alt=&#34;DateFormatting&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/Time%20Formatting.png&#34;  alt=&#34;Time Formatting&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://silentvoid13.github.io/Templater/introduction.html&#34;&gt;Link&lt;/a&gt; to Templater Documentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>You Can Do Really Cool Things With Functions in Python</title>
      <link>https://mrpointing.com/notes/computer-science/videos/you-can-do-really-cool-things-with-functions-in-python/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/videos/you-can-do-really-cool-things-with-functions-in-python/</guid>
      <description>&lt;p&gt;Modified: July 15 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ph2HjBQuI8Y&amp;list=PLU-P2PlzpIf3EpWfxk-Mu_ZVJVS5Wb-_e&amp;index=35&#34;&gt;Link&lt;/a&gt; to video.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This video goes over some uncommon ways to use functions in Python. It uses the following code as a base:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;main.py &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; statistics  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Protocol  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; exchange &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Exchange  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TradingStrategy&lt;/span&gt;(Protocol):  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Trading strategy that decides whether to buy or sell, given a list of prices&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_buy&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_sell&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AverageTradingStrategy&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Trading strategy based on price averages.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_buy&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list_window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:]  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; statistics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(list_window)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_sell&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list_window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:]  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; statistics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(list_window)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MinMaxTradingStrategy&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Trading strategy based on price minima and maxima.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_buy&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# buy if it&amp;#39;s below $32,000  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32_000_00&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_sell&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# sell if it&amp;#39;s above $33,000  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33_000_00&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TradingBot&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Trading bot that connects to a crypto exchange and performs trades.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exchange: Exchange  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trading_strategy: TradingStrategy  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self, symbol: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        prices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_market_data(symbol)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        should_buy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trading_strategy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;should_buy(prices)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        should_sell &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trading_strategy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;should_sell(prices)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; should_buy:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buy(symbol, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; should_sell:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sell(symbol, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No action required for &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;symbol&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Creates the exchange and connects to it  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exchange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Exchange()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# create the trading strategy  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trading_strategy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AverageTradingStrategy()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# create the trading bot and run the bot once  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TradingBot(exchange, trading_strategy)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BTC/USD&amp;#39;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;exchange.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PRICE_DATA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BTC/USD&amp;#34;&lt;/span&gt;: [  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;35_842_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;34_069_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;33_871_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;34_209_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;32_917_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;33_931_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;33_370_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;34_445_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;32_901_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;33_013_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ETH/USD&amp;#34;&lt;/span&gt;: [  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_381_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_233_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_300_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_342_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_137_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_156_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_103_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_165_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_028_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_004_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExchangeConnectionError&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;):  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Custom error that is raised when an exchange connection fails.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exchange&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connected &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Connects to the exchange.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connecting to Crypto Bullshit...&amp;#34;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connected &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_connection&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Checks if the exchange is connected.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connected:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; ExchangeConnectionError(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exchange is not connected dummy.&amp;#34;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_market_data&lt;/span&gt;(self, symbol: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; list[int]:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Returns fake market price for data given a market symbol.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_connection()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; PRICE_DATA[symbol]  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buy&lt;/span&gt;(self, symbol: str, amount: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Simulate buying an amount of a given symbol at current price.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_connection()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Buying amount &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;amount&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; in market &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;symbol&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sell&lt;/span&gt;(self, symbol: str, amount: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Simulate selling an amount of a given symbol at current price.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_connection()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Selling amount &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;amount&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; in market &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;symbol&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Functions can replicate or even replace code that is heavily reliant on classes. As we see in the code above, the structure is built off of a base &lt;code&gt;TradingStrategy()&lt;/code&gt; class, and is used/reference many times.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blinker</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/blinker/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/blinker/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blinker.readthedocs.io/en/stable/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Click</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/click/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/click/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://click.palletsprojects.com/en/8.1.x/&#34;&gt;Link&lt;/a&gt; to the documentation.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Jinja</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/jinja/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/jinja/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jinja.palletsprojects.com/en/3.1.x/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>The Road</title>
      <link>https://mrpointing.com/notes/entertainment/books/the-road/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/the-road/</guid>
      <description>&lt;p&gt;Modified: July 14 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I finished The Road a few days ago and I&amp;rsquo;ve reflected fondly on the experience. Slow burn isn&amp;rsquo;t the word I&amp;rsquo;d use; perhaps a slow agonizing death. Because by the end, I was emotionally exhausted. It asks a lot of you. Sit through the gray, dim world that the story takes place in. Hope to some God the end is worth it. In my opinion, I think it was.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Werkzeug</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/werkzeug/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/werkzeug/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://werkzeug.palletsprojects.com/en/3.0.x/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;First of all, what is WSGI?&lt;/p&gt;&#xA;&lt;p&gt;Web Server Gateway Interface, a specification that describes how a web server communicates with web applications, and how web applications can be chained together to process one request.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Become a Shell Wizard in ~12 Minutes</title>
      <link>https://mrpointing.com/notes/computer-science/videos/become-a-shell-wizard-in-~12-minutes/</link>
      <pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/videos/become-a-shell-wizard-in-~12-minutes/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.y/woutube.comatch?v=IYZDIhfAUM0&amp;list=PLU-P2PlzpIf3EpWfxk-Mu_ZVJVS5Wb-_e&amp;index=22&#34;&gt;Link&lt;/a&gt; to video.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;the-basics-of-shell&#34;&gt;&lt;strong&gt;The Basics of Shell&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Shell, terminal, console, command line, all are essentially the same thing.&lt;/p&gt;&#xA;&lt;h3 id=&#34;commands&#34;&gt;&lt;strong&gt;Commands&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ls&lt;/code&gt;: lists out all items in the current (target) directory&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can pass some flags to change the output&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-latrh&lt;/code&gt; will produce long list format, all files, sorted by time, in reverse, with human readable file sizes&lt;/li&gt;&#xA;&lt;li&gt;You can also use a path as an argument, as well as a combination of both flags and path&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cd&lt;/code&gt;: change directory&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;pwd&lt;/code&gt;: shows path to current work directory&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;echo&lt;/code&gt;: lets you print some text&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cat&lt;/code&gt;: lets you print the content of a file&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;touch&lt;/code&gt;: creates a file if it doesn&amp;rsquo;t exist; changes the timestamp if it does&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cp&lt;/code&gt;: lets you copy a file or directory to a target destination&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;move&lt;/code&gt;: like copy, but moves it instead&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;rm&lt;/code&gt;: removes a file or directory&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Need to use &lt;code&gt;-r&lt;/code&gt; to delete a directory&lt;/li&gt;&#xA;&lt;li&gt;You can add &lt;code&gt;f&lt;/code&gt; to forcefully delete it&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ln&lt;/code&gt;: creates a symlink in a file to another location&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Similar to a reference object in programming&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;less&lt;/code&gt;: lets you view text content in a scrollable format&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Often more useful than &lt;code&gt;cat&lt;/code&gt;, since you can search easily&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;more&lt;/code&gt;: less than less, but more on the screen and can only go forward&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;man&lt;/code&gt;: shows the manual for the command you need&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Similar to using &lt;code&gt;--help&lt;/code&gt; after a command&lt;/li&gt;&#xA;&lt;li&gt;One documentation I&amp;rsquo;d love to go through is note taking manual pages for all these commands.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;grep&lt;/code&gt;: lets you pattern match against text content&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can install &lt;code&gt;ripgrep&lt;/code&gt; which is like &lt;code&gt;grep&lt;/code&gt;, but faster&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;find&lt;/code&gt;: finds a file or directory&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Syntax can be weird, so might be better to install &lt;code&gt;fd&lt;/code&gt;, a faster easier &lt;code&gt;find&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;sed&lt;/code&gt;: a stream editor, allowing you to make changes to an incoming stream of text&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Usually useful to find and replace text&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;awk&lt;/code&gt;: allows for programming logic&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Useful for one-liners, grabbing specific things from a file&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;sort&lt;/code&gt;: sorts text content&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;head&lt;/code&gt;: lets you see the first few lines of a file&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tail&lt;/code&gt;: lets you see the last few lines of a file&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The pipe operator, &lt;code&gt;|&lt;/code&gt;, allows you to chain commands into one another. The standard output from your first command will be fed into your second command, so on so forth.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 12</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-12/</link>
      <pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-12/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;virtual-environments-and-packages&#34;&gt;&lt;strong&gt;Virtual Environments and Packages&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;121-introduction&#34;&gt;&lt;strong&gt;12.1 Introduction&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Often, you&amp;rsquo;re going to need tools and modules that aren&amp;rsquo;t included with Python by default, or in your standard library. One Python install might not suffice for most applications.&lt;/p&gt;&#xA;&lt;p&gt;To circumnavigate this, we create &lt;em&gt;virtual environments&lt;/em&gt;, that act as self-contained directories with an installation of Python, and any number of packages.&lt;/p&gt;&#xA;&lt;h3 id=&#34;122-creating-virtual-environments&#34;&gt;&lt;strong&gt;12.2 Creating Virtual Environments&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;We can use the &lt;code&gt;venv&lt;/code&gt; module to create and manage our own virtual environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyCharm IDE Features</title>
      <link>https://mrpointing.com/notes/computer-science/python/pycharm-ide-features/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/pycharm-ide-features/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h3 id=&#34;get-acquainted-with-pycharm&#34;&gt;Get Acquainted with PyCharm&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The project view is one of the main tool windows, containing the project directory, external libraries, and scratch files. You can also open it with &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The Python interpreter is easily viewable in the status bar in the bottom right.&lt;/li&gt;&#xA;&lt;li&gt;You can run, debug, or other option on the top right of the window. You can also press &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;F10&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;We got an unexpected error in our code, featured below. We can place stop at the return statement to debug our code and see what&amp;rsquo;s wrong. After placed, use the debug option (lil green bug).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_average&lt;/span&gt;(values):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; values:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;result &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AVERAGE&amp;#34;&lt;/span&gt;, find_average([&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;There is a debug workflow lesson later on we can do.&lt;/li&gt;&#xA;&lt;li&gt;When hitting &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Enter&lt;/code&gt; on something, that&amp;rsquo;s called performing a quick fix. You can quick fix formatting issues, and even functions to add intentions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Intentions are specifiers added to functions to define what type of return object is expected.&lt;/strong&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Ex. &lt;code&gt;def sum_list(num_list: list) -&amp;gt; list:&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Shift twice on anything will open the Search Everywhere dialog, where you can do things with the selected text like case it or something else.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;editor-basics&#34;&gt;Editor Basics&lt;/h2&gt;&#xA;&lt;h3 id=&#34;context-actions&#34;&gt;Context Actions&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Enter&lt;/code&gt; invokes the Show Context Actions.&lt;/li&gt;&#xA;&lt;li&gt;We can do things like remove redundant parameters, or change the format to professional standard.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;search-for-actions&#34;&gt;Search for actions&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; will Find Action.&lt;/li&gt;&#xA;&lt;li&gt;Same action as double &lt;code&gt;Shift&lt;/code&gt;. You can search for &amp;lsquo;about&amp;rsquo; to find out info on PyCharm.&lt;/li&gt;&#xA;&lt;li&gt;We can even edit IDE settings, like line number visibility.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;expand-and-shrink-the-code-selection&#34;&gt;Expand and shrink the code selection&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;W&lt;/code&gt; to select the word under the caret, and you can continue to press it to move outwards to the entire call.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;W&lt;/code&gt; will work the other way around, shrinking down to a single word.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;comment-line&#34;&gt;Comment Line&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Comment any line using &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Slash&lt;/code&gt;. You can uncomment using the same command.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;duplicate-and-delete-lines&#34;&gt;Duplicate and Delete Lines&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Press &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;D&lt;/code&gt; wherever your caret is to duplicate it to another line below it. You can also duplicate multiple lines at the same time.&lt;/li&gt;&#xA;&lt;li&gt;You can press &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Y&lt;/code&gt; to delete the current line.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;move-code-fragments&#34;&gt;Move Code Fragments&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You can move whole lines down using &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;DownArrow&lt;/code&gt;. You can move whole lines up using &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;UpArrow&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;You can also move whole methods down, but replacing &lt;code&gt;Alt&lt;/code&gt; with &lt;code&gt;Ctrl&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;collapse&#34;&gt;Collapse&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;We often have to collapse code quickly for the sake of readability. We can use &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Minus&lt;/code&gt; to collapse anything we are currently in.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Equals&lt;/code&gt; will expand a code region.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;Minus&lt;/code&gt; will collapse all collapsible code in the file.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;Equals&lt;/code&gt; will expand all expandable parts of the file.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;surround-and-unwrap&#34;&gt;Surround and unwrap&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You can select a piece of code, and use &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; to bring up the surround with template feature. You can choose from a few structures like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;try&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;You can unwrap using &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;Delete&lt;/code&gt;.\&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;multiple-selections&#34;&gt;Multiple selections&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Let&amp;rsquo;s say you have a bunch of &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; tags that need to be &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; tags. We can use our caret to hover over what we want, then use &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;J&lt;/code&gt; to select it.&lt;/li&gt;&#xA;&lt;li&gt;From there, we can use &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;J&lt;/code&gt; again to select the next occurrence, &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;J&lt;/code&gt; to deselect the last selected occurrence, and &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;J&lt;/code&gt; to select all occurrences of it.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;8/12/2024&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 11</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-11/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-11/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;the-standard-library---part-2&#34;&gt;&lt;strong&gt;The Standard Library - Part 2&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;7/9/2024&lt;/p&gt;&#xA;&lt;p&gt;The second part here will go over more advanced, less common modules that nevertheless, exist.&lt;/p&gt;&#xA;&lt;h3 id=&#34;111-output-formatting&#34;&gt;&lt;strong&gt;11.1 Output Formatting&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;reprlib&lt;/code&gt; is an appropriately named library containing a version of &lt;code&gt;repr()&lt;/code&gt; modified for abbreviated displays of large or deeply nested containers:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reprlib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; reprlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repr(set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;supercalafragalisticexpialidocious&amp;#39;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;,...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pprint&lt;/code&gt; is a module with more sophisticated control over printing both built-in and user defined objects. Could also be called a &amp;ldquo;pretty printer&amp;rdquo;, it will add line breaks and indentation to more clearly reveal complex data structures.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Raspberry Pi NAS</title>
      <link>https://mrpointing.com/projects/raspberry-pi-nas/</link>
      <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/raspberry-pi-nas/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gyMpI8csWis&amp;t=122s&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 10</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;a-brief-tour-of-the-standard-library&#34;&gt;&lt;strong&gt;A Brief Tour of the Standard Library&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;7/4/2024&lt;/p&gt;&#xA;&lt;h3 id=&#34;101-operating-system-interface&#34;&gt;&lt;strong&gt;10.1 Operating System Interface&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;The &lt;code&gt;os&lt;/code&gt; module provides functions for interacting with operating systems:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()     &lt;span style=&#34;color:#75715e&#34;&gt;# returns the working directory&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Python312&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/server/accesslogs&amp;#39;&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;# change working directory&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mkdir today&amp;#39;&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;# run the command mkdir in the system shell&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Never use &lt;code&gt;from os import *&lt;/code&gt;. It&amp;rsquo;s not good practice to not  do this regardless, but it will specifically keep &lt;code&gt;os.open()&lt;/code&gt; from shadowing the built-in &lt;code&gt;open()&lt;/code&gt; function which operators for opening files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Formatting Percentages</title>
      <link>https://mrpointing.com/notes/computer-science/python/formatting-percentages/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/formatting-percentages/</guid>
      <description>&lt;p&gt;Modified: July 03 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;7/3/2024&lt;/p&gt;&#xA;&lt;p&gt;Taken from &lt;a href=&#34;https://pythonmldaily.com/posts/python-show-number-as-percentage-with-format-and-f-string&#34;&gt;this&lt;/a&gt; article.&lt;/p&gt;&#xA;&lt;p&gt;Often in projects, we want to format our large &lt;code&gt;float&lt;/code&gt; types as smaller percentages.&lt;/p&gt;&#xA;&lt;p&gt;There are three main ways to do this:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Rounding and Float/String Types:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;round()&lt;/code&gt; takes two parameters: a value and a number to round too. Then, we can use a little complicated string statement.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8839133112&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; n2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round(number, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; print(n2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.886&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; print(str(n2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Format()&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Alternatively, if that seems a bit complicated, we can just &lt;code&gt;format()&lt;/code&gt; instead.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Words of Radiance</title>
      <link>https://mrpointing.com/notes/entertainment/books/words-of-radiance/</link>
      <pubDate>Tue, 02 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/words-of-radiance/</guid>
      <description>&lt;p&gt;Modified: July 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I finished Words of Radiance two days ago, and it initially got a 4 out of 5. I loved the book. I really did, and was invested from start to finish.&lt;/p&gt;&#xA;&lt;p&gt;It took me about 3 weeks (3 weeks and 3 days says Goodreads) and it really flew by. I enjoyed tackling such a huge tome of a novel.&lt;/p&gt;&#xA;&lt;p&gt;The characters were awesome, even if I felt like the interlude characters could have been longer to make them a bit more memorable. I only remember maybe one of them, and it was Lift cause they had a really cool attitude and wanted to just eat some good food.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jobany Rosario</title>
      <link>https://mrpointing.com/projects/jobany-rosario/</link>
      <pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/jobany-rosario/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;New updated Schedule:&lt;/p&gt;&#xA;&lt;p&gt;Monday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Dojo&#xA;&lt;ul&gt;&#xA;&lt;li&gt;11am - 12pm&lt;/li&gt;&#xA;&lt;li&gt;8pm - 9pm&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Wednesday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Dojo&#xA;&lt;ul&gt;&#xA;&lt;li&gt;11am - 12pm&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Clockwork&#xA;&lt;ul&gt;&#xA;&lt;li&gt;7:30pm - 8:30pm&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Tuesday/Thursday/Friday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Link to contact for privates&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 9</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-9/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-9/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;classes&#34;&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/28/2024&lt;/p&gt;&#xA;&lt;p&gt;Classes combine data storage and functionality into one package. When you make a new class, you are making a new &lt;em&gt;type&lt;/em&gt; of object. A new &lt;em&gt;instance&lt;/em&gt;, or occurrence of that type are able to be made using function call of the class.&lt;/p&gt;&#xA;&lt;p&gt;A class is made up of attributes and methods defined by the classes definition.&lt;/p&gt;&#xA;&lt;p&gt;Python classes follow closely to other Object Oriented Programming languages classes in the following ways:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flask&#39;s Quickstart</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-quickstart/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-quickstart/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://flask.palletsprojects.com/en/3.0.x/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Flask is a framework to create applications via Python. It makes web based applications rather simple.&lt;/p&gt;&#xA;&lt;p&gt;Starting from the &lt;a href=&#34;https://flask.palletsprojects.com/en/3.0.x/installation/#python-version&#34;&gt;here&lt;/a&gt;, the installation page.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;h3 id=&#34;python-version&#34;&gt;Python Version&lt;/h3&gt;&#xA;&lt;p&gt;Python version should be up to date. Flask supports 3.8 and newer.&lt;/p&gt;&#xA;&lt;h3 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h3&gt;&#xA;&lt;p&gt;The following are installed automatically when installing Flask:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/flask-notes/werkzeug/&#34;&gt;Werkzeug&lt;/a&gt; uses WSGI, the standard Python interface between applications and servers.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/flask-notes/jinja/&#34;&gt;Jinja&lt;/a&gt; is a template language that renders the pages your application serves.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://palletsprojects.com/p/markupsafe/&#34;&gt;MarkupSafe&lt;/a&gt; comes packaged with Jinja, and is used to avoid injection attacks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://palletsprojects.com/p/itsdangerous/&#34;&gt;ItsDangerous&lt;/a&gt; signs data securely to ensure integrity to protect Flask&amp;rsquo;s session cookie&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/flask-notes/click/&#34;&gt;Click&lt;/a&gt; is a framework that you use for writing command line applications. It allows the &lt;code&gt;flask&lt;/code&gt; command and custom commands&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/flask-notes/blinker/&#34;&gt;Blinker&lt;/a&gt; provides support for Signals&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;virtual-environments&#34;&gt;Virtual Environments&lt;/h3&gt;&#xA;&lt;p&gt;Flask promotes the use of a virtual environment to manage the dependencies of the project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 8</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-8/</link>
      <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-8/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;errors-and-exceptions&#34;&gt;&lt;strong&gt;Errors and Exceptions&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/22/2024&lt;/p&gt;&#xA;&lt;p&gt;There are two distinguishable types of errors: &lt;em&gt;syntax errors&lt;/em&gt; and &lt;em&gt;exceptions&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;81-syntax&#34;&gt;&lt;strong&gt;8.1 Syntax&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Syntax errors (or parsing errors) are errors involving the actual use of the language.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt; print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt; print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#f92672&#34;&gt;^^^^^&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SyntaxError&lt;/span&gt;: invalid syntax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, the &lt;code&gt;while&lt;/code&gt; statement is missing the &lt;code&gt;:&lt;/code&gt; required to use it.&lt;/p&gt;&#xA;&lt;h3 id=&#34;82-exceptions&#34;&gt;&lt;strong&gt;8.2 Exceptions&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Even if code is syntactically correct, an error may occur when attempting to execute it. When the error is thrown, the last line of the error usually has an explanation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a RESTful API</title>
      <link>https://mrpointing.com/projects/designing-a-restful-api/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/designing-a-restful-api/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Watched &lt;a href=&#34;https://www.youtube.com/watch?v=-mN3VyJuCjM&#34;&gt;this&lt;/a&gt; video to take some notes on what REST is.&lt;/p&gt;&#xA;&lt;p&gt;API: Application Programming Interface, is how to computers can communicate with each other.&lt;/p&gt;&#xA;&lt;p&gt;Client sends a Request to the server, server sends a response back to the client.&lt;/p&gt;&#xA;&lt;p&gt;REST, or Representational State Transfer, is the most popular way to communicate with these web servers.&lt;/p&gt;&#xA;&lt;p&gt;REST is actually a set of rules and standards. Any API that follows the REST rules is known as a RESTful API.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is NumPy</title>
      <link>https://mrpointing.com/notes/computer-science/python/numpy-notes/what-is-numpy/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/numpy-notes/what-is-numpy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://numpy.org/doc/stable/&#34;&gt;Link&lt;/a&gt; to documentation&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;what-is-numpy&#34;&gt;What is NumPy?&lt;/h1&gt;&#xA;&lt;p&gt;Python lists are great- easy to use, easy to understand, and perfect for quick one-and-done scenarios. However, there is a huge downside to lists. In most cases, since lists can accept any data type by default, this leaves lists open to unexpected data types you might not want around your list data.&lt;/p&gt;&#xA;&lt;p&gt;NumPy is a solution to this issue, specifically in the realm of scientific computing. It&amp;rsquo;s primary use is for it&amp;rsquo;s &lt;em&gt;multidimensional array objects&lt;/em&gt; and &lt;em&gt;assortment of fast methods for arrays&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 7</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-7/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-7/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;input-and-output&#34;&gt;&lt;strong&gt;Input and Output&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/18/2024&lt;/p&gt;&#xA;&lt;p&gt;There are three main ways to present output in Python; expression statements (not using &lt;code&gt;print()&lt;/code&gt;), using &lt;code&gt;print()&lt;/code&gt;, and using &lt;code&gt;write()&lt;/code&gt; which writes something into an existing or new file.&lt;/p&gt;&#xA;&lt;h3 id=&#34;71-fancier-output-formatting&#34;&gt;&lt;strong&gt;7.1 Fancier Output Formatting&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;At any point in the command line, I can just send out some text without any &lt;code&gt;print()&lt;/code&gt; commands and get back what I just sent in. That&amp;rsquo;s an expression statement. Not super important.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Future Projects</title>
      <link>https://mrpointing.com/projects/future-projects/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/future-projects/</guid>
      <description>&lt;p&gt;Modified: June 20 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Obsidian Related:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Integrate an AI model into Obsidian as a plug-in&lt;/li&gt;&#xA;&lt;li&gt;LLM trained on my Obsidian data&lt;/li&gt;&#xA;&lt;li&gt;Obsidian plug-in that automates a bibliography from links&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Website related:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Python script that automates adding &lt;code&gt;.md&lt;/code&gt; to Excalidraw files after Obsidian to Hugo transfer.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-6/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-6/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;modules&#34;&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/15/2024&lt;/p&gt;&#xA;&lt;p&gt;Obviously, using local instances are not viable for long time development is not realistic. This is why we write &lt;em&gt;scripts&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Python has the ability to writes scripts, or another method called modules. Definitions from modules can be imported into your instance of Python.&lt;/p&gt;&#xA;&lt;p&gt;Main is also given a definition here: the collection of variables that you have access to in a script executed at the top level and in calculator mode.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vinyl Visualizer</title>
      <link>https://mrpointing.com/projects/vinyl-visualizer/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/vinyl-visualizer/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;A passion project I&amp;rsquo;d like to make. It would be my first time using hardware and software together.&lt;/p&gt;&#xA;&lt;p&gt;To start, I&amp;rsquo;d like to grab a raspberry pi with a screen and audio in so it can display the record cover, the title, artist, and duration that updates as the song goes on.&lt;/p&gt;&#xA;&lt;p&gt;I first asked &lt;a href=&#34;https://chatgpt.com/share/ec6a257c-6e65-4364-b964-c66f437d005c&#34;&gt;ChatGPT 3.5&lt;/a&gt; for advice.&lt;/p&gt;&#xA;&lt;p&gt;I also asked &lt;a href=&#34;https://chatgpt.com/share/7c70547a-f544-4dd5-a80a-b645661ac905&#34;&gt;ChatGPT 4o&lt;/a&gt; and got a little better/pointed advice. Not much different though. It gave me advice on the script without asking.&lt;/p&gt;</description>
    </item>
    <item>
      <title>75. Sort Colors</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/75.-sort-colors/</link>
      <pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/75.-sort-colors/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; with n objects colored red, white, or blue, sort &lt;em&gt;in-place&lt;/em&gt; so that objects of the same color are adjacent. Colors are integers 0, 1, and 2 respectively.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&#xA;&lt;strong&gt;Input:&lt;/strong&gt; &lt;code&gt;nums = [2,0,2,1,1,0]&lt;/code&gt;&#xA;&lt;strong&gt;Output:&lt;/strong&gt; &lt;code&gt;[0,0,1,1,2,2]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Basically, sort them in order without using the built-in sort function.&lt;/p&gt;&#xA;&lt;p&gt;So I worked on this at work, and I got to a certain point where I was using a hash map to count the amount of times they went through, which I was able to make. However, I was having issues with sorting. I tried on my own for a while, I will try to get the code from my school LeetCode account and paste it here. Otherwise, I had a decent idea of what to do. I used ChatGPT to ask why my sorting wasn&amp;rsquo;t working, and it gave the best answer from LeetCode below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>1122. Relative Sort Array</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/1122.-relative-sort-array/</link>
      <pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/1122.-relative-sort-array/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given two arrays, &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt;, where all elements in &lt;code&gt;arr2&lt;/code&gt; are distinct, as well as all elements in &lt;code&gt;arr2&lt;/code&gt; are in &lt;code&gt;arr1&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Sort the elements of &lt;code&gt;arr1&lt;/code&gt; so that the ordering of items in &lt;code&gt;arr1&lt;/code&gt; is the same as &lt;code&gt;arr2&lt;/code&gt;. Any element not in &lt;code&gt;arr2&lt;/code&gt; should be appended in ascending/increasing order at the end of the list.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&#xA;&lt;strong&gt;Input:&lt;/strong&gt; &lt;code&gt;arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]&lt;/code&gt;&#xA;&lt;strong&gt;Output:&lt;/strong&gt; &lt;code&gt;[2,2,2,1,4,3,3,9,6,7,19]&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-5/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;data-structures&#34;&gt;&lt;strong&gt;Data Structures&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/10/2024&lt;/p&gt;&#xA;&lt;h3 id=&#34;51-more-on-lists&#34;&gt;&lt;strong&gt;5.1 More on Lists&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Methods for Lists:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;list.append(x)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Adds an item to the end of the list&lt;/li&gt;&#xA;&lt;li&gt;Equivalent to &lt;code&gt;a[len(a):] = [x]&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.extend(iterable)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Extend the list by appending all items from an iterable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.insert(i, x)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Insert an item into a given position, where &lt;code&gt;i&lt;/code&gt; is the index location and &lt;code&gt;x&lt;/code&gt; is the value&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.remove(x)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Remove the first item from the list whose value is equal to &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;ValueError&lt;/code&gt; if no such item&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.pop([i])&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Remove the item at the given position in the list, and return it. Without an index, it will remove and return the last item in the list. &lt;code&gt;IndexError&lt;/code&gt; if the list is empty or the index is out of the list range&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.clear()&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Remove all items from the list. Equivalent to &lt;code&gt;del a[:]&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.index(x[, start[, end]]&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Return zero-based index from the value &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;ValueError&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; does not exist.&lt;/li&gt;&#xA;&lt;li&gt;Parameters interpreted as slices from the list in &lt;code&gt;[]&lt;/code&gt; format&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.count(x)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Return the number of times &lt;code&gt;x&lt;/code&gt; appears in the list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.sort(*, key=None, reverse=False)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sort the items of the list in place&lt;/li&gt;&#xA;&lt;li&gt;Arguments used for sort customization&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;key&lt;/code&gt; can be set to things like &lt;code&gt;key=str.lower&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s a good &lt;a href=&#34;https://docs.python.org/3.12/howto/sorting.html#sortinghowto&#34;&gt;doc&lt;/a&gt; on sorting I want to go over later&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.reverse()&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reverse the elements of the list in place&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.copy()&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Return a copy of the list&lt;/li&gt;&#xA;&lt;li&gt;Same as &lt;code&gt;a[:]&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Atticus&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Shroomie&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Atticus&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Atticus&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Atticus&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Methods like &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt; or &lt;code&gt;sort&lt;/code&gt; modify the list and actually return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 4</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-4/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-4/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;control-flow-tools&#34;&gt;&lt;strong&gt;Control Flow Tools&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/5/2024&lt;/p&gt;&#xA;&lt;p&gt;The while loop was seen in the previous Fibonacci Sequence example.&lt;/p&gt;&#xA;&lt;h3 id=&#34;41-if-statements&#34;&gt;&lt;strong&gt;4.1 &lt;code&gt;if&lt;/code&gt; Statements&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please enter an integer: &amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Please enter an integer: &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &#x9;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &#x9;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Negative so now it&amp;#39;s zero!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &#x9;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Zero!!!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &#x9;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UNO!!!!!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &#x9;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nice B)&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Nice B)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Very basic; all you need is an if statement. Else is optional, and you can have many else if (&lt;code&gt;elif&lt;/code&gt;) statements as you desire.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI Engineer Roadmap</title>
      <link>https://mrpointing.com/notes/computer-science/ai-engineer-roadmap/</link>
      <pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/ai-engineer-roadmap/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;A resource by &lt;a href=&#34;https://youtube.com/code_basics&#34;&gt;Code Basics&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;ll see how this works. Starting in June of 2024, I plan to get myself prepared for a new career after another year of teaching. Pretty much; I want to find a job ideally that starts in the late summer of next year.&lt;/p&gt;&#xA;&lt;p&gt;Week 0 is stupid lol.&lt;/p&gt;&#xA;&lt;h2 id=&#34;week-1-and-2-62---617&#34;&gt;&lt;strong&gt;Week 1 and 2 (6/2 - 6/17)&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;I have a masters degree in this subject. I think I can handle a khan academy course and going through the entire Python documentation in two weeks. Or at least I hope I can.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Naruto</title>
      <link>https://mrpointing.com/notes/entertainment/manga/naruto/</link>
      <pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/manga/naruto/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;by Masashi Kishimoto&#xA;1999 - 2014&lt;/p&gt;&#xA;&lt;p&gt;I finished Naruto today. I really enjoyed reading it; I nearly flew through it in just over or under 3 months. I had a blast-Kishimoto&amp;rsquo;s art was really fun and emotive and kept me wanting to see just how each page would grow in more detail and impact. I think it delivered in that respect. The last 100 chapters had many great panels-none screenshot worthy in my opinion like the beginning/middle of the series but regardless a lot of fun.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Topics I&#39;m Interested In</title>
      <link>https://mrpointing.com/notes/topics-im-interested-in/</link>
      <pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/topics-im-interested-in/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;This is an all-purpose note I&amp;rsquo;ll write down important links too, as well as connect to all sorts of things I want to learn more about.&lt;/p&gt;&#xA;&lt;h2 id=&#34;general&#34;&gt;General&lt;/h2&gt;&#xA;&lt;h3 id=&#34;brazilian-jiu-jitsu&#34;&gt;Brazilian Jiu-Jitsu&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/projects/jobany-rosario/&#34;&gt;Jobany Rosario&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;wood-workingbuilding&#34;&gt;Wood working/building&lt;/h3&gt;&#xA;&lt;h2 id=&#34;computer-science&#34;&gt;Computer Science&lt;/h2&gt;&#xA;&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/projects/raspberry-pi-nas/&#34;&gt;Raspberry Pi NAS&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/projects/circuit-playground-express/&#34;&gt;Circuit Playground Express&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;serversserver-rooms&#34;&gt;Servers/server rooms&lt;/h3&gt;&#xA;&lt;h3 id=&#34;cyber-security&#34;&gt;Cyber security&lt;/h3&gt;&#xA;&lt;h3 id=&#34;encryption&#34;&gt;Encryption&lt;/h3&gt;&#xA;&lt;h3 id=&#34;algorithms&#34;&gt;Algorithms&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/&#34;&gt;Introduction to Algorithms&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;basic&#34;&gt;BASIC&lt;/h3&gt;&#xA;&lt;h3 id=&#34;compression&#34;&gt;Compression&lt;/h3&gt;&#xA;&lt;h3 id=&#34;email&#34;&gt;Email&lt;/h3&gt;&#xA;&lt;h3 id=&#34;nashome-server&#34;&gt;NAS/Home Server&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/notes/computer-science/videos/how-to-start-a-homelab-for-0/&#34;&gt;How to Start a Homelab for $0&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;extras&#34;&gt;Extras&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSfP9zRgcbHiu8rpQM0b4eXzyVCd0BOHInZG8E-QA9APRFBlxQ/viewform&#34;&gt;Link to Summer Job&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I found a pretty decent &lt;a href=&#34;https://pythonmldaily.com/&#34;&gt;resource&lt;/a&gt; on Python and Machine learning.&lt;/p&gt;</description>
    </item>
    <item>
      <title>You Are Not Expected To Understand This</title>
      <link>https://mrpointing.com/notes/entertainment/books/you-are-not-expected-to-understand-this/</link>
      <pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/entertainment/books/you-are-not-expected-to-understand-this/</guid>
      <description>&lt;p&gt;Modified: July 26 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;26 short essays on the pieces/lines of code that shaped the modern understanding of computer science.&lt;/p&gt;&#xA;&lt;p&gt;6/3/24&lt;/p&gt;&#xA;&lt;p&gt;Halfway through, I think some of the stories are interesting. Some of the articles don&amp;rsquo;t go as deep as I think they could/should; some bring up gender/race for seemingly no reason&amp;hellip;others actually delve deeper into the politics of it encouragingly.&lt;/p&gt;&#xA;&lt;p&gt;I started &lt;a href=&#34;https://mrpointing.com/notes/topics-im-interested-in/&#34;&gt;Topics I&amp;rsquo;m Interested In&lt;/a&gt; because of this book pretty much.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 1, 2, and 3</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</link>
      <pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/index.html&#34;&gt;Link to source&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;6/2/2024&lt;/p&gt;&#xA;&lt;p&gt;In order to get a better understanding of Python as a whole language, I&amp;rsquo;m going to document and take notes as I go through the tutorial. I mostly would like to improve as a programmer, and eventually get a software job at Google or something.&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;What is Python?&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Python is an easy to learn, powerful programming language. Featuring efficient high-level data structures as well as a simple but effective approach to object-oriented programming.&lt;/li&gt;&#xA;&lt;li&gt;Ideal language for scripting and rapid application development&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Description of objects and modules are in &lt;a href=&#34;https://docs.python.org/3/library/index.html#library-index&#34;&gt;The Python Standard Library&lt;/a&gt;. I&amp;rsquo;ll probably go through this another day.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
