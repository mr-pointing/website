<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on Mr. Pointing</title>
    <link>https://mrpointing.com/tags/css/</link>
    <description>Recent content in Css on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 19 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mrpointing.com/tags/css/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advanced CSS Selectors</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/advanced-css-selectors/</link>
      <pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/advanced-css-selectors/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;In some occasions, using classes, ID&amp;rsquo;s, or types are not enough. This is about those times. There are a bunch, but we&amp;rsquo;re just going to look at a few.&lt;/p&gt;&#xA;&lt;h2 id=&#34;child-and-sibling-combinators&#34;&gt;Child and Sibling Combinators&lt;/h2&gt;&#xA;&lt;p&gt;Given the following:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;child group1&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grand-child group1&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;child group2&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grand-child group2&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;child group3&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;grand-child group3&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;main&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;If we wanted to access all of the &lt;code&gt;div&lt;/code&gt; elements inside of &lt;code&gt;main&lt;/code&gt;, we can do so in a few different ways. One, would include use simply stating the element after your &lt;code&gt;main&lt;/code&gt; declaration in your style sheet:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fundamental CSS Properties</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/fundamental-css-properties/</link>
      <pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/fundamental-css-properties/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Since there are a ton of CSS properties, you don&amp;rsquo;t and shouldn&amp;rsquo;t memorize all of them. Let&amp;rsquo;s review a few of the most common and useful ones to make your websites stand out.&lt;/p&gt;&#xA;&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;&#xA;&lt;p&gt;The &lt;code&gt;background&lt;/code&gt; property is used mostly as is to set colors and styles to the background frame. However, you actually can use specific background-properties, which effect more specific elements in your background. You can go through exactly what you can do with that in &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/background&#34;&gt;this&lt;/a&gt; documentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Text Styles</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/text-styles/</link>
      <pubDate>Thu, 30 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/text-styles/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;getting-new-fonts&#34;&gt;Getting New Fonts&lt;/h2&gt;&#xA;&lt;p&gt;If you decided that you wanted to use a custom font for your website, unless the person viewing your site also has that font downloaded, it will default to the standard HTML font. To avoid this, it&amp;rsquo;s common practice to use a system font stack;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;font-family&lt;/span&gt;: system-ui, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Segoe UI&amp;#34;&lt;/span&gt;, Roboto, Helvetica, Arial, &lt;span style=&#34;color:#66d9ef&#34;&gt;sans-serif&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Apple Color Emoji&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Segoe UI Emoji&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Segoe UI Symbol&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will allow your site to have numerous back-up styles, in the off chance your user doesn&amp;rsquo;t have access to that font.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Odin Project</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/</link>
      <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/</guid>
      <description>&lt;p&gt;Notes taken during lessons on The Odin Project&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSS Units</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/css-units/</link>
      <pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/css-units/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;There are mainly two types of ways to define sizes in CSS; &lt;em&gt;absolute&lt;/em&gt; and &lt;em&gt;relative&lt;/em&gt;. Absolute units are any measurement where the size will retain the same size no matter what; regardless of the other elements on screen, and screen size. The only absolute unit that should be in use is pixels, or &lt;code&gt;px&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The other, relative, change based on a few factors. When using text, you&amp;rsquo;ll want to use &lt;code&gt;rem&lt;/code&gt; or &lt;code&gt;em&lt;/code&gt;, but most likely just &lt;code&gt;rem&lt;/code&gt;. When using &lt;code&gt;rem&lt;/code&gt; for font size, you&amp;rsquo;re setting the font size of the root element, which means as scale increases so does your text.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flexbox and Tables</title>
      <link>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/flexbox-and-tables/</link>
      <pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/front-end/the-odin-project/flexbox-and-tables/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;When progressing through the Odin Project, I went directly into the Full Stack JavaScript path, which started with &lt;a href=&#34;https://mrpointing.com/notes/computer-science/front-end/the-odin-project/svgs/&#34;&gt;SVGs&lt;/a&gt; and continues with Tables. I did see one topic I didn&amp;rsquo;t remember from the beginner path; flexboxes. My HTML is rusty, so I decided to read that article before hopping into tables. I thought why not combine them, since it was a quick read.&lt;/p&gt;&#xA;&lt;p&gt;Essentially, &lt;code&gt;flex&lt;/code&gt; is a way of organizing content on a web page so that it can be uniform and behavior is expected/controlled. Actually, &lt;em&gt;any&lt;/em&gt; element can be what we call a &lt;code&gt;flexbox&lt;/code&gt;, which holds and organizes the content, often referred too as it&amp;rsquo;s children. All you need to do is use the CSS style &lt;code&gt;display: flex;&lt;/code&gt; and you&amp;rsquo;ll have a &lt;code&gt;flexbox&lt;/code&gt;. Below is a basic example;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
