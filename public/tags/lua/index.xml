<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lua on Mr. Pointing</title>
    <link>http://localhost:1313/tags/lua/</link>
    <description>Recent content in Lua on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 19 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programming in Lua - Chapter 17</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-17/</link>
      <pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-17/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;modules-and-packages&#34;&gt;Modules and Packages&lt;/h1&gt;&#xA;&lt;p&gt;When it comes to Lua, there are generally no policies set in place. However, starting with Lua 5.1, there are policies set up for modules and packages. Programmers are open to follow these policies or define their own as they see fit. We consider a &lt;em&gt;module&lt;/em&gt; as some code in Lua or C, and can be loaded into an environment using the function &lt;code&gt;require&lt;/code&gt; that creates and returns a table. All things defined (variables, functions, etc.) are defined in the table provided.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 18</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-18/</link>
      <pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-18/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;iterators-and-the-generic-for&#34;&gt;Iterators and the Generic &lt;code&gt;for&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s learn how to make our own &lt;em&gt;Iterators&lt;/em&gt; in Lua. We&amp;rsquo;ll accomplish this by taking a look at the &lt;code&gt;for&lt;/code&gt; loop in more detail; more specifically, the &lt;strong&gt;generic&lt;/strong&gt; &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;&#xA;&lt;h2 id=&#34;iterators-and-closures&#34;&gt;Iterators and Closures&lt;/h2&gt;&#xA;&lt;p&gt;We consider an iterator to be any construction that will allow is to iterate over the elements within some collection of objects. Most commonly we use functions to accomplish this. We make calls to the function when we want the next item, and so on. We&amp;rsquo;ve seen this with &lt;code&gt;io.read&lt;/code&gt; in the past.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 16</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-16/</link>
      <pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-16/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;compilation-execution-and-errors&#34;&gt;Compilation, Execution, and Errors&lt;/h1&gt;&#xA;&lt;p&gt;Lua is an interpreted language. Regardless, Lua will always pre-compile source code to a temporary middle-form in the &lt;em&gt;compilation phase&lt;/em&gt;. This is standard practice, but feels out of place knowing that interpreted languages are known to be quick and run without any compilers. This chapter is dense and nerdy, but will explain part of the process and why Lua chooses to use that system. This chapter should probably be read on it&amp;rsquo;s own, as my notes will not be sufficient.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 14</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-14/</link>
      <pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-14/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-structures&#34;&gt;Data Structures&lt;/h1&gt;&#xA;&lt;p&gt;As we know, Lua just has tables. Within this, we can arrange tables in numerous different fashions to create whatever data structure we need. Since tables work so well, some of these aren&amp;rsquo;t entirely necessary but can be done.&lt;/p&gt;&#xA;&lt;h2 id=&#34;arrays&#34;&gt;Arrays&lt;/h2&gt;&#xA;&lt;p&gt;To accomplish the array structure, we can do something we&amp;rsquo;ve done previously; create a table with numbered indexes. Super simple to accomplish.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  a[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above creates an array with a range of 1 to 100, and any call to a field out of that range will return &lt;code&gt;nil&lt;/code&gt;. We can find the length of &lt;code&gt;a&lt;/code&gt; easily with &lt;code&gt;#a&lt;/code&gt;. A one liner version for an array type of table is accomplished with any set of numbers like so;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 15</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-15/</link>
      <pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-15/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-files-and-serialization&#34;&gt;Data Files and Serialization&lt;/h1&gt;&#xA;&lt;p&gt;Writing data is usually much cleaner than reading in data. There are many different ways in which the process can be corrupted. This calls for writing well written, error-preventative code. Problem is, that&amp;rsquo;s pretty hard. We can do one better; we can make our data easier to read in by writing it in readable formats. Lua makes this easy. We can write code that will generate our data objects for us.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 13</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-13/</link>
      <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-13/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;bits-and-bytes&#34;&gt;Bits and Bytes&lt;/h1&gt;&#xA;&lt;p&gt;Not a dense chapter, but we should recognize that Lua handles binary data very similarly to text. Let&amp;rsquo;s dive right into it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bitwise-operators&#34;&gt;Bitwise Operators&lt;/h2&gt;&#xA;&lt;p&gt;There are a few Lua operators that work only on integers and binary data; &lt;code&gt;&amp;amp;&lt;/code&gt; or AND, &lt;code&gt;|&lt;/code&gt; or OR, &lt;code&gt;~&lt;/code&gt; or BITWISE OR, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; or SHIFT RIGHT, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; or SHIFT LEFT, and &lt;code&gt;~&lt;/code&gt; which can also mean BITWISE NOT.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string.format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xabcd&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; cd&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string.format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xabcd&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; abff&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unsigned-integers&#34;&gt;Unsigned Integers&lt;/h2&gt;&#xA;&lt;p&gt;Essentially, unsigned integers are any numbers that can only represent non-negative values. By default, Lua does not support them, but there are workarounds that can help implement them in necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 12</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-12/</link>
      <pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;date-and-time&#34;&gt;Date and Time&lt;/h1&gt;&#xA;&lt;p&gt;Not Lua&amp;rsquo;s strong-suit, but there are ways to retrieve and filter on date and time. Although, the system is quite weird.&lt;/p&gt;&#xA;&lt;p&gt;Lua officially has two ways of representing date and time. First is a single number, known as the number of seconds from the &lt;em&gt;epoch&lt;/em&gt;, or some fixed date. POSIX and Windows use the date January 1st, 1970, 0:00 UTC.&lt;/p&gt;&#xA;&lt;p&gt;The second is through a table that&amp;rsquo;s a lot more human readable. &lt;em&gt;Date tables&lt;/em&gt; have fields for &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sec&lt;/code&gt;, &lt;code&gt;wday&lt;/code&gt;, &lt;code&gt;yday&lt;/code&gt;, and &lt;code&gt;isdst&lt;/code&gt;. All are integers save for &lt;code&gt;isdst&lt;/code&gt;, which is a Boolean for daylight savings. There is no time zone set.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lua-isms</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/lua-isms/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/lua-isms/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Lua-isms&lt;/p&gt;</description>
    </item>
    <item>
      <title>Real Programming</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Real Programming&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 10</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-10/</link>
      <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;pattern-matching&#34;&gt;Pattern Matching&lt;/h1&gt;&#xA;&lt;p&gt;Due to Lua&amp;rsquo;s goal of maintaining a lite and quick language, it relies on it&amp;rsquo;s own method of pattern matching rather than POSIX regex or even Perl regex.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pattern-matching-functions&#34;&gt;Pattern Matching Functions&lt;/h2&gt;&#xA;&lt;p&gt;There are four pattern matching functions within Lua&amp;rsquo;s standard string library. We&amp;rsquo;ve actually already seen two of them, &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;gsub&lt;/code&gt;. We will cover those in slightly more detail, as well as the other two, &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;gmatch&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 9</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-9/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;closures&#34;&gt;Closures&lt;/h1&gt;&#xA;&lt;p&gt;The first advanced topic, more of a clarification, let&amp;rsquo;s discuss the true nature of functions and how they&amp;rsquo;re treated in Lua.&lt;/p&gt;&#xA;&lt;p&gt;Any function inside Lua is a &lt;em&gt;first-class value&lt;/em&gt;, meaning they are treated with similar properties as strings and numbers. This implies that not only can we store functions inside of variables, but we can also pass functions as arguments.&lt;/p&gt;&#xA;&lt;p&gt;Another concept that gives Lua additional flexibility is &lt;em&gt;lexical scoping&lt;/em&gt;, meaning nested functions have automatic access to variables in their enclosing function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 8</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-8/</link>
      <pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;filling-in-some-gaps&#34;&gt;Filling in Some Gaps&lt;/h1&gt;&#xA;&lt;p&gt;A quick send off chapter for the basics of Lua. Let&amp;rsquo;s review some key components that are necessary, but maybe doesn&amp;rsquo;t need an entire chapter.&lt;/p&gt;&#xA;&lt;h2 id=&#34;local-variables-and-blocks&#34;&gt;Local Variables and Blocks&lt;/h2&gt;&#xA;&lt;p&gt;Quite simply, Lua makes all variables global by default. To specify a local variable, you have to call it with &lt;code&gt;local&lt;/code&gt; in front. Local variables only have a scope inside the block it was declared in.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s considered a good programming habit to use local variables when possible. It allows for less confusion with existing global variables, it&amp;rsquo;s cleaner, and also faster as access to local variables is faster than global variables.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 7</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-7/</link>
      <pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-external-world&#34;&gt;The External World&lt;/h1&gt;&#xA;&lt;p&gt;Lua is not the language for powerful performance with the exterior world. Even the text admits that most use of Input and Output are done through the host application or external libraries. Lua can handle basic file manipulation, which we&amp;rsquo;ll review now.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-simple-io-model&#34;&gt;The Simple I/O Model&lt;/h2&gt;&#xA;&lt;p&gt;Lua assumes the use of two streams, the &lt;em&gt;current input stream&lt;/em&gt; and the &lt;em&gt;current output stream&lt;/em&gt;. Using C terminology, the current input is default &lt;code&gt;stdin&lt;/code&gt; while output is &lt;code&gt;stdout&lt;/code&gt;. We can route either using &lt;code&gt;io.input&lt;/code&gt; and &lt;code&gt;io.output&lt;/code&gt;, respectively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-6/</link>
      <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;functions&#34;&gt;Functions&lt;/h1&gt;&#xA;&lt;p&gt;Functions in Lua are the main method of abstracting out commands. We&amp;rsquo;ve been using functions the entire time. Like most other languages, we can accomplish direct tasks or solve complicated problems with repeatable calls.&lt;/p&gt;&#xA;&lt;p&gt;When calling functions, we use parenthesis, even when there are no parameters. The only time we can leave parenthesis out is when the argument is a literal string or a table constructor.&lt;/p&gt;&#xA;&lt;p&gt;A fun addition of Lua is the colon operator, which supports method like calling;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 5</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-5/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;tables&#34;&gt;Tables&lt;/h1&gt;&#xA;&lt;p&gt;Funnily enough, &lt;em&gt;tables&lt;/em&gt; are the only data structure natively in Lua. Tables can be used to represent basic arrays, sets, records, and others. We&amp;rsquo;ll see some of these created this chapter.&lt;/p&gt;&#xA;&lt;p&gt;By default, a table acts like a Python dictionary, or an associative array. They can contain any number or string value, &lt;strong&gt;except for nil&lt;/strong&gt;. The tables themselves are considered objects. Programs only manipulate references to a table; Lua will never create a hidden copy of your table.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 4</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-4/</link>
      <pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;strings&#34;&gt;Strings&lt;/h1&gt;&#xA;&lt;p&gt;A string is basically a representation of some text. They can be tiny, or huge, depending on how you&amp;rsquo;d like. We consider strings as a sequence of bytes, which we can go into more detail on later. For now, just know we can store any binary data as a string, or even Unicode representation.&lt;/p&gt;&#xA;&lt;p&gt;Any string we make in Lua is immutable, so we can&amp;rsquo;t alter it once it&amp;rsquo;s made. Any alterations would have to be made to an entirely new string. Not only that, but Lua also has &lt;em&gt;automatic memory management&lt;/em&gt;, so we don&amp;rsquo;t have to concern ourselves with allocation and deallocation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 3</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-3/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;numbers&#34;&gt;Numbers&lt;/h1&gt;&#xA;&lt;p&gt;Up until recently, all numbers in Lua were floating point numbers. Now, Lua past version 5.3, has two representations for numbers; 64-bit &lt;em&gt;integers&lt;/em&gt; and double-precision floating points, just &lt;em&gt;floats&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The Lua interpreter will allow the input of numbers in whatever format you want, and return it that way (unless specified not too).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 0.4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4.57e-3&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 0.00457&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3e12&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 300000000000.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5E+20&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 5e+20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you call &lt;code&gt;type()&lt;/code&gt; on any number, it will always return as a &lt;code&gt;number&lt;/code&gt; type. If you wanted to ensure you have an integer or float, you would have to specify it as a math type using &lt;code&gt;math.type()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 2</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-2/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-eight-queens-problem&#34;&gt;The Eight Queens Problem&lt;/h1&gt;&#xA;&lt;p&gt;Not a whole lot going on in this chapter, but they present a fun example of Lua&amp;rsquo;s capabilities. Walking through this code is worthwhile; I recommend giving it a read first, trying it out yourself, and changing some things around to get some different outcomes.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;-- board size&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- check whether position (n,c) is free from attacks&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isplaceok&lt;/span&gt; (a, n, c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- for each queen already placed...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- same column?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;   (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; n) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- same diagonal?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;   (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n) &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- other diagonal?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- place can be attacked&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;-- print a board&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printsolution&lt;/span&gt; (a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- for each row&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- and for each column&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;-- write &amp;#34;X&amp;#34; or &amp;#34;-&amp;#34; plus a space&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      io.write(a[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  io.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- add to board &amp;#39;a&amp;#39; all queens from &amp;#39;n&amp;#39; to &amp;#39;N&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addqueen&lt;/span&gt; (a, n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- checks for all queens being placed&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printsolution(a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isplaceok(a, n, c) &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;    a[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;addqueen(a,n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- run the program&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addqueen({}, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exercises&#34;&gt;Exercises&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Modify the program so that it stops after printing the first solution&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;For me, I just put &lt;code&gt;os.exit()&lt;/code&gt; after the first call for &lt;code&gt;printsolution()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;fourth-edition&#34;&gt;Fourth Edition&lt;/h2&gt;&#xA;&lt;h3 id=&#34;by-roberto-ierusalimschy&#34;&gt;By Roberto Ierusalimschy&lt;/h3&gt;&#xA;&lt;p&gt;Lua was initially designed to be integrated with software written in C/C++. It&amp;rsquo;s a small yet powerful language, and achieves this by not trying to do what C already does; perform well. Lua offers dynamic structures, zero redundancies, and a simpler time testing and debugging code.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s an &lt;em&gt;extensible&lt;/em&gt; language; things like dynamic typing, automatic memory management, and first-class functions make Lua a good pick for small to even medium/large projects. It can be sometimes known as a &lt;strong&gt;glue&lt;/strong&gt; language; not only holding things together, but also adapting and reshaping them in certain cases.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 1</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h1&gt;&#xA;&lt;p&gt;Just like any other language, standard output is a great first step. To do so on a windows machine, you have to download Lua much like you do Python, and run it via the command line. The fastest way I did this was through a command line installer &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;, and installed it with &lt;code&gt;scoop install lua&lt;/code&gt;. Then just use &lt;code&gt;lua&lt;/code&gt; to run your environment.&lt;/p&gt;&#xA;&lt;p&gt;A simple &lt;code&gt;print()&lt;/code&gt; will put anything on the screen:&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Basics</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;The Basics&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
