<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arrays on Mr. Pointing</title>
    <link>https://mrpointing.com/tags/arrays/</link>
    <description>Recent content in Arrays on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 18 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mrpointing.com/tags/arrays/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>13. Roman to Integer</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/13.-roman-to-integer/</link>
      <pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/13.-roman-to-integer/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Roman numerals are represented by seven different symbols: &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Symbol&lt;/strong&gt;       &lt;strong&gt;Value&lt;/strong&gt;&#xA;I             1&#xA;V             5&#xA;X             10&#xA;L             50&#xA;C             100&#xA;D             500&#xA;M             1000&lt;/p&gt;&#xA;&lt;p&gt;For example, &lt;code&gt;2&lt;/code&gt; is written as &lt;code&gt;II&lt;/code&gt; in Roman numeral, just two ones added together. &lt;code&gt;12&lt;/code&gt; is written as &lt;code&gt;XII&lt;/code&gt;, which is simply &lt;code&gt;X + II&lt;/code&gt;. The number &lt;code&gt;27&lt;/code&gt; is written as &lt;code&gt;XXVII&lt;/code&gt;, which is &lt;code&gt;XX + V + II&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Products of Array Not Including Self</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/products-of-array-not-including-self/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/products-of-array-not-including-self/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given an integer array &lt;code&gt;nums&lt;/code&gt;, return an array &lt;code&gt;output&lt;/code&gt; where &lt;code&gt;output[i]&lt;/code&gt; is the product of all the elements of &lt;code&gt;nums&lt;/code&gt; except &lt;code&gt;nums[i]&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; I originally thought I had an awesome solution, but it only passed with the first test case that didn&amp;rsquo;t have zeros:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;productExceptSelf&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(nums):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            total &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; nums[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(int(total&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;num))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(total)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My issue began when there were 0&amp;rsquo;s to worry about. I spent a decent amount of time on this so I just decided to look at the answer below and I&amp;rsquo;ll dissect it after:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contains Duplicate</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/contains-duplicate/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/contains-duplicate/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given an integer array &lt;code&gt;nums&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; if any value appears &lt;strong&gt;more than once&lt;/strong&gt; in the array, otherwise return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; We can create a secondary list that we can start to throw the values from our array &lt;code&gt;nums&lt;/code&gt; into, and check to see if they already exist in the list or not. As soon as we enter a number that already exists in our list, it will return &lt;code&gt;True&lt;/code&gt; and end. If it goes through the entire &lt;code&gt;nums&lt;/code&gt; array without breaking, our list has no duplicates, and we can return &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Two Integer Sum</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/two-integer-sum/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/two-integer-sum/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given an array of integers &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;target&lt;/code&gt;, return the indices &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; such that &lt;code&gt;nums[i] + nums[j] == target&lt;/code&gt; and &lt;code&gt;i != j&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;You may assume that &lt;em&gt;every&lt;/em&gt; input has exactly one pair of indices &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; that satisfy the condition.&lt;/p&gt;&#xA;&lt;p&gt;Return the answer with the smaller index first.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; We can use a two pointer approach with &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;. First, we set up a for loop that will iterate &lt;code&gt;j&lt;/code&gt; from the length of the array to the first position. Then we can use &lt;code&gt;i&lt;/code&gt; to move through the array forwards. We use a nested while loop with a conditional statement that says if the combination of position &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are equal to target, return those positions in &lt;code&gt;[i, j]&lt;/code&gt; format.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1122. Relative Sort Array</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/1122.-relative-sort-array/</link>
      <pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/1122.-relative-sort-array/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given two arrays, &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt;, where all elements in &lt;code&gt;arr2&lt;/code&gt; are distinct, as well as all elements in &lt;code&gt;arr2&lt;/code&gt; are in &lt;code&gt;arr1&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Sort the elements of &lt;code&gt;arr1&lt;/code&gt; so that the ordering of items in &lt;code&gt;arr1&lt;/code&gt; is the same as &lt;code&gt;arr2&lt;/code&gt;. Any element not in &lt;code&gt;arr2&lt;/code&gt; should be appended in ascending/increasing order at the end of the list.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&#xA;&lt;strong&gt;Input:&lt;/strong&gt; &lt;code&gt;arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]&lt;/code&gt;&#xA;&lt;strong&gt;Output:&lt;/strong&gt; &lt;code&gt;[2,2,2,1,4,3,3,9,6,7,19]&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
