<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on Mr. Pointing</title>
    <link>http://localhost:1313/tags/sql/</link>
    <description>Recent content in SQL on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 15 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQLBolt - Lesson 16</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-16/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-16/</guid>
      <description>Creating Tables One of the hardest things to do in data science (at least, to me) is pick up another person&amp;rsquo;s collected data. It will often take a few minutes of &amp;ldquo;getting calibrated&amp;rdquo; to understand the rows from simple things like understanding naming conventions (some are really bad) to more complex things like what story the data is telling.&#xA;The more complicated problems will end up needing some visualization tools which is something we&amp;rsquo;ll look at later, so for now let&amp;rsquo;s not think too big.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 17 &amp; 18</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-17--18/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-17--18/</guid>
      <description>Altering Tables If you need to include additional information not provided by the original tables creation statement, you can use an ALTER TABLE statement to manipulate and create columns.&#xA;Adding Columns Extremely similar to how we add in new rows, adding in a new column uses the following syntax:&#xA;ALTER TABLE mytable ADD column DataType OptionalTableConstraint DEFAULT default_value; We specify a table we want to add into, provide the column&amp;rsquo;s name and datatype, and we have the option for a table constraint and default value if needed.</description>
    </item>
    <item>
      <title>SQLite Tutorial</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlite-tutorial/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlite-tutorial/</guid>
      <description>What is a Database? Essentially, a database is a place in which your data and tables exists, organized in a way described by the database schema.&#xA;There are many database platforms that use SQL as their main language; MySQL, NoSQL, Microsoft SQL Server, just to name a few. The one we&amp;rsquo;re going to work with due to it&amp;rsquo;s ease of use and lightweight installation is SQLite (appropriately named).&#xA;Creating Our First Database Connection We can actually use SQLite directly inside of PyCharm, our IDE.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 13</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-13/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-13/</guid>
      <description>Inserting Rows When we first started going over SQL databases, we just understood them as basic tables with columns of properties and rows of instances. The next step up is the Database Schema, which describes all tables in a database and the datatypes those rows can contain.&#xA;Because each row has defined types that are allowed, it keeps the database cleaner and easier to navigate.&#xA;Our first non-SELECT statement, we can start to insert data into our tables using the INSERT statement:</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 14 &amp; 15</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-14--15/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-14--15/</guid>
      <description>Updating Rows If we can SELECT rows, and INSERT data into rows, we can most certainly UPDATE them as well.&#xA;UPDATE works similarly to INSERT, and needs a WHERE clause to specify which rows should be updated:&#xA;UPDATE mytable SET column = value_or_expression other_column = value_or_expression ... WHERE condition; Obviously, like INSERT, the values or expressions returned should match the data type of the expected column/property.&#xA;A helpful tip is to always try a SELECT statement out first to make sure you are grabbing all the rows you think you want before you make any changes.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 10 &amp; 11</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-10--11/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-10--11/</guid>
      <description>Queries with Aggregates Aggregates are analogous with built-in functions. They&amp;rsquo;re helpful pieces of code we can use to make writing our queries easier. The syntax is as follows:&#xA;SELECT AGG_FUNC(column_or_expression) AS agg_description FROM mytable WHERE constraint_expression; With the previous syntax, we would use said function over all rows and return a single result. Here are some functions we&amp;rsquo;ll use:&#xA;COUNT(column or *): returns the number of rows if no columns specified, otherwise returns number of non-NULL values in chosen column MIN(column): returns smallest numerical value for all rows in group MAX(column): returns largest numerical value for all rows in group AVG(column): returns average numerical value for all rows in group SUM(column): returns sum of all numerical values for all rows in the group There&amp;rsquo;s another concept we should look at called grouped aggregate functions, which instead of returning values for all rows, allows you to return multiple values based upon a specified delimiter or group.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 12</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-12/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-12/</guid>
      <description>Order of Execution The order of execution within queries is important to understand. When getting unexpected output one of the first things you should check is your syntax and be sure you 100% know what you&amp;rsquo;re saying/what you expect to get back. If you aren&amp;rsquo;t writing complete or correct sentences, you&amp;rsquo;ll never get correct responses.&#xA;The following syntax is the complete structure for a query and is executed sequentially (one after the other):</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 9</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-9/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-9/</guid>
      <description>Queries with Expressions Now that we understand the basics of querying, we can really start to dive deeper by building more complex statements as expressions. These expressions can be mathematical or even basic string functions.&#xA;When writing expressions, we should use the AS keyword to create an alias for our expression, which makes our statements easier to read. This can be used on columns or tables.&#xA;The following statement is a great example of an expression:</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 7</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-7/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-7/</guid>
      <description>Outer Joins vs. Inner Joins Any table from an INNER JOIN will only contain information that belongs in BOTH tables. These can be limiting, which is where LEFT, RIGHT, and FULL JOIN&amp;rsquo;s come into the picture.&#xA;Our syntax for a standard expression doesn&amp;rsquo;t change, only get&amp;rsquo;s different options for our JOIN keyword.&#xA;SELECT column, another_table_column, ... FROM mytable INNER/LEFT/RIGHT/FULL JOIN another_table ON mytable.id = another_table.id WHERE condition(s) ORDER BY column, .</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 8</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-8/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-8/</guid>
      <description>NULL Values Unfortunately, working with data is an easy way to see that we don&amp;rsquo;t live in a perfect world. There are more than a few instances of there not being any data available to display, which can cause all sorts of issues with our queries. These values are what we call NULLS*, and can differ depending on your situation.&#xA;Most often at the start, we can leave them as NULL.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 4</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-4/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-4/</guid>
      <description>Filtering and Sorting Results One way to ensure we don&amp;rsquo;t get duplicate rows, we could use the DISTINCT keyword;&#xA;SELECT DISTINCT column, another_column, ... FROM mytable WHERE condition(s); This however is pretty indiscriminate, and we&amp;rsquo;ll look at how to specify duplicates with GROUP BY later.&#xA;Often in the real world, our data is not going to be ordered nice and neatly. Quite often, data is inserted without rhyme or reason, and purely based off when some events happened and collected rather than compared to the rest of the data in the data set.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 6</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-6/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-6/</guid>
      <description>Multi-table Queries with JOINs Unlike the database we&amp;rsquo;ve been using for most of these lessons, real world data is usually divided into different tables, often through a process we call normalization. Normalization is the procedure used to break down large tables into smaller more organic tables. This reduces duplicate data, and allows for a more natural growth of data within respective tables.&#xA;Due to our data being broken up, our queries will in turn have to become more complex to grab information over multiple tables.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 2</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-2--3/</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-2--3/</guid>
      <description>Specifying Data to Select (Constraints) When our table has only a few rows, a select * query isn&amp;rsquo;t so bad. However, if we have hundreds, sometimes thousands of rows of data, retrieving all of them at once becomes an issue.&#xA;That reason is why we have the ability to specify our results with conditional statements:&#xA;SELECT column, another_column, ... FROM mytable WHERE condition AND/OR another_condition AND/OR ...; We can collect more complex results from building more complex queries.</description>
    </item>
    <item>
      <title>SQLBolt - Introduction</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---introduction/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---introduction/</guid>
      <description>Link to lessons.&#xA;Introduction to SQL What is SQL? Structured Query Language is a language used to create, maintain, and use relational databases. Thousands of applications from simple projects to Microsoft products use SQL through various formats and configurations.&#xA;Some use SQLite, MySQL, Postgres, Oracle, or Microsoft SQL, to name a few. Each use SQL as base, and include features that garner appeal from different developers.&#xA;Relational Databases A relational database is a collection of 2D tables that are linked through some key value.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 1</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-1/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-1/</guid>
      <description>When we want to get information for a SQL table, we use the SELECT statement, or a query. Within a query is what data we want, where to get it from, and any additional formatting we want done before we get said data.&#xA;When selecting information from a table, we have to understand the make-up of a table. Let&amp;rsquo;s say we have a reptiles table. There might be different types of reptiles (snakes, lizards, turtles, crocodiles) but each reptile has characteristics that make it unique.</description>
    </item>
  </channel>
</rss>
