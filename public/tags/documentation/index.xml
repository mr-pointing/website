<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation on Mr. Pointing</title>
    <link>http://localhost:1313/tags/documentation/</link>
    <description>Recent content in Documentation on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 30 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/documentation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NumPy Quickstart</title>
      <link>http://localhost:1313/notes/computer-science/python/numpy-notes/numpy-quickstart/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/numpy-notes/numpy-quickstart/</guid>
      <description>Link to documentation.&#xA;Prerequisites What should you know to get the most out of this lesson? At the very least, the fundamentals of Python. You should also refer to this to get a fundamental understanding of the reasons why we&amp;rsquo;d want to use ndarray in the first place.&#xA;What are we doing this lesson then? We&amp;rsquo;re going to learn about what one, two, and $n$ dimensional arrays actually are, some algebra operations on ndarray objects without for loops, and even more advanced things like what axis and shape properties are.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 4</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-4/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-4/</guid>
      <description>Filtering and Sorting Results One way to ensure we don&amp;rsquo;t get duplicate rows, we could use the DISTINCT keyword;&#xA;SELECT DISTINCT column, another_column, ... FROM mytable WHERE condition(s); This however is pretty indiscriminate, and we&amp;rsquo;ll look at how to specify duplicates with GROUP BY later.&#xA;Often in the real world, our data is not going to be ordered nice and neatly. Quite often, data is inserted without rhyme or reason, and purely based off when some events happened and collected rather than compared to the rest of the data in the data set.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 6</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-6/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-6/</guid>
      <description>Multi-table Queries with JOINs Unlike the database we&amp;rsquo;ve been using for most of these lessons, real world data is usually divided into different tables, often through a process we call normalization. Normalization is the procedure used to break down large tables into smaller more organic tables. This reduces duplicate data, and allows for a more natural growth of data within respective tables.&#xA;Due to our data being broken up, our queries will in turn have to become more complex to grab information over multiple tables.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 2</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-2--3/</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-2--3/</guid>
      <description>Specifying Data to Select (Constraints) When our table has only a few rows, a select * query isn&amp;rsquo;t so bad. However, if we have hundreds, sometimes thousands of rows of data, retrieving all of them at once becomes an issue.&#xA;That reason is why we have the ability to specify our results with conditional statements:&#xA;SELECT column, another_column, ... FROM mytable WHERE condition AND/OR another_condition AND/OR ...; We can collect more complex results from building more complex queries.</description>
    </item>
    <item>
      <title>SQLBolt - Introduction</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---introduction/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---introduction/</guid>
      <description>Link to lessons.&#xA;Introduction to SQL What is SQL? Structured Query Language is a language used to create, maintain, and use relational databases. Thousands of applications from simple projects to Microsoft products use SQL through various formats and configurations.&#xA;Some use SQLite, MySQL, Postgres, Oracle, or Microsoft SQL, to name a few. Each use SQL as base, and include features that garner appeal from different developers.&#xA;Relational Databases A relational database is a collection of 2D tables that are linked through some key value.</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 1</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-1/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-1/</guid>
      <description>When we want to get information for a SQL table, we use the SELECT statement, or a query. Within a query is what data we want, where to get it from, and any additional formatting we want done before we get said data.&#xA;When selecting information from a table, we have to understand the make-up of a table. Let&amp;rsquo;s say we have a reptiles table. There might be different types of reptiles (snakes, lizards, turtles, crocodiles) but each reptile has characteristics that make it unique.</description>
    </item>
    <item>
      <title>Obsidian Help - Plugins</title>
      <link>http://localhost:1313/notes/obsidian/obsidian-help/obsidian-help---plugins/</link>
      <pubDate>Tue, 10 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/obsidian/obsidian-help/obsidian-help---plugins/</guid>
      <description>Core Plugins Out of the box, Obsidian has a plethora of usable features. Most you might never touch. Others will be ingrained in your workflow you&amp;rsquo;ll forget they&amp;rsquo;re plugins. This list is not extensive- like everything else, more detailed information can be found in their documentation.&#xA;Outgoing and Backlinks We already saw how powerful linking can be using Obsidian. Let&amp;rsquo;s define two specific types of links; outgoing links and backlinks.</description>
    </item>
    <item>
      <title>Obsidian Help - Editing and Formatting</title>
      <link>http://localhost:1313/notes/obsidian/obsidian-help/obsidian-help---editing-and-formatting/</link>
      <pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/obsidian/obsidian-help/obsidian-help---editing-and-formatting/</guid>
      <description>Editing and Formatting Congratulations, after this year you&amp;rsquo;ll technically know two languages! Markdown, what we&amp;rsquo;re writing in, isn&amp;rsquo;t technically a programming language, but it is a useful format to understand and be able to read, just in case something isn&amp;rsquo;t rendered or just browsing files.&#xA;Basic Formatting Syntax A paragraph is just a block of text, separated by a newline. The paragraph for a literal example:&#xA;This is a paragraph.</description>
    </item>
    <item>
      <title>Obsidian Help - User Interface</title>
      <link>http://localhost:1313/notes/obsidian/obsidian-help/obsidian-help---user-interface/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/obsidian/obsidian-help/obsidian-help---user-interface/</guid>
      <description>User Interface A user interface, otherwise referred to as a UI, is the visual parts of a program you interact with when using it. For Obsidian, the UI is the entire window. Let&amp;rsquo;s break it down piece by piece.&#xA;Appearance Before we go any further, we should go over the fun part. Making it your own. If your left bar isn&amp;rsquo;t already open, hit the button on the top left (it&amp;rsquo;s a little square with lines in it).</description>
    </item>
    <item>
      <title>Obsidian Help - Getting Started</title>
      <link>http://localhost:1313/notes/obsidian/obsidian-help/obsidian-help---getting-started/</link>
      <pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/obsidian/obsidian-help/obsidian-help---getting-started/</guid>
      <description>Getting Started If you don&amp;rsquo;t know where to start, start here.&#xA;Downloading and Installing For the most part, you&amp;rsquo;ll have access to the computers at school all year long, so you can always get Obsidian through there. If however you want to get Obsidian going at home, look no further.&#xA;Install on Windows Click the link, then Universal and follow instructions.&#xA;Install on Mac Click the link, then Universal and follow instructions.</description>
    </item>
    <item>
      <title>Obsidian Help - Preface</title>
      <link>http://localhost:1313/notes/obsidian/obsidian-help/obsidian-help---preface/</link>
      <pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/obsidian/obsidian-help/obsidian-help---preface/</guid>
      <description>Link to Documentation.&#xA;What is Obsidian? Essentially, a note-taking tool. All it boils down too is the format in which your notes are placed (I just think Obsidian is neat). Obsidian uses a Markdown, a markup-language. Not really a programming language, more of an encoding language, but we don&amp;rsquo;t need to worry about that for right now.&#xA;For now, all we are going to focus on is the basics-you have something you want to take notes on, and you write down your notes inside.</description>
    </item>
    <item>
      <title>Getting Started with Hugo</title>
      <link>http://localhost:1313/notes/computer-science/hugo/getting-started-with-hugo/</link>
      <pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/hugo/getting-started-with-hugo/</guid>
      <description>Quick Start It&amp;rsquo;s remarkably easy to start using Hugo. So much so it makes me want to start working on my portfolio immediately.&#xA;To start, we need to use PowerShell instead of Windows PowerShell. Apparently, they are different.&#xA;You also need to have Git installed.&#xA;Once both are done, you can run the following commands:&#xA;hugo new site quicksite This creates a new directory that will become our new website.</description>
    </item>
    <item>
      <title>Jinja</title>
      <link>http://localhost:1313/notes/computer-science/python/flask-notes/jinja/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/flask-notes/jinja/</guid>
      <description>Link to documentation.</description>
    </item>
    <item>
      <title>Werkzeug</title>
      <link>http://localhost:1313/notes/computer-science/python/flask-notes/werkzeug/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/flask-notes/werkzeug/</guid>
      <description>Link to documentation.&#xA;First of all, what is WSGI?&#xA;Web Server Gateway Interface, a specification that describes how a web server communicates with web applications, and how web applications can be chained together to process one request.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 12</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-12/</link>
      <pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-12/</guid>
      <description>Modified: July 19 2024&#xA;Virtual Environments and Packages 12.1 Introduction Often, you&amp;rsquo;re going to need tools and modules that aren&amp;rsquo;t included with Python by default, or in your standard library. One Python install might not suffice for most applications.&#xA;To circumnavigate this, we create virtual environments, that act as self-contained directories with an installation of Python, and any number of packages.&#xA;12.2 Creating Virtual Environments We can use the venv module to create and manage our own virtual environment.</description>
    </item>
    <item>
      <title>PyCharm IDE Features</title>
      <link>http://localhost:1313/notes/computer-science/python/pycharm-ide-features/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/pycharm-ide-features/</guid>
      <description>Get Acquainted with PyCharm The project view is one of the main tool windows, containing the project directory, external libraries, and scratch files. You can also open it with Alt 1. The Python interpreter is easily viewable in the status bar in the bottom right. You can run, debug, or other option on the top right of the window. You can also press Shift F10. We got an unexpected error in our code, featured below.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 11</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-11/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-11/</guid>
      <description>Modified: July 19 2024&#xA;The Standard Library - Part 2 7/9/2024&#xA;The second part here will go over more advanced, less common modules that nevertheless, exist.&#xA;11.1 Output Formatting reprlib is an appropriately named library containing a version of repr() modified for abbreviated displays of large or deeply nested containers:&#xA;&amp;gt;&amp;gt;&amp;gt; import reprlib &amp;gt;&amp;gt;&amp;gt; reprlib.repr(set(&amp;#39;supercalafragalisticexpialidocious&amp;#39;)) &amp;#34;{&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;,...&amp;#34; pprint is a module with more sophisticated control over printing both built-in and user defined objects.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 10</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/</guid>
      <description>Modified: July 19 2024&#xA;A Brief Tour of the Standard Library 7/4/2024&#xA;10.1 Operating System Interface The os module provides functions for interacting with operating systems:&#xA;&amp;gt;&amp;gt;&amp;gt; import os &amp;gt;&amp;gt;&amp;gt; os.getcwd() # returns the working directory &amp;#39;C:\\Python312&amp;#39; &amp;gt;&amp;gt;&amp;gt; os.chdir(&amp;#39;/server/accesslogs&amp;#39;) # change working directory &amp;gt;&amp;gt;&amp;gt; os.system(&amp;#39;mkdir today&amp;#39;) # run the command mkdir in the system shell 0 Never use from os import *. It&amp;rsquo;s not good practice to not do this regardless, but it will specifically keep os.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 9</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-9/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-9/</guid>
      <description>Modified: July 19 2024&#xA;Classes 6/28/2024&#xA;Classes combine data storage and functionality into one package. When you make a new class, you are making a new type of object. A new instance, or occurrence of that type are able to be made using function call of the class.&#xA;A class is made up of attributes and methods defined by the classes definition.&#xA;Python classes follow closely to other Object Oriented Programming languages classes in the following ways:</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 8</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-8/</link>
      <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-8/</guid>
      <description>Modified: July 19 2024&#xA;Errors and Exceptions 6/22/2024&#xA;There are two distinguishable types of errors: syntax errors and exceptions.&#xA;8.1 Syntax Syntax errors (or parsing errors) are errors involving the actual use of the language.&#xA;&amp;gt;&amp;gt;&amp;gt; while True print(&amp;#39;Hello World&amp;#39;) File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1 while True print(&amp;#39;Hello world&amp;#39;) ^^^^^ SyntaxError: invalid syntax In the example above, the while statement is missing the : required to use it.&#xA;8.2 Exceptions Even if code is syntactically correct, an error may occur when attempting to execute it.</description>
    </item>
    <item>
      <title>HTTP Semantics</title>
      <link>http://localhost:1313/notes/computer-science/http-semantics/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/http-semantics/</guid>
      <description>Modified: June 20 2024&#xA;Following this documentation.</description>
    </item>
    <item>
      <title>What is NumPy</title>
      <link>http://localhost:1313/notes/computer-science/python/numpy-notes/what-is-numpy/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/numpy-notes/what-is-numpy/</guid>
      <description>Link to documentation&#xA;What is NumPy? Python lists are great- easy to use, easy to understand, and perfect for quick one-and-done scenarios. However, there is a huge downside to lists. In most cases, since lists can accept any data type by default, this leaves lists open to unexpected data types you might not want around your list data.&#xA;NumPy is a solution to this issue, specifically in the realm of scientific computing.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 7</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-7/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-7/</guid>
      <description>Modified: July 19 2024&#xA;Input and Output 6/18/2024&#xA;There are three main ways to present output in Python; expression statements (not using print()), using print(), and using write() which writes something into an existing or new file.&#xA;7.1 Fancier Output Formatting At any point in the command line, I can just send out some text without any print() commands and get back what I just sent in. That&amp;rsquo;s an expression statement.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-6/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-6/</guid>
      <description>Modified: July 19 2024&#xA;Modules 6/15/2024&#xA;Obviously, using local instances are not viable for long time development is not realistic. This is why we write scripts.&#xA;Python has the ability to writes scripts, or another method called modules. Definitions from modules can be imported into your instance of Python.&#xA;Main is also given a definition here: the collection of variables that you have access to in a script executed at the top level and in calculator mode.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 5</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-5/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-5/</guid>
      <description>Data Structures 6/10/2024&#xA;5.1 More on Lists Methods for Lists:&#xA;list.append(x) Adds an item to the end of the list Equivalent to a[len(a):] = [x] list.extend(iterable) Extend the list by appending all items from an iterable list.insert(i, x) Insert an item into a given position, where i is the index location and x is the value list.remove(x) Remove the first item from the list whose value is equal to x, ValueError if no such item list.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 4</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-4/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-4/</guid>
      <description>Modified: July 19 2024&#xA;Control Flow Tools 6/5/2024&#xA;The while loop was seen in the previous Fibonacci Sequence example.&#xA;4.1 if Statements &amp;gt;&amp;gt;&amp;gt; x = int(input(&amp;#34;Please enter an integer: &amp;#34;)) Please enter an integer: 42 &amp;gt;&amp;gt;&amp;gt; if x &amp;lt; 0: &amp;gt;&amp;gt;&amp;gt; x = 0 &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Negative so now it&amp;#39;s zero!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; elif x == 0: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Zero!!!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; elif x == 1: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;UNO!!!!!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; else: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Nice B)&amp;#34;) Nice B) Very basic; all you need is an if statement.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 1, 2, and 3</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</link>
      <pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</guid>
      <description>Modified: July 19 2024&#xA;Link to source&#xA;6/2/2024&#xA;In order to get a better understanding of Python as a whole language, I&amp;rsquo;m going to document and take notes as I go through the tutorial. I mostly would like to improve as a programmer, and eventually get a software job at Google or something.&#xA;Introduction What is Python?&#xA;Python is an easy to learn, powerful programming language. Featuring efficient high-level data structures as well as a simple but effective approach to object-oriented programming.</description>
    </item>
  </channel>
</rss>
