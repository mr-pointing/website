<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Syntax on Mr. Pointing</title>
    <link>http://localhost:1313/tags/syntax/</link>
    <description>Recent content in Syntax on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 25 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/syntax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programming in Lua - Chapter 8</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-8/</link>
      <pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-8/</guid>
      <description>Filling in Some Gaps A quick send off chapter for the basics of Lua. Let&amp;rsquo;s review some key components that are necessary, but maybe doesn&amp;rsquo;t need an entire chapter.&#xA;Local Variables and Blocks Quite simply, Lua makes all variables global by default. To specify a local variable, you have to call it with local in front. Local variables only have a scope inside the block it was declared in.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 7</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-7/</link>
      <pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-7/</guid>
      <description>The External World Lua is not the language for powerful performance with the exterior world. Even the text admits that most use of Input and Output are done through the host application or external libraries. Lua can handle basic file manipulation, which we&amp;rsquo;ll review now.&#xA;The Simple I/O Model Lua assumes the use of two streams, the current input stream and the current output stream. Using C terminology, the current input is default stdin while output is stdout.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-6/</link>
      <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-6/</guid>
      <description>Functions Functions in Lua are the main method of abstracting out commands. We&amp;rsquo;ve been using functions the entire time. Like most other languages, we can accomplish direct tasks or solve complicated problems with repeatable calls.&#xA;When calling functions, we use parenthesis, even when there are no parameters. The only time we can leave parenthesis out is when the argument is a literal string or a table constructor.&#xA;A fun addition of Lua is the colon operator, which supports method like calling;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 5</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-5/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-5/</guid>
      <description>Tables Funnily enough, tables are the only data structure natively in Lua. Tables can be used to represent basic arrays, sets, records, and others. We&amp;rsquo;ll see some of these created this chapter.&#xA;By default, a table acts like a Python dictionary, or an associative array. They can contain any number or string value, except for nil. The tables themselves are considered objects. Programs only manipulate references to a table; Lua will never create a hidden copy of your table.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 4</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-4/</link>
      <pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-4/</guid>
      <description>Strings A string is basically a representation of some text. They can be tiny, or huge, depending on how you&amp;rsquo;d like. We consider strings as a sequence of bytes, which we can go into more detail on later. For now, just know we can store any binary data as a string, or even Unicode representation.&#xA;Any string we make in Lua is immutable, so we can&amp;rsquo;t alter it once it&amp;rsquo;s made.</description>
    </item>
    <item>
      <title>CPL - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-6/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-6/</guid>
      <description>Data Types What is a data type? Data types are a collection of data values and set of pre-defined operations on those values. One major benefit of data typing is error catching. Another is documentation; we can tell a lot about about a program based on it&amp;rsquo;s data types and types used.&#xA;The two most common structured (non-scalar) data types are arrays and records. Structured data types defined w/ type operators, or constructors (C uses brackets for arrays, asterisks for pointers).</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 3</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-3/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-3/</guid>
      <description>Numbers Up until recently, all numbers in Lua were floating point numbers. Now, Lua past version 5.3, has two representations for numbers; 64-bit integers and double-precision floating points, just floats.&#xA;The Lua interpreter will allow the input of numbers in whatever format you want, and return it that way (unless specified not too).&#xA;&amp;gt; 4 --&amp;gt; 4 &amp;gt; 0.4 --&amp;gt; 0.4 &amp;gt; 4.57e-3 --&amp;gt; 0.00457 &amp;gt; 0.3e12 --&amp;gt; 300000000000.0 &amp;gt; 5E+20 --&amp;gt; 5e+20 If you call type() on any number, it will always return as a number type.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 2</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-2/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-2/</guid>
      <description>The Eight Queens Problem Not a whole lot going on in this chapter, but they present a fun example of Lua&amp;rsquo;s capabilities. Walking through this code is worthwhile; I recommend giving it a read first, trying it out yourself, and changing some things around to get some different outcomes.&#xA;N = 8 -- board size -- check whether position (n,c) is free from attacks function isplaceok (a, n, c) for i = 1, n - 1 do&#x9;-- for each queen already placed.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 1</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/</guid>
      <description>Getting Started Just like any other language, standard output is a great first step. To do so on a windows machine, you have to download Lua much like you do Python, and run it via the command line. The fastest way I did this was through a command line installer scoop, and installed it with scoop install lua. Then just use lua to run your environment.&#xA;A simple print() will put anything on the screen:</description>
    </item>
    <item>
      <title>CPL - Chapter 5</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-5/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-5/</guid>
      <description>Names, Bindings, &amp;amp; Scope We should understand that in across programming languages, like when we use the term identifier or name (both are synonymous), it depends on the language we are using. Different languages have different naming conventions and rules or syntax. We&amp;rsquo;ll look at variables in this chapter, and the different parts their made out of;&#xA;Name Address Value Type Lifetime Scope Bindings A binding is an association between an attribute and an entity, such as between a variable and it&amp;rsquo;s type or value, or between an operation and a symbol.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 1, 2, and 3</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</link>
      <pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</guid>
      <description>Modified: July 19 2024&#xA;Link to source&#xA;6/2/2024&#xA;In order to get a better understanding of Python as a whole language, I&amp;rsquo;m going to document and take notes as I go through the tutorial. I mostly would like to improve as a programmer, and eventually get a software job at Google or something.&#xA;Introduction What is Python?&#xA;Python is an easy to learn, powerful programming language. Featuring efficient high-level data structures as well as a simple but effective approach to object-oriented programming.</description>
    </item>
  </channel>
</rss>
