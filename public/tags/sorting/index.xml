<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sorting on Mr. Pointing</title>
    <link>https://mrpointing.com/tags/sorting/</link>
    <description>Recent content in Sorting on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 01 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mrpointing.com/tags/sorting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sorting Techniques</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/sorting-techniques/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/sorting-techniques/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/howto/sorting.html&#34;&gt;Link&lt;/a&gt; to article&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sorting-basics&#34;&gt;Sorting Basics&lt;/h1&gt;&#xA;&lt;p&gt;There are two basic ways we can ascending sort (organize from least to greatest on value) built into Python, &lt;code&gt;.sort()&lt;/code&gt; on a list object, and the &lt;code&gt;sorted()&lt;/code&gt; function, which takes in any iterable sequence.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt; will actually return the sequence in order, while &lt;code&gt;.sort()&lt;/code&gt; is more of a step to be done, and will actually return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sorted(a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;key-functions&#34;&gt;Key Functions&lt;/h2&gt;&#xA;&lt;p&gt;Both of the methods we looked at above have an additional parameter &lt;code&gt;key&lt;/code&gt;, which takes in a function that is performed on each element within the sorted list before making any comparisons. This allows for different sorting methods; some even use lambda which is pretty cool.&lt;/p&gt;</description>
    </item>
    <item>
      <title>75. Sort Colors</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/75.-sort-colors/</link>
      <pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/75.-sort-colors/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; with n objects colored red, white, or blue, sort &lt;em&gt;in-place&lt;/em&gt; so that objects of the same color are adjacent. Colors are integers 0, 1, and 2 respectively.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&#xA;&lt;strong&gt;Input:&lt;/strong&gt; &lt;code&gt;nums = [2,0,2,1,1,0]&lt;/code&gt;&#xA;&lt;strong&gt;Output:&lt;/strong&gt; &lt;code&gt;[0,0,1,1,2,2]&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Basically, sort them in order without using the built-in sort function.&lt;/p&gt;&#xA;&lt;p&gt;So I worked on this at work, and I got to a certain point where I was using a hash map to count the amount of times they went through, which I was able to make. However, I was having issues with sorting. I tried on my own for a while, I will try to get the code from my school LeetCode account and paste it here. Otherwise, I had a decent idea of what to do. I used ChatGPT to ask why my sorting wasn&amp;rsquo;t working, and it gave the best answer from LeetCode below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>1122. Relative Sort Array</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/1122.-relative-sort-array/</link>
      <pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/1122.-relative-sort-array/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given two arrays, &lt;code&gt;arr1&lt;/code&gt; and &lt;code&gt;arr2&lt;/code&gt;, where all elements in &lt;code&gt;arr2&lt;/code&gt; are distinct, as well as all elements in &lt;code&gt;arr2&lt;/code&gt; are in &lt;code&gt;arr1&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Sort the elements of &lt;code&gt;arr1&lt;/code&gt; so that the ordering of items in &lt;code&gt;arr1&lt;/code&gt; is the same as &lt;code&gt;arr2&lt;/code&gt;. Any element not in &lt;code&gt;arr2&lt;/code&gt; should be appended in ascending/increasing order at the end of the list.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&#xA;&lt;strong&gt;Input:&lt;/strong&gt; &lt;code&gt;arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]&lt;/code&gt;&#xA;&lt;strong&gt;Output:&lt;/strong&gt; &lt;code&gt;[2,2,2,1,4,3,3,9,6,7,19]&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
