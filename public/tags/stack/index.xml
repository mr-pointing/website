<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack on Mr. Pointing</title>
    <link>https://mrpointing.com/tags/stack/</link>
    <description>Recent content in Stack on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 02 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mrpointing.com/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generate Parentheses</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/generate-parentheses/</link>
      <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/generate-parentheses/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt;&#xA;You are given an integer &lt;code&gt;n&lt;/code&gt;. Return all well-formed parentheses strings that you can generate with &lt;code&gt;n&lt;/code&gt; pairs of parentheses.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Input: n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Output: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;()&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Input: n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Output: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;((()))&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(()())&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(())()&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;()(())&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;()()()&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This one was rough. It was hard to imagine exactly how to get all of the different configurations of the parenthesis. I started out with a basic &lt;code&gt;for&lt;/code&gt; loop to create the most basic version, or the first from the examples;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Valid Parenthesis</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-parenthesis/</link>
      <pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-parenthesis/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; You are given a string &lt;code&gt;s&lt;/code&gt; consisting of the following characters: &lt;code&gt;&#39;(&#39;&lt;/code&gt;, &lt;code&gt;&#39;)&#39;&lt;/code&gt;, &lt;code&gt;&#39;{&#39;&lt;/code&gt;, &lt;code&gt;&#39;}&#39;&lt;/code&gt;, &lt;code&gt;&#39;[&#39;&lt;/code&gt; and &lt;code&gt;&#39;]&#39;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The input string &lt;code&gt;s&lt;/code&gt; is valid if and only if:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Every open bracket is closed by the same type of close bracket.&lt;/li&gt;&#xA;&lt;li&gt;Open brackets are closed in the correct order.&lt;/li&gt;&#xA;&lt;li&gt;Every close bracket has a corresponding open bracket of the same type.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;s&lt;/code&gt; is a valid string, and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
