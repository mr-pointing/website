<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modules on Mr. Pointing</title>
    <link>http://localhost:1313/tags/modules/</link>
    <description>Recent content in Modules on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 09 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/modules/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Geometry Managers</title>
      <link>http://localhost:1313/notes/computer-science/python/tkinter/geometry-managers/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/tkinter/geometry-managers/</guid>
      <description>Controlling Layouts with Geometry Managers Tkinter has three geometry managers, or methods that define how the content of your app is structured. .pack() is just one of them; we also could use .place() or .grid(). You can only use one at a time, so let&amp;rsquo;s discover the instances in which we&amp;rsquo;d use them.&#xA;.pack() When using .pack(), you&amp;rsquo;re actually using a packing algorithm in order to place the widgets on screen.</description>
    </item>
    <item>
      <title>Interactive Applications</title>
      <link>http://localhost:1313/notes/computer-science/python/tkinter/interactive-applications/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/tkinter/interactive-applications/</guid>
      <description>The above has taught you how to make things appear inside your window. This will only get you so far; the things in your window need to do things. Let&amp;rsquo;s learn about events.&#xA;Using Events and Event Handlers Going back to when we learned about the window.mainloop(), the loop this starts is known as the event loop. During this, the window will wait for some response. All we have to code is the events that we want to happen in response to these events, otherwise known as event handlers.</description>
    </item>
    <item>
      <title>Widgets</title>
      <link>http://localhost:1313/notes/computer-science/python/tkinter/widgets/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/tkinter/widgets/</guid>
      <description>Below are a few different types of widgets;&#xA;Label: displays text Button: displays a button that can have text and do action commands Entry: displays a text input form for a single line Text: displays a text input form for multi-line entry Frame: a rectangular area for widgets or padding between widgets There are many more widgets, as well as themed widgets, which are more updated versions of classic widgets, but we don&amp;rsquo;t need to get into that today.</description>
    </item>
    <item>
      <title>Your First App</title>
      <link>http://localhost:1313/notes/computer-science/python/tkinter/your-first-app/</link>
      <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/tkinter/your-first-app/</guid>
      <description>Link to the tutorial.&#xA;What makes Tkinter nice is that it&amp;rsquo;s a built-in library, meaning it should come with all versions of Python 3.12. If you&amp;rsquo;re using Ubuntu (like me) for this example you will have to install it but it doesn&amp;rsquo;t take long at all (sudo apt-get install python3-tk).&#xA;Creating your first window is incredibly simple. The following code will get you up and running in no time:</description>
    </item>
    <item>
      <title>Pandas</title>
      <link>http://localhost:1313/notes/computer-science/python/pandas/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/pandas/</guid>
      <description> </description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 11</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-11/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-11/</guid>
      <description>Modified: July 19 2024&#xA;The Standard Library - Part 2 7/9/2024&#xA;The second part here will go over more advanced, less common modules that nevertheless, exist.&#xA;11.1 Output Formatting reprlib is an appropriately named library containing a version of repr() modified for abbreviated displays of large or deeply nested containers:&#xA;&amp;gt;&amp;gt;&amp;gt; import reprlib &amp;gt;&amp;gt;&amp;gt; reprlib.repr(set(&amp;#39;supercalafragalisticexpialidocious&amp;#39;)) &amp;#34;{&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;,...&amp;#34; pprint is a module with more sophisticated control over printing both built-in and user defined objects.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 10</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/</guid>
      <description>Modified: July 19 2024&#xA;A Brief Tour of the Standard Library 7/4/2024&#xA;10.1 Operating System Interface The os module provides functions for interacting with operating systems:&#xA;&amp;gt;&amp;gt;&amp;gt; import os &amp;gt;&amp;gt;&amp;gt; os.getcwd() # returns the working directory &amp;#39;C:\\Python312&amp;#39; &amp;gt;&amp;gt;&amp;gt; os.chdir(&amp;#39;/server/accesslogs&amp;#39;) # change working directory &amp;gt;&amp;gt;&amp;gt; os.system(&amp;#39;mkdir today&amp;#39;) # run the command mkdir in the system shell 0 Never use from os import *. It&amp;rsquo;s not good practice to not do this regardless, but it will specifically keep os.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-6/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-6/</guid>
      <description>Modified: July 19 2024&#xA;Modules 6/15/2024&#xA;Obviously, using local instances are not viable for long time development is not realistic. This is why we write scripts.&#xA;Python has the ability to writes scripts, or another method called modules. Definitions from modules can be imported into your instance of Python.&#xA;Main is also given a definition here: the collection of variables that you have access to in a script executed at the top level and in calculator mode.</description>
    </item>
  </channel>
</rss>
