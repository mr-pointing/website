<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Textbook on Mr. Pointing</title>
    <link>http://localhost:1313/tags/textbook/</link>
    <description>Recent content in Textbook on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 10 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/textbook/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Real Programming</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/</guid>
      <description>Real Programming</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 10</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-10/</link>
      <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-10/</guid>
      <description>Pattern Matching Due to Lua&amp;rsquo;s goal of maintaining a lite and quick language, it relies on it&amp;rsquo;s own method of pattern matching rather than POSIX regex or even Perl regex.&#xA;Pattern Matching Functions There are four pattern matching functions within Lua&amp;rsquo;s standard string library. We&amp;rsquo;ve actually already seen two of them, find and gsub. We will cover those in slightly more detail, as well as the other two, match and gmatch.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 9</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-9/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-9/</guid>
      <description>Closures The first advanced topic, more of a clarification, let&amp;rsquo;s discuss the true nature of functions and how they&amp;rsquo;re treated in Lua.&#xA;Any function inside Lua is a first-class value, meaning they are treated with similar properties as strings and numbers. This implies that not only can we store functions inside of variables, but we can also pass functions as arguments.&#xA;Another concept that gives Lua additional flexibility is lexical scoping, meaning nested functions have automatic access to variables in their enclosing function.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 8</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-8/</link>
      <pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-8/</guid>
      <description>Filling in Some Gaps A quick send off chapter for the basics of Lua. Let&amp;rsquo;s review some key components that are necessary, but maybe doesn&amp;rsquo;t need an entire chapter.&#xA;Local Variables and Blocks Quite simply, Lua makes all variables global by default. To specify a local variable, you have to call it with local in front. Local variables only have a scope inside the block it was declared in.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 7</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-7/</link>
      <pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-7/</guid>
      <description>The External World Lua is not the language for powerful performance with the exterior world. Even the text admits that most use of Input and Output are done through the host application or external libraries. Lua can handle basic file manipulation, which we&amp;rsquo;ll review now.&#xA;The Simple I/O Model Lua assumes the use of two streams, the current input stream and the current output stream. Using C terminology, the current input is default stdin while output is stdout.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-6/</link>
      <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-6/</guid>
      <description>Functions Functions in Lua are the main method of abstracting out commands. We&amp;rsquo;ve been using functions the entire time. Like most other languages, we can accomplish direct tasks or solve complicated problems with repeatable calls.&#xA;When calling functions, we use parenthesis, even when there are no parameters. The only time we can leave parenthesis out is when the argument is a literal string or a table constructor.&#xA;A fun addition of Lua is the colon operator, which supports method like calling;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 5</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-5/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-5/</guid>
      <description>Tables Funnily enough, tables are the only data structure natively in Lua. Tables can be used to represent basic arrays, sets, records, and others. We&amp;rsquo;ll see some of these created this chapter.&#xA;By default, a table acts like a Python dictionary, or an associative array. They can contain any number or string value, except for nil. The tables themselves are considered objects. Programs only manipulate references to a table; Lua will never create a hidden copy of your table.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 4</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-4/</link>
      <pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-4/</guid>
      <description>Strings A string is basically a representation of some text. They can be tiny, or huge, depending on how you&amp;rsquo;d like. We consider strings as a sequence of bytes, which we can go into more detail on later. For now, just know we can store any binary data as a string, or even Unicode representation.&#xA;Any string we make in Lua is immutable, so we can&amp;rsquo;t alter it once it&amp;rsquo;s made.</description>
    </item>
    <item>
      <title>CPL - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-6/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-6/</guid>
      <description>Data Types What is a data type? Data types are a collection of data values and set of pre-defined operations on those values. One major benefit of data typing is error catching. Another is documentation; we can tell a lot about about a program based on it&amp;rsquo;s data types and types used.&#xA;The two most common structured (non-scalar) data types are arrays and records. Structured data types defined w/ type operators, or constructors (C uses brackets for arrays, asterisks for pointers).</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 3</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-3/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-3/</guid>
      <description>Numbers Up until recently, all numbers in Lua were floating point numbers. Now, Lua past version 5.3, has two representations for numbers; 64-bit integers and double-precision floating points, just floats.&#xA;The Lua interpreter will allow the input of numbers in whatever format you want, and return it that way (unless specified not too).&#xA;&amp;gt; 4 --&amp;gt; 4 &amp;gt; 0.4 --&amp;gt; 0.4 &amp;gt; 4.57e-3 --&amp;gt; 0.00457 &amp;gt; 0.3e12 --&amp;gt; 300000000000.0 &amp;gt; 5E+20 --&amp;gt; 5e+20 If you call type() on any number, it will always return as a number type.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 13</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-13/</link>
      <pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-13/</guid>
      <description>Where To Go Next What a journey this has been! The next few sections are light on detail, and geared more towards exposure. Please feel free to dive into each of these topics on your own, as each is large enough to devote an entire chapter to.&#xA;Linear Regression Given a data set of points, a line of best fit is generated to make predictions. This is one of the first topics covered when you begin learning about Machine Learning (due to how easy it is to set up), so you&amp;rsquo;re likely going to have first hand experience with this soon enough.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 12</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-12/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-12/</guid>
      <description>K-Nearest Neighbor K-nearest neighbor, or simply KNN, is a classification algorithm. Whenever we are given a set of data, given the unique attributes of that dataset, we can plot it on a graph. Like most things from this text, it&amp;rsquo;s something best understood visually. Let&amp;rsquo;s use one of the most common examples, classifying fruit;&#xA;In the above example, the orange marks indicate an orange, and the red marks indicate an apple.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 2</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-2/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-2/</guid>
      <description>The Eight Queens Problem Not a whole lot going on in this chapter, but they present a fun example of Lua&amp;rsquo;s capabilities. Walking through this code is worthwhile; I recommend giving it a read first, trying it out yourself, and changing some things around to get some different outcomes.&#xA;N = 8 -- board size -- check whether position (n,c) is free from attacks function isplaceok (a, n, c) for i = 1, n - 1 do&#x9;-- for each queen already placed.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 10</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-10/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-10/</guid>
      <description>Greedy Algorithms A simpler concept than the last few we just tackled, Greedy Algorithms are algorithms that pick the most optimal movement at each step. This seems vague, and it is! You are literally just picking the most locally optimal solution, or the best choice, until you&amp;rsquo;re left with the globally optimal solution.&#xA;If you have a day where you&amp;rsquo;re trying to schedule classes &amp;amp; have as many as you possibly can, taking up your entire schedule.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 11</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-11/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-11/</guid>
      <description>Dynamic Programming The knapsack problem is coming back; this time with a vengeance. This time around, we have the same items, but we have a four pound limit in our bag. The Switch is $1500 and 1 pound, the P.C. is $3000 and 4 pounds, and the laptop is $2000 and 3 pounds.&#xA;If we went with the most simple solution, we could just add up all possible combinations and pick the best.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 8</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-8/</link>
      <pubDate>Mon, 03 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-8/</guid>
      <description>Balanced Trees From on out, if an array or linked list isn&amp;rsquo;t enough, a tree should be our next structure to try. It&amp;rsquo;s a balancing act to choose between both, especially for run time. Binary Search Trees are great, especially for insertion.&#xA;Remember, arrays take longer to insert than linked lists, but provide faster sorts. Binary Search Trees optimize by providing a clear and easy to understand structure: a root node with values larger to their right, and smaller to the left.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 9</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-9/</link>
      <pubDate>Mon, 03 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-9/</guid>
      <description>Dijkstra&amp;rsquo;s Algorithm Dijkstra&amp;rsquo;s Algorithm calculates the shortest path on a weighted graph. Unlike Breadth-first search, every step we take has some cost associated with it that we have to take into account. Just like last chapter, we can use graphs to help us get a better understanding:&#xA;From what we know of BFS, we can assume it would probably return &amp;ldquo;Start -&amp;gt; A -&amp;gt; Finish&amp;rdquo; as the shortest path. without weights, that makes perfect sense.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 7</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-7/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-7/</guid>
      <description>Trees A subset of graphs, trees are similarly made with nodes and edges and come in multiple different varieties. The first tree we are going to look at is the rooted tree, which is quite easy to visualize.&#xA;Rooted trees must have one node that heads to all other nodes in the tree. Nodes have at most one parent, and the only node with no parent is known as the root node.</description>
    </item>
    <item>
      <title>Programming in Lua</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/</guid>
      <description>Fourth Edition By Roberto Ierusalimschy Lua was initially designed to be integrated with software written in C/C++. It&amp;rsquo;s a small yet powerful language, and achieves this by not trying to do what C already does; perform well. Lua offers dynamic structures, zero redundancies, and a simpler time testing and debugging code.&#xA;It&amp;rsquo;s an extensible language; things like dynamic typing, automatic memory management, and first-class functions make Lua a good pick for small to even medium/large projects.</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 1</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/</guid>
      <description>Getting Started Just like any other language, standard output is a great first step. To do so on a windows machine, you have to download Lua much like you do Python, and run it via the command line. The fastest way I did this was through a command line installer scoop, and installed it with scoop install lua. Then just use lua to run your environment.&#xA;A simple print() will put anything on the screen:</description>
    </item>
    <item>
      <title>The Basics</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/the-basics/</guid>
      <description>The Basics</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-6/</link>
      <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-6/</guid>
      <description>Breadth-First Search Graphs are the next data structure we are going to learn. Breadth-first search is the first graphing algorithm we&amp;rsquo;ll take a look at, and will give us the ability to find the shortest distance between two points.&#xA;There are many use cases for BFS:&#xA;Spell checker Finding nearby doctors/hospitals Search engines Graphs come in many different forms. One of the easiest ways to visualize is with locations:</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 5</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-5/</link>
      <pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-5/</guid>
      <description>Hash Tables Hash tables are the more formal term for Python&amp;rsquo;s Dictionary structure; a key-value pairing of elements. Hash functions are any function that does the mapping of a value to an input.&#xA;Two main rules when implementing hash tables:&#xA;Pairings should be consistent Key&amp;rsquo;s should be unique The way these mappings work are complex, but essentially, when using Python, grabbing values from a dictionary is pretty fast and grants instant access.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 4</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-4/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-4/</guid>
      <description>Quicksort Divide and Conquer To introduce another tool into our algorithm toolbox, we can introduce Divide &amp;amp; Conquer, a useful method to recursively solve problems. Just like we learned in recursion, we need to identify our base case. Then we divide our problem into smaller problems, until we eventually reach our base case.&#xA;We can use the example of a plot of land:&#xA;If we wanted to divide our land into perfectly even square boxes, making sure to use all available land with no land left out.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 3</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-3/</link>
      <pubDate>Sat, 08 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-3/</guid>
      <description>Recursion Recursion, or the process of a sub-program calling itself, is a reoccurring concept in many different algorithms, and a foundational topic in computer science.&#xA;It is a hard topic to understand, but not super complicated. All code examples should be ran and written yourself to gain a full understanding.&#xA;Pseudocode is another term you should familiarize yourself with, since it will be used both by this book and by myself.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 2</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-2/</link>
      <pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-2/</guid>
      <description>Selection Sort Before going into choosing an array vs. a linked list, let&amp;rsquo;s do a quick lesson on memory.&#xA;Think of your computers memory like a dresser full of small drawers. When you want to store a value, in a variable, that variable name is given an address, and whatever value is stored inside of it. Incredibly simple for single value variables- but what about multiple items? This is where picking an array or a linked list comes in.</description>
    </item>
    <item>
      <title>Grokking Algorithms</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/</link>
      <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/</guid>
      <description>Second Edition By Aditya Y. Bhargava Not only is this book incredibly easy to follow, but it requires very little in terms of prerequisites. The most you need to know is a basic understanding of Python and Algebra.&#xA;This book is for people who already know how to code, hobbyists, visual learners, or anyone who wants to learn algorithms without a rigorous mathematical foundation.&#xA;Code for all chapters can be found here.</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 1</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-1/</link>
      <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-1/</guid>
      <description>Introduction to Algorithms An algorithm is simply a set of instructions or code designed in a way to accomplish a specific task. Tasks range from solving a math problem, to how to make decision given a specific scenario.&#xA;All the algorithms featured in this text are fast, solve interesting problems, or even both. The text will introduce an algorithm, give an example, and discuss the running time in Big O (we&amp;rsquo;ll get back to this in a second).</description>
    </item>
    <item>
      <title>CPL - Chapter 5</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-5/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-5/</guid>
      <description>Names, Bindings, &amp;amp; Scope We should understand that in across programming languages, like when we use the term identifier or name (both are synonymous), it depends on the language we are using. Different languages have different naming conventions and rules or syntax. We&amp;rsquo;ll look at variables in this chapter, and the different parts their made out of;&#xA;Name Address Value Type Lifetime Scope Bindings A binding is an association between an attribute and an entity, such as between a variable and it&amp;rsquo;s type or value, or between an operation and a symbol.</description>
    </item>
    <item>
      <title>20 Textbooks</title>
      <link>http://localhost:1313/posts/20-textbooks/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/20-textbooks/</guid>
      <description>For 2025, I want to read and document my notes on Obsidian for 20 different textbooks. I acquired most of these throughout 2024 (thank you Humble Bundle!), and I thought why not put my money where my mouth is and actually use all the books I&amp;rsquo;ve purchased. Below is a list that I&amp;rsquo;ll keep updated, as well as a link to their inevitable notes.&#xA;1. Learning Git 2. Deep Learning - Math 3.</description>
    </item>
    <item>
      <title>Deep Learning - Chapter 3</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-3/</link>
      <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-3/</guid>
      <description>Probability and Information Theory When we encounter situations where the output is unknown, probability theory gives us a mathematical framework to deal with these statements. They use the term &amp;ldquo;quantifying uncertainty&amp;rdquo; which I like a lot. The connection between AI applications and probability come from two places; algorithms often use probability theory to give AI it&amp;rsquo;s reasoning abilities, and probability with statistics are used to grade and categorize the behavior of the AI models/agents.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 12</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-12/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-12/</guid>
      <description>We&amp;rsquo;re on our final chapter, and almost through with the rainbow project. Before we move onto our last lesson, let&amp;rsquo;s review where we&amp;rsquo;re at;&#xA;An important distinction we need to make up front first is that in the past, we have introduced and used pull. While that is involved in what we&amp;rsquo;re about to learn, we&amp;rsquo;re going to go more specifically into pull requests, or a request to collaborate on work via a hosting service.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 11</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-11/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-11/</guid>
      <description>Rebasing We&amp;rsquo;re over ten chapters into this text; let&amp;rsquo;s get a quick recap of the status of our repos:&#xA;One thing to notice about the repos up until this point is that up to the green commit, our project&amp;rsquo;s history was linear. Some people prefer to keep their history this way, and want to avoid branching pathways, like we had to do for the three-way merges we had to make.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 10</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-10/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-10/</guid>
      <description>Merge Conflicts In our last chapter, we were able to pull off our first three way merge without any issues. This time, we&amp;rsquo;re about to experience some merge conflicts, and what to do when we encounter them. You can view the end of Chapter 9 to see the visualization of where we&amp;rsquo;re at; we&amp;rsquo;ve got the M1 commit as the latest in all three repos.&#xA;One important distinction we need to make about this experiment we&amp;rsquo;re going to do versus the last chapter is the type of changes we&amp;rsquo;re going to make.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 9</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/</link>
      <pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/</guid>
      <description>Three Way Merges Every merge we&amp;rsquo;ve done so far has been a fast-forward merge. In this chapter, we&amp;rsquo;re going to take a look at performing our first three way merge, and also get some hands on experience with how editing our files out of order will affect our work flow. First, let&amp;rsquo;s simplify our visualization and update it to reflect where we left off in the last chapter;&#xA;Again, three way merges are important and necessary to understand.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 8</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-8/</link>
      <pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-8/</guid>
      <description>Cloning and Fetching As it stands, we have just pushed our local repo onto our remote repo, and updated it with all currently created branches. For this chapter, we&amp;rsquo;re going to start working through what it would be like if you&amp;rsquo;d like to start working on your project with a friend or coworker through an essential core concept of Git called cloning, or copying a remote repository.&#xA;Cloning a Remote Repository Like we know for the beginning of this text, Git is a major player in collaborative coding.</description>
    </item>
    <item>
      <title>Deep Learning - Chapter 2</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-2/</link>
      <pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-2/</guid>
      <description>Linear Algebra This book covers all topics of linear algebra that are important to deep learning, not necessarily all topics within Linear Algebra. For a text more focused in linear algebra, see here.&#xA;Scalars, Vectors, Matrices, and Tensors Scalars Single numbers, usually denoted by a lowercase variable name, and introduced with some information on the number.&#xA;Ex.&#xA;Let $s \in R$ be the slope of the line for a real-valued scalar Let $n \in N$ be the number of units for a natural number scalar Vectors An ordered array of numbers, obtainable via the index position of the number in the array.</description>
    </item>
    <item>
      <title>Deep Learning - Preface</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/deep-learning/deep-learning---preface--chapter-1/</link>
      <pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/deep-learning/deep-learning---preface--chapter-1/</guid>
      <description>Preface MIT Press Online Edition Ian Goodfellow, Yoshua Bengio, and Aaron Courville Link to the book.&#xA;Chapter 1 Introduction This book is intended to prepare you for concepts and theory used in Machine Learning and Artificial Intelligence, more specifically deep learning, or the multi-layered stacked concepts that make up the intelligence of an AI model.&#xA;Like most textbooks, it goes into the why of AI, and what they do best; solving problems that humans are generally not good at.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 7</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-7/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-7/</guid>
      <description>Creating and Pushing to a Remote Repository Currently, we have three commits, red, orange, and yellow. We have two branches, both of them (head and feature) pointing at our yellow commit, and HEAD is attached to main.&#xA;Now that we&amp;rsquo;re beginning to talk about remote repositories, it&amp;rsquo;s important to understand how these projects are started. We&amp;rsquo;ve been working on our Rainbow project, which we know is a local repository.</description>
    </item>
    <item>
      <title>Appendix A</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/appendix-a/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/appendix-a/</guid>
      <description>Summations As we know, we analyze algorithms by their running time. When algorithms use for or while loops (iterative structures), the running time is expressed as the sum of all the times spent on execution.&#xA;Summation Formulas and Properties Say we have $a_1,a_2,&amp;hellip;a_n$ numbers, what we call a sequence. While $n$ is a non-negative integer, we can say the sum of that set is $\sum_{k=1}^{n}a_k$.&#xA;If $n=0$, value is 0.</description>
    </item>
    <item>
      <title>Introduction to Algorithms</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/</guid>
      <description>Created: July 17 2024 Modified: August 02 2024&#xA;Fourth Edition Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein Preface Algorithms are everywhere, apart of almost everything we do, and every decision we make. They are part of most if not all tech stacks used today.&#xA;Each chapter in this book will present an algorithm, an application area for some algorithm, or some other related topic.&#xA;For teaching purposes The less complex the audience, the less complex chapters you need.</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 3</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-3/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-3/</guid>
      <description>Characterizing Running Times As we saw in Chapter 2, order of growth gives us the ability to quantify the effectiveness of our algorithms, and compare them.&#xA;Us studying these algorithms at large enough input sizes is us studying the asymptotic efficiency of an algorithm. We can say an algorithm that is &amp;ldquo;more asymptotically efficient&amp;rdquo; is the better choice for most cases, save small inputs.&#xA;O-notation, $\Theta$-notation, and $\Omega$-notation We already met $\Theta$-notation in chapter 2; this is a type of asymptotic notation.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-6/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-6/</guid>
      <description>Hosting Services and Authentication Everything we&amp;rsquo;ve done up until this point has been local. Even though some of the things we&amp;rsquo;ve looked at incentive&amp;rsquo;s working in a group, if your repository is local no one else will have access to it. This is where public repositories come into play.&#xA;There are three main players in the repository game; GitHub, GitLab, and Bitbucket. I personally only have experience with GitHub, so we&amp;rsquo;ll be focusing on that going forward.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 5</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/</guid>
      <description>Merging We last looked at how branches can help a team work on a project together, without losing or any conflicting progress. Now for the logical next step- combining the work together into one branch. We call this merging, or the combining of work from different branches.&#xA;The source branch is the merging branch, or where the work is coming from. The target branch is the branch you&amp;rsquo;re merging into.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 4</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-4/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-4/</guid>
      <description>Branches We last left off with our first commit in our rainbow project. Remember, we can also use git status to get an update on the status of our repository. Before we get too deep into defining what a branch is, let&amp;rsquo;s explore why they&amp;rsquo;re used. That might make it a bit easier to understand.&#xA;Why Do We Use Branches? Branches help us differentiate changes in a given project. They can be made for an number of reasons, but can be boiled down to two main points:</description>
    </item>
    <item>
      <title>Learning Git - Chapter 3</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-3/</link>
      <pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-3/</guid>
      <description>Making a Commit We left off with our first text file in our working directory, our rainbowcolors.txt file. It has one sentence in it, and we can check that by either opening it or running cat rainbowcolors.txt in the working directory. We can see that we haven&amp;rsquo;t made any commits yet, and we only have one untracked file. You can run git status to gather all of this info.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 2</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-2/</link>
      <pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-2/</guid>
      <description>Local Repositories Introducing and Initializing a Local Repository A repository (or a repo) is the container of a project version controlled by Git. There are two; local and remote. Local is stored on your computer, while remote is obviously hosted remotely (someone else&amp;rsquo;s computer).&#xA;GitHub is one of the largest platforms and the one I&amp;rsquo;m most familiar with. GitLab and Bitbucket also exist, but I haven&amp;rsquo;t used them myself. Chapter 6 onward deals with this; for now, we can worry about it later.</description>
    </item>
    <item>
      <title>Learning Git - Chapter 1</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/</guid>
      <description>Git and the Command Line What is Git? Git is a version control system that keeps track of the changes done to a project or directory. When you edit a file, Git records what was added and removed. If files are added or removed, Git has it&amp;rsquo;s eyes on it (if you&amp;rsquo;re configuring it correctly).&#xA;Git was originally created by Linus Torvalds, the creator of Linux. Meant to be used at the command line, it is clearly more complex then a simply saving a file.</description>
    </item>
    <item>
      <title>Learning Git</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/</guid>
      <description>First Edition Anna Skoulikari&#xA;I got this textbook as a part of a DevOps Humble Bundle for a ridiculous price.&#xA;I have been using Git more seriously this year, so it makes sense to go through this first. It also is apart of the AI Engineer Roadmap, so even more of a reason to start.&#xA;Who the Textbook is For Anyone who wants to learn Git, and geared towards individuals who have basic technical skills, or those who need to work alongside those who use Git.</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 2</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-2/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-2/</guid>
      <description>Getting Sorted This chapter is meant to familiarize yourself with the framework used throughout the book.&#xA;2.1 Insertion Sort Solves a sorting problem (obviously).&#xA;The numbers to be sorted are known as keys.&#xA;The input comes in the form of an array with n elements.&#xA;A reason to sort is often because those keys are associated with other data, Satellite data.&#xA;Key + Satellite = Record&#xA;We can think of a spreadsheet, with student records having many pieces of data.</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 1</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/</guid>
      <description>Modified: August 02 2024&#xA;The Role of Algorithms in Computing 1.1 Algorithms Algorithm: Any well defined computational procedure that takes some value, or set of values, as input and produces some value, or set of values, as output in a finite amount of time.&#xA;We often say algorithms help us solve computational problems.&#xA;We can define a sorting algorithm like so:&#xA;Input: A sequence of n numbers, {a_1, a_2, ... a_n}</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Part 1</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/</link>
      <pubDate>Wed, 17 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/</guid>
      <description>Modified: August 02 2024&#xA;Notes on Part 1.</description>
    </item>
  </channel>
</rss>
