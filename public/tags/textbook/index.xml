<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Textbook on Mr. Pointing</title>
    <link>https://mrpointing.com/tags/textbook/</link>
    <description>Recent content in Textbook on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 03 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mrpointing.com/tags/textbook/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Modern Linux - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-3/</link>
      <pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;shells-and-scripting&#34;&gt;Shells and Scripting&lt;/h1&gt;&#xA;&lt;p&gt;A huge part of getting comfortable with Linux is getting comfortable using the &lt;em&gt;command line&lt;/em&gt;, or &lt;em&gt;CLI&lt;/em&gt;. Most common distros today will have some standard GUI application to accomplish most tasks. However, like we discussed, this text is going to be applicable to all Linux releases, and some are entirely command-line driven. We&amp;rsquo;ll discuss some different types of shells, then take a look at &lt;em&gt;scripting&lt;/em&gt;, or pre-written chunks of commands in a file meant to be ran by the computer at designated times.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 23</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-23/</link>
      <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-23/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;garbage&#34;&gt;Garbage&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 22</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-22/</link>
      <pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-22/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-environment&#34;&gt;The Environment&lt;/h1&gt;&#xA;&lt;p&gt;Now it&amp;rsquo;s time to talk about &lt;em&gt;global variables&lt;/em&gt;. Technically speaking, Lua doesn&amp;rsquo;t actually have any. Why would you want global variables? For the most part they over complicate code, and can lead to messy implementation if caution isn&amp;rsquo;t used. That being said, global variables can also help tremendously if used correctly.&lt;/p&gt;&#xA;&lt;p&gt;What it does have, are variables placed within a table called the &lt;strong&gt;global environment&lt;/strong&gt;. It&amp;rsquo;s a cheeky way to circumnavigate having to actually implement global variables. Lua uses a table named &lt;code&gt;_G&lt;/code&gt; to store all of the global variables, and we can use the following to list out everything inside of it;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Modern Linux - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-1/</link>
      <pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;introduction-to-linux&#34;&gt;Introduction to Linux&lt;/h1&gt;&#xA;&lt;p&gt;Linux is one of the most used operating systems in the world. It&amp;rsquo;s used for a wide variety of applications, and has roots that go back years. TO understand where we are at and how we got here, let&amp;rsquo;s define &lt;strong&gt;modern&lt;/strong&gt; Linux.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-modern-environment&#34;&gt;What is a Modern Environment?&lt;/h2&gt;&#xA;&lt;p&gt;Put simply, these &amp;ldquo;environments&amp;rdquo; are spaces in which Linux is commonly used. These range from &lt;em&gt;mobile devices&lt;/em&gt;, (Android is developed with Linux!), &lt;em&gt;cloud computing&lt;/em&gt;, to &lt;em&gt;Internet of Things&lt;/em&gt; (think of smart appliances or cars). We even see Linux get involved when we are &lt;em&gt;diversifying processors&lt;/em&gt;. All of these spaces are heavily influenced by Linux.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Modern Linux - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-2/</link>
      <pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-linux-kernel&#34;&gt;The Linux Kernel&lt;/h1&gt;&#xA;&lt;p&gt;In the last chapter, we gained a new perspective on what an Operating System actually does; gives us the ability to use an API to talk to our system hardware and abstracts out all of the obscure and human-intensive tasks. We&amp;rsquo;ll take a look now at where the kernel falls into place in this diagram; not as a separate entity, but a crucial part of the OS.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 21</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-21/</link>
      <pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-21/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;object-oriented-programming&#34;&gt;Object-Oriented Programming&lt;/h1&gt;&#xA;&lt;p&gt;Like everything in Lua, we can use tables as a stand-in for many different structures. We can accomplish &lt;em&gt;Object-Oriented Programming&lt;/em&gt;, or a method of programming in which all variables and functions belong to objects, using tables (of course). Objects in OOP need an identity (self), a state, operations, life cycles, etc. Lua can accomplish a lot of this using tables.&lt;/p&gt;&#xA;&lt;p&gt;While the verbiage used can become interchangeable, we technically define &lt;em&gt;methods&lt;/em&gt; as functions that belong to objects. The &lt;em&gt;self&lt;/em&gt; as a concept is integral to OOP;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 20</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-20/</link>
      <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-20/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;metatables-and-metamethods&#34;&gt;Metatables and Metamethods&lt;/h1&gt;&#xA;&lt;p&gt;There are a few things that aren&amp;rsquo;t possible within Lua by default, like adding tables, comparing functions, or calling a string. All of this and more is possible with the implementation of &lt;em&gt;metatables&lt;/em&gt;. Metatables give us the ability to give context to unused operators for objects. Metatables have &lt;em&gt;metamethods&lt;/em&gt;, or methods that are within metatables that are called in these new situations.&lt;/p&gt;&#xA;&lt;p&gt;The text refers to metatables as a restricted type of class, but they don&amp;rsquo;t fail to mention that they&amp;rsquo;re even more strict, since the operations are limited. Any value in Lua can have a metatable, but they are split up into tables or userdata who have their own metatables, while all variables share one giant metatable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 17</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-17/</link>
      <pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-17/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;modules-and-packages&#34;&gt;Modules and Packages&lt;/h1&gt;&#xA;&lt;p&gt;When it comes to Lua, there are generally no policies set in place. However, starting with Lua 5.1, there are policies set up for modules and packages. Programmers are open to follow these policies or define their own as they see fit. We consider a &lt;em&gt;module&lt;/em&gt; as some code in Lua or C, and can be loaded into an environment using the function &lt;code&gt;require&lt;/code&gt; that creates and returns a table. All things defined (variables, functions, etc.) are defined in the table provided.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 18</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-18/</link>
      <pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/programming-in-lua---chapter-18/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;iterators-and-the-generic-for&#34;&gt;Iterators and the Generic &lt;code&gt;for&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s learn how to make our own &lt;em&gt;Iterators&lt;/em&gt; in Lua. We&amp;rsquo;ll accomplish this by taking a look at the &lt;code&gt;for&lt;/code&gt; loop in more detail; more specifically, the &lt;strong&gt;generic&lt;/strong&gt; &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;&#xA;&lt;h2 id=&#34;iterators-and-closures&#34;&gt;Iterators and Closures&lt;/h2&gt;&#xA;&lt;p&gt;We consider an iterator to be any construction that will allow is to iterate over the elements within some collection of objects. Most commonly we use functions to accomplish this. We make calls to the function when we want the next item, and so on. We&amp;rsquo;ve seen this with &lt;code&gt;io.read&lt;/code&gt; in the past.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Modern Linux</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/</link>
      <pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/</guid>
      <description>&lt;h1 id=&#34;a-handbook-for-the-cloud-native-practitioner&#34;&gt;A Handbook for the Cloud Native Practitioner&lt;/h1&gt;&#xA;&lt;h2 id=&#34;by-michael-hausenblas&#34;&gt;By Michael Hausenblas&lt;/h2&gt;&#xA;&lt;p&gt;Another book from Humble Bundle, this is a book I&amp;rsquo;m pretty excited about. I know very little aside from the basics concerning Linux architecture, so I&amp;rsquo;m looking forward to learning more complicated topics. This text is meant to focus on everyday uses of Linux, from development to standard office.&lt;/p&gt;&#xA;&lt;p&gt;An important part of this text is it&amp;rsquo;s emphasis on the command-line; this is not going to go over the GUI side of Linux. This book is for anyone who wants or needs to use Linux in the above discussed settings. A lot of the text will read as if the reader doesn&amp;rsquo;t have proficient knowledge of Linux. This again, focuses on the use of Linux, rather than the administration of it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 16</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-16/</link>
      <pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-16/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;compilation-execution-and-errors&#34;&gt;Compilation, Execution, and Errors&lt;/h1&gt;&#xA;&lt;p&gt;Lua is an interpreted language. Regardless, Lua will always pre-compile source code to a temporary middle-form in the &lt;em&gt;compilation phase&lt;/em&gt;. This is standard practice, but feels out of place knowing that interpreted languages are known to be quick and run without any compilers. This chapter is dense and nerdy, but will explain part of the process and why Lua chooses to use that system. This chapter should probably be read on it&amp;rsquo;s own, as my notes will not be sufficient.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 14</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-14/</link>
      <pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-14/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-structures&#34;&gt;Data Structures&lt;/h1&gt;&#xA;&lt;p&gt;As we know, Lua just has tables. Within this, we can arrange tables in numerous different fashions to create whatever data structure we need. Since tables work so well, some of these aren&amp;rsquo;t entirely necessary but can be done.&lt;/p&gt;&#xA;&lt;h2 id=&#34;arrays&#34;&gt;Arrays&lt;/h2&gt;&#xA;&lt;p&gt;To accomplish the array structure, we can do something we&amp;rsquo;ve done previously; create a table with numbered indexes. Super simple to accomplish.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  a[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above creates an array with a range of 1 to 100, and any call to a field out of that range will return &lt;code&gt;nil&lt;/code&gt;. We can find the length of &lt;code&gt;a&lt;/code&gt; easily with &lt;code&gt;#a&lt;/code&gt;. A one liner version for an array type of table is accomplished with any set of numbers like so;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 15</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-15/</link>
      <pubDate>Sun, 04 May 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-15/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-files-and-serialization&#34;&gt;Data Files and Serialization&lt;/h1&gt;&#xA;&lt;p&gt;Writing data is usually much cleaner than reading in data. There are many different ways in which the process can be corrupted. This calls for writing well written, error-preventative code. Problem is, that&amp;rsquo;s pretty hard. We can do one better; we can make our data easier to read in by writing it in readable formats. Lua makes this easy. We can write code that will generate our data objects for us.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 13</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-13/</link>
      <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-13/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;bits-and-bytes&#34;&gt;Bits and Bytes&lt;/h1&gt;&#xA;&lt;p&gt;Not a dense chapter, but we should recognize that Lua handles binary data very similarly to text. Let&amp;rsquo;s dive right into it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bitwise-operators&#34;&gt;Bitwise Operators&lt;/h2&gt;&#xA;&lt;p&gt;There are a few Lua operators that work only on integers and binary data; &lt;code&gt;&amp;amp;&lt;/code&gt; or AND, &lt;code&gt;|&lt;/code&gt; or OR, &lt;code&gt;~&lt;/code&gt; or BITWISE OR, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; or SHIFT RIGHT, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; or SHIFT LEFT, and &lt;code&gt;~&lt;/code&gt; which can also mean BITWISE NOT.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string.format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xabcd&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; cd&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string.format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xabcd&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; abff&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unsigned-integers&#34;&gt;Unsigned Integers&lt;/h2&gt;&#xA;&lt;p&gt;Essentially, unsigned integers are any numbers that can only represent non-negative values. By default, Lua does not support them, but there are workarounds that can help implement them in necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 12</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-12/</link>
      <pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;date-and-time&#34;&gt;Date and Time&lt;/h1&gt;&#xA;&lt;p&gt;Not Lua&amp;rsquo;s strong-suit, but there are ways to retrieve and filter on date and time. Although, the system is quite weird.&lt;/p&gt;&#xA;&lt;p&gt;Lua officially has two ways of representing date and time. First is a single number, known as the number of seconds from the &lt;em&gt;epoch&lt;/em&gt;, or some fixed date. POSIX and Windows use the date January 1st, 1970, 0:00 UTC.&lt;/p&gt;&#xA;&lt;p&gt;The second is through a table that&amp;rsquo;s a lot more human readable. &lt;em&gt;Date tables&lt;/em&gt; have fields for &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sec&lt;/code&gt;, &lt;code&gt;wday&lt;/code&gt;, &lt;code&gt;yday&lt;/code&gt;, and &lt;code&gt;isdst&lt;/code&gt;. All are integers save for &lt;code&gt;isdst&lt;/code&gt;, which is a Boolean for daylight savings. There is no time zone set.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lua-isms</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/lua-isms/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Lua-isms&lt;/p&gt;</description>
    </item>
    <item>
      <title>Real Programming</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Real Programming&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 10</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-10/</link>
      <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;pattern-matching&#34;&gt;Pattern Matching&lt;/h1&gt;&#xA;&lt;p&gt;Due to Lua&amp;rsquo;s goal of maintaining a lite and quick language, it relies on it&amp;rsquo;s own method of pattern matching rather than POSIX regex or even Perl regex.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pattern-matching-functions&#34;&gt;Pattern Matching Functions&lt;/h2&gt;&#xA;&lt;p&gt;There are four pattern matching functions within Lua&amp;rsquo;s standard string library. We&amp;rsquo;ve actually already seen two of them, &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;gsub&lt;/code&gt;. We will cover those in slightly more detail, as well as the other two, &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;gmatch&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 9</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-9/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;closures&#34;&gt;Closures&lt;/h1&gt;&#xA;&lt;p&gt;The first advanced topic, more of a clarification, let&amp;rsquo;s discuss the true nature of functions and how they&amp;rsquo;re treated in Lua.&lt;/p&gt;&#xA;&lt;p&gt;Any function inside Lua is a &lt;em&gt;first-class value&lt;/em&gt;, meaning they are treated with similar properties as strings and numbers. This implies that not only can we store functions inside of variables, but we can also pass functions as arguments.&lt;/p&gt;&#xA;&lt;p&gt;Another concept that gives Lua additional flexibility is &lt;em&gt;lexical scoping&lt;/em&gt;, meaning nested functions have automatic access to variables in their enclosing function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 8</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-8/</link>
      <pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;filling-in-some-gaps&#34;&gt;Filling in Some Gaps&lt;/h1&gt;&#xA;&lt;p&gt;A quick send off chapter for the basics of Lua. Let&amp;rsquo;s review some key components that are necessary, but maybe doesn&amp;rsquo;t need an entire chapter.&lt;/p&gt;&#xA;&lt;h2 id=&#34;local-variables-and-blocks&#34;&gt;Local Variables and Blocks&lt;/h2&gt;&#xA;&lt;p&gt;Quite simply, Lua makes all variables global by default. To specify a local variable, you have to call it with &lt;code&gt;local&lt;/code&gt; in front. Local variables only have a scope inside the block it was declared in.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s considered a good programming habit to use local variables when possible. It allows for less confusion with existing global variables, it&amp;rsquo;s cleaner, and also faster as access to local variables is faster than global variables.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 7</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-7/</link>
      <pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-external-world&#34;&gt;The External World&lt;/h1&gt;&#xA;&lt;p&gt;Lua is not the language for powerful performance with the exterior world. Even the text admits that most use of Input and Output are done through the host application or external libraries. Lua can handle basic file manipulation, which we&amp;rsquo;ll review now.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-simple-io-model&#34;&gt;The Simple I/O Model&lt;/h2&gt;&#xA;&lt;p&gt;Lua assumes the use of two streams, the &lt;em&gt;current input stream&lt;/em&gt; and the &lt;em&gt;current output stream&lt;/em&gt;. Using C terminology, the current input is default &lt;code&gt;stdin&lt;/code&gt; while output is &lt;code&gt;stdout&lt;/code&gt;. We can route either using &lt;code&gt;io.input&lt;/code&gt; and &lt;code&gt;io.output&lt;/code&gt;, respectively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-6/</link>
      <pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;functions&#34;&gt;Functions&lt;/h1&gt;&#xA;&lt;p&gt;Functions in Lua are the main method of abstracting out commands. We&amp;rsquo;ve been using functions the entire time. Like most other languages, we can accomplish direct tasks or solve complicated problems with repeatable calls.&lt;/p&gt;&#xA;&lt;p&gt;When calling functions, we use parenthesis, even when there are no parameters. The only time we can leave parenthesis out is when the argument is a literal string or a table constructor.&lt;/p&gt;&#xA;&lt;p&gt;A fun addition of Lua is the colon operator, which supports method like calling;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-5/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;tables&#34;&gt;Tables&lt;/h1&gt;&#xA;&lt;p&gt;Funnily enough, &lt;em&gt;tables&lt;/em&gt; are the only data structure natively in Lua. Tables can be used to represent basic arrays, sets, records, and others. We&amp;rsquo;ll see some of these created this chapter.&lt;/p&gt;&#xA;&lt;p&gt;By default, a table acts like a Python dictionary, or an associative array. They can contain any number or string value, &lt;strong&gt;except for nil&lt;/strong&gt;. The tables themselves are considered objects. Programs only manipulate references to a table; Lua will never create a hidden copy of your table.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 4</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-4/</link>
      <pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;strings&#34;&gt;Strings&lt;/h1&gt;&#xA;&lt;p&gt;A string is basically a representation of some text. They can be tiny, or huge, depending on how you&amp;rsquo;d like. We consider strings as a sequence of bytes, which we can go into more detail on later. For now, just know we can store any binary data as a string, or even Unicode representation.&lt;/p&gt;&#xA;&lt;p&gt;Any string we make in Lua is immutable, so we can&amp;rsquo;t alter it once it&amp;rsquo;s made. Any alterations would have to be made to an entirely new string. Not only that, but Lua also has &lt;em&gt;automatic memory management&lt;/em&gt;, so we don&amp;rsquo;t have to concern ourselves with allocation and deallocation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPL - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-6/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;data-types&#34;&gt;Data Types&lt;/h1&gt;&#xA;&lt;p&gt;What is a data type? &lt;em&gt;Data types&lt;/em&gt; are a collection of data values and set of pre-defined operations on those values. One major benefit of data typing is error catching. Another is documentation; we can tell a lot about about a program based on it&amp;rsquo;s data types and types used.&lt;/p&gt;&#xA;&lt;p&gt;The two most common structured (non-scalar) data types are arrays and records. Structured data types defined w/ type operators, or constructors (C uses brackets for arrays, asterisks for pointers). &lt;em&gt;Descriptors&lt;/em&gt; are the collection of the attributes of a variable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-3/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;numbers&#34;&gt;Numbers&lt;/h1&gt;&#xA;&lt;p&gt;Up until recently, all numbers in Lua were floating point numbers. Now, Lua past version 5.3, has two representations for numbers; 64-bit &lt;em&gt;integers&lt;/em&gt; and double-precision floating points, just &lt;em&gt;floats&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The Lua interpreter will allow the input of numbers in whatever format you want, and return it that way (unless specified not too).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 0.4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4.57e-3&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 0.00457&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3e12&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 300000000000.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5E+20&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 5e+20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you call &lt;code&gt;type()&lt;/code&gt; on any number, it will always return as a &lt;code&gt;number&lt;/code&gt; type. If you wanted to ensure you have an integer or float, you would have to specify it as a math type using &lt;code&gt;math.type()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 13</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-13/</link>
      <pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-13/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;where-to-go-next&#34;&gt;Where To Go Next&lt;/h1&gt;&#xA;&lt;p&gt;What a journey this has been! The next few sections are light on detail, and geared more towards exposure. Please feel free to dive into each of these topics on your own, as each is large enough to devote an entire chapter to.&lt;/p&gt;&#xA;&lt;h2 id=&#34;linear-regression&#34;&gt;Linear Regression&lt;/h2&gt;&#xA;&lt;p&gt;Given a data set of points, a line of best fit is generated to make predictions. This is one of the first topics covered when you begin learning about Machine Learning (due to how easy it is to set up), so you&amp;rsquo;re likely going to have first hand experience with this soon enough.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 12</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-12/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;k-nearest-neighbor&#34;&gt;K-Nearest Neighbor&lt;/h1&gt;&#xA;&lt;p&gt;K-nearest neighbor, or simply &lt;em&gt;KNN&lt;/em&gt;, is a classification algorithm. Whenever we are given a set of data, given the unique attributes of that dataset, we can plot it on a graph. Like most things from this text, it&amp;rsquo;s something best understood visually. Let&amp;rsquo;s use one of the most common examples, classifying fruit;&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/knn.png&#34;  alt=&#34;knn&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;In the above example, the orange marks indicate an orange, and the red marks indicate an apple. Now, we could use this graph to classify the next fruit I get. If I find a place to put it, we can look at that new point&amp;rsquo;s neighbors to classify what kind of fruit it must be.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-2/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;the-eight-queens-problem&#34;&gt;The Eight Queens Problem&lt;/h1&gt;&#xA;&lt;p&gt;Not a whole lot going on in this chapter, but they present a fun example of Lua&amp;rsquo;s capabilities. Walking through this code is worthwhile; I recommend giving it a read first, trying it out yourself, and changing some things around to get some different outcomes.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;-- board size&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- check whether position (n,c) is free from attacks&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isplaceok&lt;/span&gt; (a, n, c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- for each queen already placed...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- same column?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;   (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; n) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- same diagonal?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;   (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n) &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- other diagonal?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- place can be attacked&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;-- print a board&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printsolution&lt;/span&gt; (a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- for each row&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- and for each column&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;-- write &amp;#34;X&amp;#34; or &amp;#34;-&amp;#34; plus a space&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      io.write(a[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  io.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- add to board &amp;#39;a&amp;#39; all queens from &amp;#39;n&amp;#39; to &amp;#39;N&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addqueen&lt;/span&gt; (a, n)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- checks for all queens being placed&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printsolution(a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isplaceok(a, n, c) &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;    a[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;addqueen(a,n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- run the program&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addqueen({}, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exercises&#34;&gt;Exercises&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Modify the program so that it stops after printing the first solution&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;For me, I just put &lt;code&gt;os.exit()&lt;/code&gt; after the first call for &lt;code&gt;printsolution()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 10</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-10/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;greedy-algorithms&#34;&gt;Greedy Algorithms&lt;/h1&gt;&#xA;&lt;p&gt;A simpler concept than the last few we just tackled, &lt;em&gt;Greedy Algorithms&lt;/em&gt; are algorithms that pick the most optimal movement at each step. This seems vague, and it is! You are literally just picking the most &lt;em&gt;locally optimal solution&lt;/em&gt;, or the best choice, until you&amp;rsquo;re left with the &lt;em&gt;globally optimal solution&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;If you have a day where you&amp;rsquo;re trying to schedule classes &amp;amp; have as many as you possibly can, taking up your entire schedule. How would you plan your day? The major issue is that the classes times overlap; some start while others are still going, etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 11</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-11/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;dynamic-programming&#34;&gt;Dynamic Programming&lt;/h1&gt;&#xA;&lt;p&gt;The knapsack problem is coming back; this time with a vengeance. This time around, we have the same items, but we have a &lt;em&gt;&lt;strong&gt;four&lt;/strong&gt;&lt;/em&gt; pound limit in our bag. The Switch is $1500 and 1 pound, the P.C. is $3000 and 4 pounds, and the laptop is $2000 and 3 pounds.&lt;/p&gt;&#xA;&lt;p&gt;If we went with the most simple solution, we could just add up all possible combinations and pick the best. For 3 items, it&amp;rsquo;s no big deal. There are only 8 sets of possible combinations; easy to walk through. However, increasing from there is &lt;em&gt;incredibly&lt;/em&gt; slow ($2^n$), so past 10 items it begins to become massive amounts of processing power to produce an answer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 8</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-8/</link>
      <pubDate>Mon, 03 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;balanced-trees&#34;&gt;Balanced Trees&lt;/h1&gt;&#xA;&lt;p&gt;From on out, if an array or linked list isn&amp;rsquo;t enough, a tree should be our next structure to try. It&amp;rsquo;s a balancing act to choose between both, especially for run time. Binary Search Trees are great, especially for insertion.&lt;/p&gt;&#xA;&lt;p&gt;Remember, arrays take longer to insert than linked lists, but provide faster sorts. &lt;em&gt;Binary Search Trees&lt;/em&gt; optimize by providing a clear and easy to understand structure: a root node with values larger to their right, and smaller to the left. This makes searches incredibly fast.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 9</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-9/</link>
      <pubDate>Mon, 03 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;dijkstras-algorithm&#34;&gt;Dijkstra&amp;rsquo;s Algorithm&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Dijkstra&amp;rsquo;s Algorithm&lt;/em&gt; calculates the shortest path on a weighted graph. Unlike Breadth-first search, every step we take has some cost associated with it that we have to take into account. Just like last chapter, we can use graphs to help us get a better understanding:&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/weighted_graph.png&#34;  alt=&#34;weighted_graph&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;From what we know of BFS, we can assume it would probably return &amp;ldquo;Start -&amp;gt; A -&amp;gt; Finish&amp;rdquo; as the shortest path. without weights, that makes perfect sense. However, that has a cost of 7 (7 minutes). Isn&amp;rsquo;t there a cheaper way to get there? We&amp;rsquo;ll see in a second how Dijkstra&amp;rsquo;s algorithm calculates this for us.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 7</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-7/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;trees&#34;&gt;Trees&lt;/h1&gt;&#xA;&lt;p&gt;A subset of graphs, &lt;em&gt;trees&lt;/em&gt; are similarly made with nodes and edges and come in multiple different varieties. The first tree we are going to look at is the rooted tree, which is quite easy to visualize.&lt;/p&gt;&#xA;&lt;p&gt;Rooted trees must have one node that heads to all other nodes in the tree. Nodes have at most one parent, and the only node with no parent is known as the &lt;em&gt;root&lt;/em&gt; node. Nodes with no children are called &lt;em&gt;leaf&lt;/em&gt; nodes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;fourth-edition&#34;&gt;Fourth Edition&lt;/h2&gt;&#xA;&lt;h3 id=&#34;by-roberto-ierusalimschy&#34;&gt;By Roberto Ierusalimschy&lt;/h3&gt;&#xA;&lt;p&gt;Lua was initially designed to be integrated with software written in C/C++. It&amp;rsquo;s a small yet powerful language, and achieves this by not trying to do what C already does; perform well. Lua offers dynamic structures, zero redundancies, and a simpler time testing and debugging code.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s an &lt;em&gt;extensible&lt;/em&gt; language; things like dynamic typing, automatic memory management, and first-class functions make Lua a good pick for small to even medium/large projects. It can be sometimes known as a &lt;strong&gt;glue&lt;/strong&gt; language; not only holding things together, but also adapting and reshaping them in certain cases.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h1&gt;&#xA;&lt;p&gt;Just like any other language, standard output is a great first step. To do so on a windows machine, you have to download Lua much like you do Python, and run it via the command line. The fastest way I did this was through a command line installer &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;, and installed it with &lt;code&gt;scoop install lua&lt;/code&gt;. Then just use &lt;code&gt;lua&lt;/code&gt; to run your environment.&lt;/p&gt;&#xA;&lt;p&gt;A simple &lt;code&gt;print()&lt;/code&gt; will put anything on the screen:&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Basics</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;The Basics&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-6/</link>
      <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;breadth-first-search&#34;&gt;Breadth-First Search&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Graphs&lt;/em&gt; are the next data structure we are going to learn. &lt;strong&gt;Breadth-first search&lt;/strong&gt; is the first graphing algorithm we&amp;rsquo;ll take a look at, and will give us the ability to find the shortest distance between two points.&lt;/p&gt;&#xA;&lt;p&gt;There are many use cases for BFS:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spell checker&lt;/li&gt;&#xA;&lt;li&gt;Finding nearby doctors/hospitals&lt;/li&gt;&#xA;&lt;li&gt;Search engines&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Graphs come in many different forms. One of the easiest ways to visualize is with locations:&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/location_graph.png&#34;  alt=&#34;location_graph&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;The arrows are only pointing in one direction, indicating this is a start to finish graph. We start in the Bronx, and want to end in Long Island. How many possible paths do we have there?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-5/</link>
      <pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;hash-tables&#34;&gt;Hash Tables&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Hash tables&lt;/em&gt; are the more formal term for Python&amp;rsquo;s Dictionary structure; a key-value pairing of elements. &lt;em&gt;Hash functions&lt;/em&gt; are any function that does the mapping of a value to an input.&lt;/p&gt;&#xA;&lt;p&gt;Two main rules when implementing hash tables:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Pairings should be consistent&lt;/li&gt;&#xA;&lt;li&gt;Key&amp;rsquo;s should be unique&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The way these mappings work are complex, but essentially, when using Python, grabbing values from a dictionary is pretty fast and grants instant access.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 4</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-4/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;quicksort&#34;&gt;Quicksort&lt;/h1&gt;&#xA;&lt;h2 id=&#34;divide-and-conquer&#34;&gt;Divide and Conquer&lt;/h2&gt;&#xA;&lt;p&gt;To introduce another tool into our algorithm toolbox, we can introduce &lt;strong&gt;Divide &amp;amp; Conquer&lt;/strong&gt;, a useful method to recursively solve problems. Just like we learned in recursion, we need to identify our base case. Then we &lt;em&gt;divide&lt;/em&gt; our problem into smaller problems, until we eventually reach our base case.&lt;/p&gt;&#xA;&lt;p&gt;We can use the example of a plot of land:&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/plot_of_land_base.png&#34;  alt=&#34;plot_of_land_base&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;If we wanted to divide our land into perfectly even square boxes, making sure to use all available land with no land left out. How would you begin to figure this out?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-3/</link>
      <pubDate>Sat, 08 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;recursion&#34;&gt;Recursion&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Recursion&lt;/em&gt;, or the process of a sub-program calling itself, is a reoccurring concept in many different algorithms, and a foundational topic in computer science.&lt;/p&gt;&#xA;&lt;p&gt;It &lt;em&gt;is&lt;/em&gt; a hard topic to understand, but not super complicated. All code examples should be ran and written yourself to gain a full understanding.&lt;/p&gt;&#xA;&lt;p&gt;Pseudocode is another term you should familiarize yourself with, since it will be used both by this book and by myself. Pseudocode refers to the code or instruction of a given program written out in plain English, usually written before any code is ran to ensure the logic is sound.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-2/</link>
      <pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;selection-sort&#34;&gt;Selection Sort&lt;/h1&gt;&#xA;&lt;p&gt;Before going into choosing an array vs. a linked list, let&amp;rsquo;s do a quick lesson on memory.&lt;/p&gt;&#xA;&lt;p&gt;Think of your computers memory like a dresser full of small drawers. When you want to store a value, in a variable, that variable name is given an address, and whatever value is stored inside of it. Incredibly simple for single value variables- but what about multiple items? This is where picking an array or a linked list comes in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/</link>
      <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;second-edition&#34;&gt;Second Edition&lt;/h2&gt;&#xA;&lt;h3 id=&#34;by-aditya-y-bhargava&#34;&gt;By Aditya Y. Bhargava&lt;/h3&gt;&#xA;&lt;p&gt;Not only is this book incredibly easy to follow, but it requires very little in terms of prerequisites. The most you need to know is a basic understanding of Python and Algebra.&lt;/p&gt;&#xA;&lt;p&gt;This book is for people who already know how to code, hobbyists, visual learners, or anyone who wants to learn algorithms without a rigorous mathematical foundation.&lt;/p&gt;&#xA;&lt;p&gt;Code for all chapters can be found &lt;a href=&#34;https://github.com/egonSchiele/grokking_algorithms&#34;&gt;here&lt;/a&gt;. All examples are given in Python.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grokking Algorithms - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-1/</link>
      <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;introduction-to-algorithms&#34;&gt;Introduction to Algorithms&lt;/h1&gt;&#xA;&lt;p&gt;An &lt;em&gt;algorithm&lt;/em&gt; is simply a set of instructions or code designed in a way to accomplish a specific task. Tasks range from solving a math problem, to how to make decision given a specific scenario.&lt;/p&gt;&#xA;&lt;p&gt;All the algorithms featured in this text are fast, solve interesting problems, or even both. The text will introduce an algorithm, give an example, and discuss the running time in Big O (we&amp;rsquo;ll get back to this in a second).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CPL - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-5/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/concepts-of-programming-languages/cpl---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;names-bindings--scope&#34;&gt;Names, Bindings, &amp;amp; Scope&lt;/h1&gt;&#xA;&lt;p&gt;We should understand that in across programming languages, like when we use the term &lt;em&gt;identifier&lt;/em&gt; or &lt;em&gt;name&lt;/em&gt; (both are synonymous), it depends on the language we are using. Different languages have different naming conventions and rules or &lt;strong&gt;syntax&lt;/strong&gt;. We&amp;rsquo;ll look at variables in this chapter, and the different parts their made out of;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Name&lt;/li&gt;&#xA;&lt;li&gt;Address&lt;/li&gt;&#xA;&lt;li&gt;Value&lt;/li&gt;&#xA;&lt;li&gt;Type&lt;/li&gt;&#xA;&lt;li&gt;Lifetime&lt;/li&gt;&#xA;&lt;li&gt;Scope&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bindings&#34;&gt;Bindings&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;em&gt;binding&lt;/em&gt; is an association between an attribute and an entity, such as between a variable and it&amp;rsquo;s type or value, or between an operation and a symbol. We consider the moment where the binding takes place appropriately as &lt;em&gt;binding time&lt;/em&gt;. Before any variable can be reference, it must be bound to a data type (which will be covered in the next chapter).&lt;/p&gt;</description>
    </item>
    <item>
      <title>20 Textbooks</title>
      <link>https://mrpointing.com/posts/20-textbooks/</link>
      <pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/posts/20-textbooks/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;For 2025, I want to read and document my notes on Obsidian for 20 different textbooks. I acquired most of these throughout 2024 (thank you Humble Bundle!), and I thought why not put my money where my mouth is and actually use all the books I&amp;rsquo;ve purchased. Below is a list that I&amp;rsquo;ll keep updated, as well as a link to their inevitable notes.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 1. &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/&#34;&gt;Learning Git&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2. &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---preface--chapter-1/&#34;&gt;Deep Learning - Math&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 3. &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/grokking-algorithms/grokking-algorithms---chapter-1/&#34;&gt;Grokking Algorithms&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 4. &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/programming-in-lua/the-basics/programming-in-lua---chapter-1/&#34;&gt;Programming in Lua&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 5. &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/learning-modern-linux/learning-modern-linux---chapter-1/&#34;&gt;Learning Modern Linux&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 6. Real World Python&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 7. Impractical Python Projects&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 8. Foundations of Information Security&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 9. Penetration Testing&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 10. Python for DevOps&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 11. Fast API&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 12. The Shape of Data&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 13. Deep Learning: A Visual Approach&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 14. Practical Linux Systems Administration&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 15. Efficient Linux at the Command Line&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 16. Linux Basics for Hackers&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 17. Cyberjutsu&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 18. Network Programmability &amp;amp; Automation&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 19. Docker Up &amp;amp; Running&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 20. Learning DevSecOps&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Deep Learning - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-3/</link>
      <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;probability-and-information-theory&#34;&gt;Probability and Information Theory&lt;/h1&gt;&#xA;&lt;p&gt;When we encounter situations where the output is unknown, &lt;em&gt;probability theory&lt;/em&gt; gives us a mathematical framework to deal with these statements. They use the term &amp;ldquo;quantifying uncertainty&amp;rdquo; which I like a lot. The connection between AI applications and probability come from two places; algorithms often use probability theory to give AI it&amp;rsquo;s reasoning abilities, and probability with statistics are used to grade and categorize the behavior of the AI models/agents.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 12</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-12/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;We&amp;rsquo;re on our final chapter, and almost through with the rainbow project. Before we move onto our last lesson, let&amp;rsquo;s review where we&amp;rsquo;re at;&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/repo_status_12.png&#34;  alt=&#34;repo_status_12&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;An important distinction we need to make up front first is that in the past, we have introduced and used &lt;code&gt;pull&lt;/code&gt;. While that is involved in what we&amp;rsquo;re about to learn, we&amp;rsquo;re going to go more specifically into &lt;em&gt;pull requests&lt;/em&gt;, or a request to collaborate on work via a hosting service. You can integrate them using merging or rebasing, but mostly you&amp;rsquo;ll be using merging, so you&amp;rsquo;ll often hear the term &amp;ldquo;merge a pull request.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 11</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-11/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;rebasing&#34;&gt;Rebasing&lt;/h1&gt;&#xA;&lt;p&gt;We&amp;rsquo;re over ten chapters into this text; let&amp;rsquo;s get a quick recap of the status of our repos:&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/repo_status_11.png&#34;  alt=&#34;repo_status_11&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;One thing to notice about the repos up until this point is that up to the &lt;code&gt;green&lt;/code&gt; commit, our project&amp;rsquo;s history was linear. Some people prefer to keep their history this way, and want to avoid branching pathways, like we had to do for the three-way merges we had to make.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 10</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-10/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;merge-conflicts&#34;&gt;Merge Conflicts&lt;/h1&gt;&#xA;&lt;p&gt;In our last chapter, we were able to pull off our first three way merge without any issues. This time, we&amp;rsquo;re about to experience some merge conflicts, and what to do when we encounter them. You can view the end of &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/&#34;&gt;Chapter 9&lt;/a&gt; to see the visualization of where we&amp;rsquo;re at; we&amp;rsquo;ve got the &lt;code&gt;M1&lt;/code&gt; commit as the latest in all three repos.&lt;/p&gt;&#xA;&lt;p&gt;One important distinction we need to make about this experiment we&amp;rsquo;re going to do versus the last chapter is the type of changes we&amp;rsquo;re going to make. In the last chapter, we had changes between &lt;em&gt;different&lt;/em&gt; files. Our &lt;code&gt;friend-rainbow&lt;/code&gt; edited the &lt;code&gt;othercolors.txt&lt;/code&gt; file, while our &lt;code&gt;rainbow&lt;/code&gt; repo only edited the &lt;code&gt;rainbowcolors.txt&lt;/code&gt; file. This time around, we&amp;rsquo;re going to make changes to the same file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 9</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/</link>
      <pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;three-way-merges&#34;&gt;Three Way Merges&lt;/h1&gt;&#xA;&lt;p&gt;Every merge we&amp;rsquo;ve done so far has been a fast-forward merge. In this chapter, we&amp;rsquo;re going to take a look at performing our first three way merge, and also get some hands on experience with how editing our files out of order will affect our work flow. First, let&amp;rsquo;s simplify our visualization and update it to reflect where we left off in the last chapter;&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;https://mrpointing.com/images/three_way_simple.png&#34;  alt=&#34;three_way_simple&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;Again, three way merges are important and necessary to understand. To reiterate &lt;a href=&#34;https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/&#34;&gt;Chapter 5&lt;/a&gt;, three way merges are for branches whose paths have diverged at some point. There&amp;rsquo;s a great example there about exactly how a three-way merge would work with a good example; be sure to review.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 8</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-8/</link>
      <pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;cloning-and-fetching&#34;&gt;Cloning and Fetching&lt;/h1&gt;&#xA;&lt;p&gt;As it stands, we have just pushed our local repo onto our remote repo, and updated it with all currently created branches. For this chapter, we&amp;rsquo;re going to start working through what it would be like if you&amp;rsquo;d like to start working on your project with a friend or coworker through an essential core concept of Git called &lt;em&gt;cloning&lt;/em&gt;, or copying a remote repository.&lt;/p&gt;&#xA;&lt;h2 id=&#34;cloning-a-remote-repository&#34;&gt;Cloning a Remote Repository&lt;/h2&gt;&#xA;&lt;p&gt;Like we know for the beginning of this text, Git is a major player in collaborative coding. The below example returns to our Book Project for another example of how we would use it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deep Learning - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-2/</link>
      <pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;linear-algebra&#34;&gt;Linear Algebra&lt;/h1&gt;&#xA;&lt;p&gt;This book covers all topics of linear algebra that are important to deep learning, not necessarily all topics within Linear Algebra. For a text more focused in linear algebra, see &lt;a href=&#34;https://cosmathclub.wordpress.com/wp-content/uploads/2014/10/georgi-shilov-linear-algebra4.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;scalars-vectors-matrices-and-tensors&#34;&gt;Scalars, Vectors, Matrices, and Tensors&lt;/h2&gt;&#xA;&lt;h3 id=&#34;scalars&#34;&gt;Scalars&lt;/h3&gt;&#xA;&lt;p&gt;Single numbers, usually denoted by a lowercase variable name, and introduced with some information on the number.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Ex.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Let $s \in R$ be the slope of the line for a &lt;em&gt;real-valued&lt;/em&gt; scalar&lt;/li&gt;&#xA;&lt;li&gt;Let $n \in N$ be the number of units for a &lt;em&gt;natural number&lt;/em&gt; scalar&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;vectors&#34;&gt;Vectors&lt;/h3&gt;&#xA;&lt;p&gt;An ordered array of numbers, obtainable via the index position of the number in the array. Usually denoted with a lowercase variable name in bold. The elements start counting at 1, and are usually subscript attached to the name of the vector to show each element.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deep Learning - Preface</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---preface--chapter-1/</link>
      <pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/deep-learning/deep-learning---preface--chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;preface&#34;&gt;Preface&lt;/h1&gt;&#xA;&lt;h2 id=&#34;mit-press-online-edition&#34;&gt;MIT Press Online Edition&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ian-goodfellow-yoshua-bengio-and-aaron-courville&#34;&gt;Ian Goodfellow, Yoshua Bengio, and Aaron Courville&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.deeplearningbook.org/&#34;&gt;Link&lt;/a&gt; to the book.&lt;/p&gt;&#xA;&lt;h1 id=&#34;chapter-1&#34;&gt;Chapter 1&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This book is intended to prepare you for concepts and theory used in Machine Learning and Artificial Intelligence, more specifically &lt;em&gt;deep learning&lt;/em&gt;, or the multi-layered stacked concepts that make up the intelligence of an AI model.&lt;/p&gt;&#xA;&lt;p&gt;Like most textbooks, it goes into the why of AI, and what they do best; solving problems that humans are generally not good at. AI was designed to tackle these problems, problems that are generally abstract or formal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 7</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-7/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;creating-and-pushing-to-a-remote-repository&#34;&gt;Creating and Pushing to a Remote Repository&lt;/h1&gt;&#xA;&lt;p&gt;Currently, we have three commits, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;orange&lt;/code&gt;, and &lt;code&gt;yellow&lt;/code&gt;. We have two branches, both of them (&lt;code&gt;head&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt;) pointing at our &lt;code&gt;yellow&lt;/code&gt; commit, and &lt;code&gt;HEAD&lt;/code&gt; is attached to &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Now that we&amp;rsquo;re beginning to talk about remote repositories, it&amp;rsquo;s important to understand how these projects are started. We&amp;rsquo;ve been working on our Rainbow project, which we know is a &lt;em&gt;local&lt;/em&gt; repository.&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s our first way; to start from a local repository. We already looked at how to start a local repository, so there are only two more steps: Create a remote repository using your service of choice, then &lt;em&gt;push&lt;/em&gt; your local repository to your remote repository. We can use the &lt;code&gt;git push&lt;/code&gt; command to make this happen.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Appendix A</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/appendix-a/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/appendix-a/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;summations&#34;&gt;Summations&lt;/h1&gt;&#xA;&lt;p&gt;As we know, we analyze algorithms by their running time. When algorithms use for or while loops (iterative structures), the running time is expressed as the &lt;strong&gt;sum of all the times spent on execution&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summation-formulas-and-properties&#34;&gt;Summation Formulas and Properties&lt;/h2&gt;&#xA;&lt;p&gt;Say we have $a_1,a_2,&amp;hellip;a_n$ numbers, what we call a &lt;em&gt;sequence&lt;/em&gt;. While $n$ is a non-negative integer, we can say the sum of that set is $\sum_{k=1}^{n}a_k$.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If $n=0$, value is 0.&lt;/li&gt;&#xA;&lt;li&gt;The value of a finite series is always well-defined&lt;/li&gt;&#xA;&lt;li&gt;Order terms are added in doesn&amp;rsquo;t matter (what di I mean with this? who knows)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;We might also have an infinite sequence, the infinite sum could be written as $\sum_{k=1}^{\infty}a_k$, or $lim_{n-&amp;gt;\infty}\sum_{k=1}^{n}a_k$.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Algorithms</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/</guid>
      <description>&lt;p&gt;Created: July 17 2024&#xA;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;fourth-edition&#34;&gt;Fourth Edition&lt;/h2&gt;&#xA;&lt;h3 id=&#34;thomas-h-cormen-charles-e-leiserson-ronald-l-rivest-clifford-stein&#34;&gt;Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein&lt;/h3&gt;&#xA;&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;&#xA;&lt;p&gt;Algorithms are everywhere, apart of almost everything we do, and every decision we make. They are part of most if not all tech stacks used today.&lt;/p&gt;&#xA;&lt;p&gt;Each chapter in this book will present an algorithm, an application area for some algorithm, or some other related topic.&lt;/p&gt;&#xA;&lt;h3 id=&#34;for-teaching-purposes&#34;&gt;For teaching purposes&lt;/h3&gt;&#xA;&lt;p&gt;The less complex the audience, the less complex chapters you need. You can pick and choose what you want to take from this, being so comprehensive of a text. Even a section instead of a whole chapter is completely viable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-3/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;characterizing-running-times&#34;&gt;Characterizing Running Times&lt;/h1&gt;&#xA;&lt;p&gt;As we saw in Chapter 2, order of growth gives us the ability to quantify the effectiveness of our algorithms, and compare them.&lt;/p&gt;&#xA;&lt;p&gt;Us studying these algorithms at large enough input sizes is us studying the &lt;strong&gt;asymptotic efficiency&lt;/strong&gt; of an algorithm. We can say an algorithm that is &amp;ldquo;&lt;em&gt;more asymptotically efficient&lt;/em&gt;&amp;rdquo; is the better choice for most cases, save small inputs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;o-notation-theta-notation-and-omega-notation&#34;&gt;O-notation, $\Theta$-notation, and $\Omega$-notation&lt;/h2&gt;&#xA;&lt;p&gt;We already met $\Theta$-notation in chapter 2; this is a type of asymptotic notation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-6/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;hosting-services-and-authentication&#34;&gt;Hosting Services and Authentication&lt;/h1&gt;&#xA;&lt;p&gt;Everything we&amp;rsquo;ve done up until this point has been local. Even though some of the things we&amp;rsquo;ve looked at incentive&amp;rsquo;s working in a group, if your repository is local no one else will have access to it. This is where public repositories come into play.&lt;/p&gt;&#xA;&lt;p&gt;There are three main players in the repository game; GitHub, GitLab, and Bitbucket. I personally only have experience with GitHub, so we&amp;rsquo;ll be focusing on that going forward.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;merging&#34;&gt;Merging&lt;/h1&gt;&#xA;&lt;p&gt;We last looked at how branches can help a team work on a project together, without losing or any conflicting progress. Now for the logical next step- combining the work together into one branch. We call this &lt;strong&gt;merging&lt;/strong&gt;, or the combining of work from different branches.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;em&gt;source branch&lt;/em&gt; is the merging branch, or where the work is coming from. The &lt;em&gt;target branch&lt;/em&gt; is the branch you&amp;rsquo;re merging into. The only branch altered in a merge is the target branch.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 4</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-4/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;branches&#34;&gt;Branches&lt;/h1&gt;&#xA;&lt;p&gt;We last left off with our first commit in our &lt;code&gt;rainbow&lt;/code&gt; project. Remember, we can also use &lt;code&gt;git status&lt;/code&gt; to get an update on the status of our repository. Before we get too deep into defining what a &lt;em&gt;branch&lt;/em&gt; is, let&amp;rsquo;s explore why they&amp;rsquo;re used. That might make it a bit easier to understand.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-do-we-use-branches&#34;&gt;Why Do We Use Branches?&lt;/h2&gt;&#xA;&lt;p&gt;Branches help us differentiate changes in a given project. They can be made for an number of reasons, but can be boiled down to two main points:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 3</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-3/</link>
      <pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;making--a-commit&#34;&gt;Making  a Commit&lt;/h1&gt;&#xA;&lt;p&gt;We left off with our first text file in our working directory, our &lt;code&gt;rainbowcolors.txt&lt;/code&gt; file. It has one sentence in it, and we can check that by either opening it or running &lt;code&gt;cat rainbowcolors.txt&lt;/code&gt; in the working directory. We can see that we haven&amp;rsquo;t made any commits yet, and we only have one untracked file. You can run &lt;code&gt;git status&lt;/code&gt; to gather all of this info.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-do-we-make-commits&#34;&gt;Why Do We Make Commits?&lt;/h2&gt;&#xA;&lt;p&gt;Commits, like we learned, are snapshots of our project at a certain point of time. We obviously need to keep track of our code for numerous reasons. We could list out edge cases all day, the point is we will eventually need them for some reason.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-2/</link>
      <pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;local-repositories&#34;&gt;Local Repositories&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introducing-and-initializing-a-local-repository&#34;&gt;Introducing and Initializing a Local Repository&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;em&gt;repository&lt;/em&gt; (or a repo) is the container of a project version controlled by Git. There are two; &lt;em&gt;local&lt;/em&gt; and &lt;em&gt;remote&lt;/em&gt;. Local is stored on your computer, while remote is obviously hosted remotely (someone else&amp;rsquo;s computer).&lt;/p&gt;&#xA;&lt;p&gt;GitHub is one of the largest platforms and the one I&amp;rsquo;m most familiar with. GitLab and Bitbucket also exist, but I haven&amp;rsquo;t used them myself. Chapter 6 onward deals with this; for now, we can worry about it later.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;git-and-the-command-line&#34;&gt;Git and the Command Line&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-is-git&#34;&gt;What is Git?&lt;/h2&gt;&#xA;&lt;p&gt;Git is a &lt;em&gt;version control&lt;/em&gt; system that keeps track of the changes done to a project or directory. When you edit a file, Git records what was added and removed. If files are added or removed, Git has it&amp;rsquo;s eyes on it (if you&amp;rsquo;re configuring it correctly).&lt;/p&gt;&#xA;&lt;p&gt;Git was originally created by Linus Torvalds, the creator of Linux. Meant to be used at the command line, it is clearly more complex then a simply saving a file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/learning-git/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/learning-git/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;first-edition&#34;&gt;First Edition&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Anna Skoulikari&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;I got this textbook as a part of a DevOps Humble Bundle for a ridiculous price.&lt;/p&gt;&#xA;&lt;p&gt;I have been using Git more seriously this year, so it makes sense to go through this first. It also is apart of the &lt;a href=&#34;https://mrpointing.com/notes/computer-science/ai-engineer-roadmap/&#34;&gt;AI Engineer Roadmap&lt;/a&gt;, so even more of a reason to start.&lt;/p&gt;&#xA;&lt;h2 id=&#34;who-the-textbook-is-for&#34;&gt;Who the Textbook is For&lt;/h2&gt;&#xA;&lt;p&gt;Anyone who wants to learn Git, and geared towards individuals who have basic technical skills, or those who need to work alongside those who use Git.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 2</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-2/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;getting-sorted&#34;&gt;Getting Sorted&lt;/h2&gt;&#xA;&lt;p&gt;This chapter is meant to familiarize yourself with the framework used throughout the book.&lt;/p&gt;&#xA;&lt;h2 id=&#34;21-insertion-sort&#34;&gt;2.1 Insertion Sort&lt;/h2&gt;&#xA;&lt;p&gt;Solves a sorting problem (obviously).&lt;/p&gt;&#xA;&lt;p&gt;The numbers to be sorted are known as &lt;em&gt;keys&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The input comes in the form of an array with &lt;code&gt;n&lt;/code&gt; elements.&lt;/p&gt;&#xA;&lt;p&gt;A reason to sort is often because those keys are associated with other data, &lt;em&gt;Satellite data&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Key + Satellite = &lt;em&gt;Record&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;We can think of a spreadsheet, with student records having many pieces of data. Any piece can be the key; whatever the key is, is how the record is sorted.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;the-role-of-algorithms-in-computing&#34;&gt;The Role of Algorithms in Computing&lt;/h2&gt;&#xA;&lt;h2 id=&#34;11-algorithms&#34;&gt;1.1 Algorithms&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Algorithm:&lt;/strong&gt; Any well defined computational procedure that takes some value, or set of values, as &lt;em&gt;input&lt;/em&gt; and produces some value, or set of values, as &lt;em&gt;output&lt;/em&gt; in a finite amount of time.&lt;/p&gt;&#xA;&lt;p&gt;We often say algorithms help us solve computational problems.&lt;/p&gt;&#xA;&lt;p&gt;We can define a sorting algorithm like so:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; A sequence of &lt;em&gt;n&lt;/em&gt; numbers, &lt;code&gt;{a_1, a_2, ... a_n}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Part 1</title>
      <link>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/</link>
      <pubDate>Wed, 17 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/textbooks/introduction-to-algorithms/part-1/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Notes on Part 1.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
