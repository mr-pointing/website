<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Mr. Pointing</title>
    <link>http://localhost:1313/tags/git/</link>
    <description>Recent content in Git on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 12 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Git - Chapter 12</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-12/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;We&amp;rsquo;re on our final chapter, and almost through with the rainbow project. Before we move onto our last lesson, let&amp;rsquo;s review where we&amp;rsquo;re at;&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;http://localhost:1313/images/repo_status_12.png&#34;  alt=&#34;repo_status_12&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;An important distinction we need to make up front first is that in the past, we have introduced and used &lt;code&gt;pull&lt;/code&gt;. While that is involved in what we&amp;rsquo;re about to learn, we&amp;rsquo;re going to go more specifically into &lt;em&gt;pull requests&lt;/em&gt;, or a request to collaborate on work via a hosting service. You can integrate them using merging or rebasing, but mostly you&amp;rsquo;ll be using merging, so you&amp;rsquo;ll often hear the term &amp;ldquo;merge a pull request.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 11</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-11/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;rebasing&#34;&gt;Rebasing&lt;/h1&gt;&#xA;&lt;p&gt;We&amp;rsquo;re over ten chapters into this text; let&amp;rsquo;s get a quick recap of the status of our repos:&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;http://localhost:1313/images/repo_status_11.png&#34;  alt=&#34;repo_status_11&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;One thing to notice about the repos up until this point is that up to the &lt;code&gt;green&lt;/code&gt; commit, our project&amp;rsquo;s history was linear. Some people prefer to keep their history this way, and want to avoid branching pathways, like we had to do for the three-way merges we had to make.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 10</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-10/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;merge-conflicts&#34;&gt;Merge Conflicts&lt;/h1&gt;&#xA;&lt;p&gt;In our last chapter, we were able to pull off our first three way merge without any issues. This time, we&amp;rsquo;re about to experience some merge conflicts, and what to do when we encounter them. You can view the end of &lt;a href=&#34;http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/&#34;&gt;Chapter 9&lt;/a&gt; to see the visualization of where we&amp;rsquo;re at; we&amp;rsquo;ve got the &lt;code&gt;M1&lt;/code&gt; commit as the latest in all three repos.&lt;/p&gt;&#xA;&lt;p&gt;One important distinction we need to make about this experiment we&amp;rsquo;re going to do versus the last chapter is the type of changes we&amp;rsquo;re going to make. In the last chapter, we had changes between &lt;em&gt;different&lt;/em&gt; files. Our &lt;code&gt;friend-rainbow&lt;/code&gt; edited the &lt;code&gt;othercolors.txt&lt;/code&gt; file, while our &lt;code&gt;rainbow&lt;/code&gt; repo only edited the &lt;code&gt;rainbowcolors.txt&lt;/code&gt; file. This time around, we&amp;rsquo;re going to make changes to the same file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 9</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/</link>
      <pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;three-way-merges&#34;&gt;Three Way Merges&lt;/h1&gt;&#xA;&lt;p&gt;Every merge we&amp;rsquo;ve done so far has been a fast-forward merge. In this chapter, we&amp;rsquo;re going to take a look at performing our first three way merge, and also get some hands on experience with how editing our files out of order will affect our work flow. First, let&amp;rsquo;s simplify our visualization and update it to reflect where we left off in the last chapter;&lt;/p&gt;&#xA;&#xA;    &lt;img src=&#34;http://localhost:1313/images/three_way_simple.png&#34;  alt=&#34;three_way_simple&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;&#xA;&#xA;&#xA;&lt;p&gt;Again, three way merges are important and necessary to understand. To reiterate &lt;a href=&#34;http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/&#34;&gt;Chapter 5&lt;/a&gt;, three way merges are for branches whose paths have diverged at some point. There&amp;rsquo;s a great example there about exactly how a three-way merge would work with a good example; be sure to review.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 8</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-8/</link>
      <pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;cloning-and-fetching&#34;&gt;Cloning and Fetching&lt;/h1&gt;&#xA;&lt;p&gt;As it stands, we have just pushed our local repo onto our remote repo, and updated it with all currently created branches. For this chapter, we&amp;rsquo;re going to start working through what it would be like if you&amp;rsquo;d like to start working on your project with a friend or coworker through an essential core concept of Git called &lt;em&gt;cloning&lt;/em&gt;, or copying a remote repository.&lt;/p&gt;&#xA;&lt;h2 id=&#34;cloning-a-remote-repository&#34;&gt;Cloning a Remote Repository&lt;/h2&gt;&#xA;&lt;p&gt;Like we know for the beginning of this text, Git is a major player in collaborative coding. The below example returns to our Book Project for another example of how we would use it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 7</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-7/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;creating-and-pushing-to-a-remote-repository&#34;&gt;Creating and Pushing to a Remote Repository&lt;/h1&gt;&#xA;&lt;p&gt;Currently, we have three commits, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;orange&lt;/code&gt;, and &lt;code&gt;yellow&lt;/code&gt;. We have two branches, both of them (&lt;code&gt;head&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt;) pointing at our &lt;code&gt;yellow&lt;/code&gt; commit, and &lt;code&gt;HEAD&lt;/code&gt; is attached to &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Now that we&amp;rsquo;re beginning to talk about remote repositories, it&amp;rsquo;s important to understand how these projects are started. We&amp;rsquo;ve been working on our Rainbow project, which we know is a &lt;em&gt;local&lt;/em&gt; repository.&lt;/p&gt;&#xA;&lt;p&gt;That&amp;rsquo;s our first way; to start from a local repository. We already looked at how to start a local repository, so there are only two more steps: Create a remote repository using your service of choice, then &lt;em&gt;push&lt;/em&gt; your local repository to your remote repository. We can use the &lt;code&gt;git push&lt;/code&gt; command to make this happen.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-6/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;hosting-services-and-authentication&#34;&gt;Hosting Services and Authentication&lt;/h1&gt;&#xA;&lt;p&gt;Everything we&amp;rsquo;ve done up until this point has been local. Even though some of the things we&amp;rsquo;ve looked at incentive&amp;rsquo;s working in a group, if your repository is local no one else will have access to it. This is where public repositories come into play.&lt;/p&gt;&#xA;&lt;p&gt;There are three main players in the repository game; GitHub, GitLab, and Bitbucket. I personally only have experience with GitHub, so we&amp;rsquo;ll be focusing on that going forward.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 5</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;merging&#34;&gt;Merging&lt;/h1&gt;&#xA;&lt;p&gt;We last looked at how branches can help a team work on a project together, without losing or any conflicting progress. Now for the logical next step- combining the work together into one branch. We call this &lt;strong&gt;merging&lt;/strong&gt;, or the combining of work from different branches.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;em&gt;source branch&lt;/em&gt; is the merging branch, or where the work is coming from. The &lt;em&gt;target branch&lt;/em&gt; is the branch you&amp;rsquo;re merging into. The only branch altered in a merge is the target branch.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 4</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-4/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;branches&#34;&gt;Branches&lt;/h1&gt;&#xA;&lt;p&gt;We last left off with our first commit in our &lt;code&gt;rainbow&lt;/code&gt; project. Remember, we can also use &lt;code&gt;git status&lt;/code&gt; to get an update on the status of our repository. Before we get too deep into defining what a &lt;em&gt;branch&lt;/em&gt; is, let&amp;rsquo;s explore why they&amp;rsquo;re used. That might make it a bit easier to understand.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-do-we-use-branches&#34;&gt;Why Do We Use Branches?&lt;/h2&gt;&#xA;&lt;p&gt;Branches help us differentiate changes in a given project. They can be made for an number of reasons, but can be boiled down to two main points:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 3</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-3/</link>
      <pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;making--a-commit&#34;&gt;Making  a Commit&lt;/h1&gt;&#xA;&lt;p&gt;We left off with our first text file in our working directory, our &lt;code&gt;rainbowcolors.txt&lt;/code&gt; file. It has one sentence in it, and we can check that by either opening it or running &lt;code&gt;cat rainbowcolors.txt&lt;/code&gt; in the working directory. We can see that we haven&amp;rsquo;t made any commits yet, and we only have one untracked file. You can run &lt;code&gt;git status&lt;/code&gt; to gather all of this info.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-do-we-make-commits&#34;&gt;Why Do We Make Commits?&lt;/h2&gt;&#xA;&lt;p&gt;Commits, like we learned, are snapshots of our project at a certain point of time. We obviously need to keep track of our code for numerous reasons. We could list out edge cases all day, the point is we will eventually need them for some reason.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 2</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-2/</link>
      <pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;local-repositories&#34;&gt;Local Repositories&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introducing-and-initializing-a-local-repository&#34;&gt;Introducing and Initializing a Local Repository&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;em&gt;repository&lt;/em&gt; (or a repo) is the container of a project version controlled by Git. There are two; &lt;em&gt;local&lt;/em&gt; and &lt;em&gt;remote&lt;/em&gt;. Local is stored on your computer, while remote is obviously hosted remotely (someone else&amp;rsquo;s computer).&lt;/p&gt;&#xA;&lt;p&gt;GitHub is one of the largest platforms and the one I&amp;rsquo;m most familiar with. GitLab and Bitbucket also exist, but I haven&amp;rsquo;t used them myself. Chapter 6 onward deals with this; for now, we can worry about it later.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git - Chapter 1</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/learning-git---chapter-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;git-and-the-command-line&#34;&gt;Git and the Command Line&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-is-git&#34;&gt;What is Git?&lt;/h2&gt;&#xA;&lt;p&gt;Git is a &lt;em&gt;version control&lt;/em&gt; system that keeps track of the changes done to a project or directory. When you edit a file, Git records what was added and removed. If files are added or removed, Git has it&amp;rsquo;s eyes on it (if you&amp;rsquo;re configuring it correctly).&lt;/p&gt;&#xA;&lt;p&gt;Git was originally created by Linus Torvalds, the creator of Linux. Meant to be used at the command line, it is clearly more complex then a simply saving a file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Learning Git</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/learning-git/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/learning-git/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;first-edition&#34;&gt;First Edition&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Anna Skoulikari&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;I got this textbook as a part of a DevOps Humble Bundle for a ridiculous price.&lt;/p&gt;&#xA;&lt;p&gt;I have been using Git more seriously this year, so it makes sense to go through this first. It also is apart of the &lt;a href=&#34;http://localhost:1313/notes/computer-science/ai-engineer-roadmap/&#34;&gt;AI Engineer Roadmap&lt;/a&gt;, so even more of a reason to start.&lt;/p&gt;&#xA;&lt;h2 id=&#34;who-the-textbook-is-for&#34;&gt;Who the Textbook is For&lt;/h2&gt;&#xA;&lt;p&gt;Anyone who wants to learn Git, and geared towards individuals who have basic technical skills, or those who need to work alongside those who use Git.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
