<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Mr. Pointing</title><link>http://localhost:1313/tags/python/</link><description>Recent content in Python on Mr. Pointing</description><generator>Hugo</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 19 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>How To Use @dataclass in Python</title><link>http://localhost:1313/posts/computer-science/videos/how-to-use-@dataclass-in-python/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/videos/how-to-use-@dataclass-in-python/</guid><description>Modified: July 19 2024
Link to video.
Can be faster than creating a regular class.
How classes are typically written:
class Fruit: def __init__(self, name: str, calories: float): self.name = name self.calories = calories banana = Fruit(&amp;#39;Banana&amp;#39;, 10) We can do the same with a dataclass:
from dataclasses import dataclass @dataclass class Fruit: name: str calories: float banana = Fruit(&amp;#39;Banana&amp;#39;, 10) With the first example, we wouldn&amp;rsquo;t be able to print it nicely without writing a __str__ representation, but here, we can print out banana and get Fruit(name='Banana', calories=10), which looks much nicer.</description></item><item><title>Lython</title><link>http://localhost:1313/posts/projects/lython/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/projects/lython/</guid><description>Modified: July 19 2024
Lython is my final project for my Masters program. I based it off an idea I had of giving my students a filtered AI, which branched off into editing ChatGPT with prompt filtering. Seeing that alone was particularly easy, I looked into implementing RAG, which works kind of.
Github
I&amp;rsquo;d like to continue working on my project as an actual tool to use during class. I&amp;rsquo;d like to be able to launch it to a production server, so my students can access it during class.</description></item><item><title>The Ultimate Guide to Writing Functions</title><link>http://localhost:1313/posts/computer-science/videos/the-ultimate-guide-to-writing-functions/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/videos/the-ultimate-guide-to-writing-functions/</guid><description>Modified: July 23 2024
Link to video.
Tip 1: Do one thing, and do it well A function should perform a single task.
Think about the level of abstraction; the function should be on the same level of abstraction.
He brings up two examples, one of a function that iterates through a collection, checking each value against a matcher to return if one exists. He says this has two levels of abstraction; the iteration, and the comparison.</description></item><item><title>You Can Do Really Cool Things With Functions in Python</title><link>http://localhost:1313/posts/computer-science/videos/you-can-do-really-cool-things-with-functions-in-python/</link><pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/videos/you-can-do-really-cool-things-with-functions-in-python/</guid><description>Modified: July 15 2024
Link to video.
This video goes over some uncommon ways to use functions in Python. It uses the following code as a base:
&amp;#34;&amp;#34;&amp;#34; main.py &amp;#34;&amp;#34;&amp;#34; import statistics from dataclasses import dataclass from typing import Protocol from exchange import Exchange class TradingStrategy(Protocol): &amp;#34;&amp;#34;&amp;#34;Trading strategy that decides whether to buy or sell, given a list of prices&amp;#34;&amp;#34;&amp;#34; def should_buy(self, prices: list[int]) -&amp;gt; bool: raise NotImplementedError() def should_sell(self, prices: list[int]) -&amp;gt; bool: raise NotImplementedError() class AverageTradingStrategy: &amp;#34;&amp;#34;&amp;#34;Trading strategy based on price averages.</description></item><item><title>Blinker</title><link>http://localhost:1313/posts/computer-science/flask-notes/blinker/</link><pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/flask-notes/blinker/</guid><description>Modified: July 31 2024
Link to documentation.</description></item><item><title>Click</title><link>http://localhost:1313/posts/computer-science/flask-notes/click/</link><pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/flask-notes/click/</guid><description>Modified: July 31 2024
Link to the documentation.</description></item><item><title>Werkzeug</title><link>http://localhost:1313/posts/computer-science/flask-notes/werkzeug/</link><pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/flask-notes/werkzeug/</guid><description>Modified: July 31 2024
Link to documentation.
First of all, what is WSGI?
Web Server Gateway Interface, a specification that describes how a web server communicates with web applications, and how web applications can be chained together to process one request.</description></item><item><title>The Python Tutorial Notes - Chapter 12</title><link>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-12/</link><pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-12/</guid><description>Modified: July 19 2024
Virtual Environments and Packages 12.1 Introduction Often, you&amp;rsquo;re going to need tools and modules that aren&amp;rsquo;t included with Python by default, or in your standard library. One Python install might not suffice for most applications.
To circumnavigate this, we create virtual environments, that act as self-contained directories with an installation of Python, and any number of packages.
12.2 Creating Virtual Environments We can use the venv module to create and manage our own virtual environment.</description></item><item><title>PyCharm IDE Features</title><link>http://localhost:1313/posts/computer-science/pycharm-ide-features/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/pycharm-ide-features/</guid><description>Modified: July 23 2024
Get Acquainted with PyCharm The project view is one of the main tool windows, containing the project directory, external libraries, and scratch files. You can also open it with Alt 1. The Python interpreter is easily viewable in the status bar in the bottom right. You can run, debug, or other option on the top right of the window. You can also press Shift F10. We got an unexpected error in our code, featured below.</description></item><item><title>The Python Tutorial Notes - Chapter 11</title><link>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-11/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-11/</guid><description>Modified: July 19 2024
The Standard Library - Part 2 7/9/2024
The second part here will go over more advanced, less common modules that nevertheless, exist.
11.1 Output Formatting reprlib is an appropriately named library containing a version of repr() modified for abbreviated displays of large or deeply nested containers:
&amp;gt;&amp;gt;&amp;gt; import reprlib &amp;gt;&amp;gt;&amp;gt; reprlib.repr(set(&amp;#39;supercalafragalisticexpialidocious&amp;#39;)) &amp;#34;{&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;,...&amp;#34; pprint is a module with more sophisticated control over printing both built-in and user defined objects.</description></item><item><title>Raspberry Pi NAS</title><link>http://localhost:1313/posts/projects/raspberry-pi-nas/</link><pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/projects/raspberry-pi-nas/</guid><description>Modified: July 14 2024
Link</description></item><item><title>The Python Tutorial Notes - Chapter 10</title><link>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-10/</link><pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-10/</guid><description>Modified: July 19 2024
A Brief Tour of the Standard Library 7/4/2024
10.1 Operating System Interface The os module provides functions for interacting with operating systems:
&amp;gt;&amp;gt;&amp;gt; import os &amp;gt;&amp;gt;&amp;gt; os.getcwd() # returns the working directory &amp;#39;C:\\Python312&amp;#39; &amp;gt;&amp;gt;&amp;gt; os.chdir(&amp;#39;/server/accesslogs&amp;#39;) # change working directory &amp;gt;&amp;gt;&amp;gt; os.system(&amp;#39;mkdir today&amp;#39;) # run the command mkdir in the system shell 0 Never use from os import *. It&amp;rsquo;s not good practice to not do this regardless, but it will specifically keep os.</description></item><item><title>Formatting Percentages</title><link>http://localhost:1313/posts/computer-science/formatting-percentages/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/formatting-percentages/</guid><description>Modified: July 03 2024
7/3/2024
Taken from this article.
Often in projects, we want to format our large float types as smaller percentages.
There are three main ways to do this:
Rounding and Float/String Types: round() takes two parameters: a value and a number to round too. Then, we can use a little complicated string statement.
&amp;gt;&amp;gt;&amp;gt; number = 0.8839133112 &amp;gt;&amp;gt;&amp;gt; n2 = round(number, 4) &amp;gt;&amp;gt;&amp;gt; print(n2) 0.886 &amp;gt;&amp;gt;&amp;gt; print(str(n2 * 100) + &amp;#39;%&amp;#39;) Format() Alternatively, if that seems a bit complicated, we can just format() instead.</description></item><item><title>The Python Tutorial Notes - Chapter 9</title><link>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-9/</link><pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-9/</guid><description>Modified: July 19 2024
Classes 6/28/2024
Classes combine data storage and functionality into one package. When you make a new class, you are making a new type of object. A new instance, or occurrence of that type are able to be made using function call of the class.
A class is made up of attributes and methods defined by the classes definition.
Python classes follow closely to other Object Oriented Programming languages classes in the following ways:</description></item><item><title>Flask</title><link>http://localhost:1313/posts/computer-science/flask-notes/flask/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/flask-notes/flask/</guid><description>Modified: August 02 2024
Link to documentation.
Flask is a framework to create applications via Python. It makes web based applications rather simple.
Starting from the here, the installation page.
Installation Python Version Python version should be up to date. Flask supports 3.8 and newer.
Dependencies The following are installed automatically when installing Flask:
Werkzeug uses WSGI, the standard Python interface between applications and servers. Jinja is a template language that renders the pages your application serves.</description></item><item><title>The Python Tutorial Notes - Chapter 8</title><link>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-8/</link><pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-8/</guid><description>Modified: July 19 2024
Errors and Exceptions 6/22/2024
There are two distinguishable types of errors: syntax errors and exceptions.
8.1 Syntax Syntax errors (or parsing errors) are errors involving the actual use of the language.
&amp;gt;&amp;gt;&amp;gt; while True print(&amp;#39;Hello World&amp;#39;) File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1 while True print(&amp;#39;Hello world&amp;#39;) ^^^^^ SyntaxError: invalid syntax In the example above, the while statement is missing the : required to use it.
8.2 Exceptions Even if code is syntactically correct, an error may occur when attempting to execute it.</description></item><item><title>Designing a RESTful API</title><link>http://localhost:1313/posts/projects/designing-a-restful-api/</link><pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/projects/designing-a-restful-api/</guid><description>Modified: August 02 2024
Watched this video to take some notes on what REST is.
API: Application Programming Interface, is how to computers can communicate with each other.
Client sends a Request to the server, server sends a response back to the client.
REST, or Representational State Transfer, is the most popular way to communicate with these web servers.
REST is actually a set of rules and standards. Any API that follows the REST rules is known as a RESTful API.</description></item><item><title>NumPy</title><link>http://localhost:1313/posts/computer-science/numpy/</link><pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/numpy/</guid><description>Modified: June 20 2024
Link to documentation</description></item><item><title>The Python Tutorial Notes - Chapter 7</title><link>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-7/</link><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-7/</guid><description>Modified: July 19 2024
Input and Output 6/18/2024
There are three main ways to present output in Python; expression statements (not using print()), using print(), and using write() which writes something into an existing or new file.
7.1 Fancier Output Formatting At any point in the command line, I can just send out some text without any print() commands and get back what I just sent in. That&amp;rsquo;s an expression statement.</description></item><item><title>The Python Tutorial Notes - Chapter 6</title><link>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-6/</link><pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-6/</guid><description>Modified: July 19 2024
Modules 6/15/2024
Obviously, using local instances are not viable for long time development is not realistic. This is why we write scripts.
Python has the ability to writes scripts, or another method called modules. Definitions from modules can be imported into your instance of Python.
Main is also given a definition here: the collection of variables that you have access to in a script executed at the top level and in calculator mode.</description></item><item><title>Vinyl Visualizer</title><link>http://localhost:1313/posts/projects/vinyl-visualizer/</link><pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/projects/vinyl-visualizer/</guid><description>Modified: June 22 2024
A passion project I&amp;rsquo;d like to make. It would be my first time using hardware and software together.
To start, I&amp;rsquo;d like to grab a raspberry pi with a screen and audio in so it can display the record cover, the title, artist, and duration that updates as the song goes on.
I first asked ChatGPT 3.5 for advice.
I also asked ChatGPT 4o and got a little better/pointed advice.</description></item><item><title>The Python Tutorial Notes - Chapter 5</title><link>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-5/</link><pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-5/</guid><description>Modified: July 19 2024
Data Structures 6/10/2024
5.1 More on Lists Methods for Lists:
list.append(x) Adds an item to the end of the list Equivalent to a[len(a):] = [x] list.extend(iterable) Extend the list by appending all items from an iterable list.insert(i, x) Insert an item into a given position, where i is the index location and x is the value list.remove(x) Remove the first item from the list whose value is equal to x, ValueError if no such item list.</description></item><item><title>The Python Tutorial Notes - Chapter 4</title><link>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-4/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-4/</guid><description>Modified: July 19 2024
Control Flow Tools 6/5/2024
The while loop was seen in the previous Fibonacci Sequence example.
4.1 if Statements &amp;gt;&amp;gt;&amp;gt; x = int(input(&amp;#34;Please enter an integer: &amp;#34;)) Please enter an integer: 42 &amp;gt;&amp;gt;&amp;gt; if x &amp;lt; 0: &amp;gt;&amp;gt;&amp;gt; x = 0 &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Negative so now it&amp;#39;s zero!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; elif x == 0: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Zero!!!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; elif x == 1: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;UNO!!!!!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; else: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Nice B)&amp;#34;) Nice B) Very basic; all you need is an if statement.</description></item><item><title>The Python Tutorial Notes - Chapter 1, 2, and 3</title><link>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</guid><description>Modified: July 19 2024
Link to source
6/2/2024
In order to get a better understanding of Python as a whole language, I&amp;rsquo;m going to document and take notes as I go through the tutorial. I mostly would like to improve as a programmer, and eventually get a software job at Google or something.
Introduction What is Python?
Python is an easy to learn, powerful programming language. Featuring efficient high-level data structures as well as a simple but effective approach to object-oriented programming.</description></item></channel></rss>