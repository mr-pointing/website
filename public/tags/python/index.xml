<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Mr. Pointing</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 02 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generate Parentheses</title>
      <link>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/generate-parentheses/</link>
      <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/generate-parentheses/</guid>
      <description>Question: You are given an integer n. Return all well-formed parentheses strings that you can generate with n pairs of parentheses.&#xA;Example 1:&#xA;Input: n = 1 Output: [&amp;#34;()&amp;#34;] Example 2:&#xA;Input: n = 3 Output: [&amp;#34;((()))&amp;#34;,&amp;#34;(()())&amp;#34;,&amp;#34;(())()&amp;#34;,&amp;#34;()(())&amp;#34;,&amp;#34;()()()&amp;#34;] How to Solve:&#xA;This one was rough. It was hard to imagine exactly how to get all of the different configurations of the parenthesis. I started out with a basic for loop to create the most basic version, or the first from the examples;</description>
    </item>
    <item>
      <title>Geometry Managers</title>
      <link>http://localhost:1313/notes/computer-science/python/tkinter/geometry-managers/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/tkinter/geometry-managers/</guid>
      <description>Controlling Layouts with Geometry Managers Tkinter has three geometry managers, or methods that define how the content of your app is structured. .pack() is just one of them; we also could use .place() or .grid(). You can only use one at a time, so let&amp;rsquo;s discover the instances in which we&amp;rsquo;d use them.&#xA;.pack() When using .pack(), you&amp;rsquo;re actually using a packing algorithm in order to place the widgets on screen.</description>
    </item>
    <item>
      <title>Interactive Applications</title>
      <link>http://localhost:1313/notes/computer-science/python/tkinter/interactive-applications/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/tkinter/interactive-applications/</guid>
      <description>The above has taught you how to make things appear inside your window. This will only get you so far; the things in your window need to do things. Let&amp;rsquo;s learn about events.&#xA;Using Events and Event Handlers Going back to when we learned about the window.mainloop(), the loop this starts is known as the event loop. During this, the window will wait for some response. All we have to code is the events that we want to happen in response to these events, otherwise known as event handlers.</description>
    </item>
    <item>
      <title>Widgets</title>
      <link>http://localhost:1313/notes/computer-science/python/tkinter/widgets/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/tkinter/widgets/</guid>
      <description>Below are a few different types of widgets;&#xA;Label: displays text Button: displays a button that can have text and do action commands Entry: displays a text input form for a single line Text: displays a text input form for multi-line entry Frame: a rectangular area for widgets or padding between widgets There are many more widgets, as well as themed widgets, which are more updated versions of classic widgets, but we don&amp;rsquo;t need to get into that today.</description>
    </item>
    <item>
      <title>Valid Parenthesis</title>
      <link>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/valid-parenthesis/</link>
      <pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/valid-parenthesis/</guid>
      <description>Question: You are given a string s consisting of the following characters: &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;.&#xA;The input string s is valid if and only if:&#xA;Every open bracket is closed by the same type of close bracket. Open brackets are closed in the correct order. Every close bracket has a corresponding open bracket of the same type. Return true if s is a valid string, and false otherwise.</description>
    </item>
    <item>
      <title>Valid Sudoku</title>
      <link>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/valid-sudoku/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/valid-sudoku/</guid>
      <description>Question: You are given a a 9 x 9 Sudoku board board. A Sudoku board is valid if the following rules are followed:&#xA;Each row must contain the digits 1-9 without duplicates. Each column must contain the digits 1-9 without duplicates. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without duplicates. Return true if the Sudoku board is valid, otherwise return false</description>
    </item>
    <item>
      <title>Importing CSV to SQL Table Using Python</title>
      <link>http://localhost:1313/notes/computer-science/sql/importing-csv-to-sql-table-using-python/</link>
      <pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/importing-csv-to-sql-table-using-python/</guid>
      <description>From Stack Overflow:&#xA;Using SQLite import csv, sqlite3 con = sqlite3.connect(&amp;#34;:memory:&amp;#34;) # change to &amp;#39;sqlite:///your_filename.db&amp;#39; cur = con.cursor() cur.execute(&amp;#34;CREATE TABLE t (col1, col2);&amp;#34;) # use your column names here with open(&amp;#39;data.csv&amp;#39;,&amp;#39;r&amp;#39;) as fin: # `with` statement available in 2.5+ # csv.DictReader uses first line in file for column headings by default dr = csv.DictReader(fin) # comma is default delimiter to_db = [(i[&amp;#39;col1&amp;#39;], i[&amp;#39;col2&amp;#39;]) for i in dr] cur.executemany(&amp;#34;INSERT INTO t (col1, col2) VALUES (?</description>
    </item>
    <item>
      <title>Day 30</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-30/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-30/</guid>
      <description>Goal Finish Portfolio prototype Accomplishments I was able to finish a basic prototype for the portfolio page but it kind of sucks.&#xA;I wanted to figure out an easy way to get the Instagram feed for the artist, but working with Meta&amp;rsquo;s API is almost as sucky as my portfolio page. So I honestly have my work cut out for me.&#xA;This has been a crazy 30 days. Technically more, but who&amp;rsquo;s counting?</description>
    </item>
    <item>
      <title>Day 31 - Summary</title>
      <link>http://localhost:1313/posts/day-31---summary/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/day-31---summary/</guid>
      <description>I can&amp;rsquo;t believe I worked on this project for 30 days. The growth has been fantastic, and I should be proud of all that I was able to accomplish. If this is true, why do I feel a pit in my stomach when I think about this project? If I did such a good job, why do I feel like such crap?&#xA;To be honest, the more I worked on this the more I understood why it takes teams of people to produce applications.</description>
    </item>
    <item>
      <title>Day 29</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-29/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-29/</guid>
      <description>Goal Complete the manual entry form Accomplishments FINALLY completed the manual entry form!! I&amp;rsquo;ve been building this out for a while and I was nervous to commit to it since there were a few more moving parts than just a regular request/booking. Happy to say it&amp;rsquo;s done and it&amp;rsquo;s pretty close to completion. The next and hopefully last big hurdle is the creation of the portfolio page, and ending with the testing of the hosting and such.</description>
    </item>
    <item>
      <title>Day 28</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-28/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-28/</guid>
      <description>Goal Work on email formatting Finish search for bookings Look into pagination Accomplishments I finished the searching for the bookings table, and tweaked the functions around a bit. This time, instead of creating a second search function, I made a new parameter table that takes in the type of table you want to search from. This way, I can just create a second view for the page to view the bookings.</description>
    </item>
    <item>
      <title>Day 27</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-27/</link>
      <pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-27/</guid>
      <description>Goal Accomplishments I got the search feature working! I honestly was pretty shocked at how easy it was to implement after I got past the initial hurdle of creating the correct SQL query.&#xA;Problems or Issues I had to change the SQL query that grabbed the search results to format it with the variables before trying to execute it. I think because I was using a question mark placeholder for both column and search term, it was messing up the column value with quotation marks.</description>
    </item>
    <item>
      <title>Day 26</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-26/</link>
      <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-26/</guid>
      <description>Goal Accomplishments I was able to get the progress from yesterday into a bit more of a tangible solution. Currently, in order to update the SQL table of when a booking has been confirmed, is when the embedded widget passes an event scheduled action, it will notify the window which will in turn send the scheduled events information to a Flask view. From there, I need to make another call using the events information unique identifier to retrieve the start time.</description>
    </item>
    <item>
      <title>Day 25</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-25/</link>
      <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-25/</guid>
      <description>Goal Accomplishments I worked for a bit yesterday and a lot today, so I&amp;rsquo;ll count them as one. I was able to implement some more font choices so we can narrow that down sooner rather than later, and was also able to work on the color scheme a bit.&#xA;Problems or Issues Today was a daunting experience. I was finally able to get the API connection with Calendly going, just to realize I&amp;rsquo;m getting into more unfamiliar territory.</description>
    </item>
    <item>
      <title>Day 24</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-24/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-24/</guid>
      <description>Goal Get current bookings page working Look into filtering requests/bookings Don&amp;rsquo;t want to have to refresh the page, but it doesn&amp;rsquo;t need to constantly update as the user is typing. Results should only appear upon hitting enter. Accomplishments Current bookings was a lot easier now that I&amp;rsquo;m using a template for all my pages, and it was a breeze to create a new blueprint for the page since it&amp;rsquo;s even less code than the requests page, due to their not needing to handle any post requests.</description>
    </item>
    <item>
      <title>Day 23</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-23/</link>
      <pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-23/</guid>
      <description>Goal Coming back from a few days to think about a game plan for the finish line, I think I can get something out and working by the end of these 30 days. Maybe.&#xA;Finish applying base.html to all pages Make the admin index page for current requests page for current bookings page for manual application form Finish CSS for pages Accomplishments Got a ton done today, and worked for probably over 2 hours.</description>
    </item>
    <item>
      <title>Day 22</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-22/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-4/day-22/</guid>
      <description>Goal Start working on HTML/CSS changes Finish reformatting HTML with base.html Accomplishments Surprisingly, got a decent amount done in just under an hour. I was able to complete the base.html file, and worked out some of the kinks of the formatting. It doesn&amp;rsquo;t look exactly like the Figma yet, but I want to make sure all of the HTML files have the base.html extension first.&#xA;Problems or Issues Next: Day 23</description>
    </item>
    <item>
      <title>Day 21</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-21/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-21/</guid>
      <description>Goal Get Calendly to prefill info for booking link Accomplishments I really thought todays goal was going to be harder, but it actually ended up being pretty easy. All I had to do was edit the URL and pass in some parameters. I thought maybe I&amp;rsquo;d have to set up a developer account and use JSON/JavaScript, but honestly it seems fine without it?&#xA;Problems or Issues Next: Day 22</description>
    </item>
    <item>
      <title>Day 20</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-20/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-20/</guid>
      <description>Goal Correctly sync the booking form to choose which type of session Caret drop down menu &amp;amp; link to appropriate function Small Tattoo Session Medium Tattoo Session Large Tattoo Session Small Tattoo Reschedule Medium Tattoo Reschedule Tattoo Touchup Accomplishments Got a ton done today; walked through the Figma with Big Boss and was able to get going on the layout. Promising results on that front shortly.&#xA;I was able to get the quick note I made down below finished pretty quick, and glad I did since that will help out immensely when I start building out the search/filter feature.</description>
    </item>
    <item>
      <title>Day 19</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-19/</link>
      <pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-19/</guid>
      <description>Goal Finish the Figma for site Mess around on Calendly Accomplishments Finished the preliminary wireframe for the site, handed off to big boss So another rejection as far as my current layout for the site. I was able to get started and get an actual calendar embedded into the site which worked nicely. I now have a new slew of issues to worry about;&#xA;There are 3 types of bookings to account for Normal tattoo sessions, three types Small (&amp;gt;2hrs) Medium (2 - 5hrs) Large (5+hrs) Reschedules Small (2hrs) Medium (3hrs30) Touchups (1hr30) Change Admin&amp;rsquo;s booking page to choose which type of session Booking should generate and save a link to it in the SQLite database for use later Artist can send via dm with info already filled out Figure out how to give Calendly forms pre-saved information Problems or Issues Next: Day 20</description>
    </item>
    <item>
      <title>Day 18</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-18/</link>
      <pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-18/</guid>
      <description>Goal Goals for today are quite simple; complete the look of the website on Figma, so the boss can come in and make design changes before I start committing any time towards building in HTML/CSS. I&amp;rsquo;m building out a basic skeleton for her to build off of, and I should be able to finish that today.&#xA;As far as the project is coming along, since we are moving away from using Full Calendar, I think we&amp;rsquo;re going to just integrate with Calendly.</description>
    </item>
    <item>
      <title>Day 17</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-17/</link>
      <pubDate>Tue, 17 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-17/</guid>
      <description>Goal First day back!&#xA;I was sick for maybe 2, 3 weeks? Probably the worst cold I&amp;rsquo;ve had in my life, and of course it happened in the midst of my 30 day challenge. I almost tried to work through it, but I couldn&amp;rsquo;t focus at all and had to stop completely. Instead of calling it quits though, I&amp;rsquo;m going to start Day 17 over as a new day, and try and get back up on the saddle.</description>
    </item>
    <item>
      <title>Day 16</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-16/</link>
      <pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-16/</guid>
      <description>Goal Honestly, I might be taking a small break today? I mostly wanted to get the ball rolling this week but after yesterday, I think I might have to settle for Calendly integration before trying to re-create their services. The Twilio account rejected my verification again, and after trying to build a working calendar system through JavaScript, I realized two things; I suck at JavaScript and don&amp;rsquo;t know what I&amp;rsquo;m doing, and Twilio has everything I&amp;rsquo;m looking for plus a little more.</description>
    </item>
    <item>
      <title>Day 15</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-15/</link>
      <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-3/day-15/</guid>
      <description>Goal From Yesterday:&#xA;Set up text message for request Client Artist Integrate with Google Calendar For Today:&#xA;Change calendar to full month and change the formatting Had a talk with the boss, and she wants it to look a little bit different than the week-hour grid I had going on. Instead, I need each date to be clickable when available, and when clicked, needs to open up a little window in front with the available times.</description>
    </item>
    <item>
      <title>Day 14</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-14/</link>
      <pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-14/</guid>
      <description>Goal From Yesterday:&#xA;Set up text message for request Client Artist For Today:&#xA;Refactor for Yagmail instead of Gmail&amp;rsquo;s Oauth2 set up Refactor requests for asking for consent for text messages Create JSON file for artist schedule Integrate with Google Calendar? (maybe way down the line) Make a confirm booking button that checks to make sure there is no issue with timing Accomplishments Getting a lot done today; more so with understanding how the calendar features work for Fullcalendar.</description>
    </item>
    <item>
      <title>Day 13</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-13/</link>
      <pubDate>Fri, 13 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-13/</guid>
      <description>Goal From Yesterday:&#xA;Accomplishments I looked more into Twilio and it seems like they have their own API that can be used to make sure it&amp;rsquo;s compliant with their rules. I&amp;rsquo;m going to try editing in a checkbox option that allows the user to check yes before submitting the application. If they don&amp;rsquo;t say yes, the database save will not include the phone number, save it as None, and text message reminders won&amp;rsquo;t be sent to them.</description>
    </item>
    <item>
      <title>Day 12</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-12/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-12/</guid>
      <description>Goal From Yesterday:&#xA;Set up text message for request Client Artist For Today:&#xA;Booking Python file Figure out how Google Calendar works Accomplishments Had a good talk with the boss about the structuring of the site so far. I had misunderstood the need for a &amp;ldquo;fast form&amp;rdquo;, it really should just be a button that sends a booking form that she fills out the request details and customer information for.</description>
    </item>
    <item>
      <title>Day 11</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-11/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-11/</guid>
      <description>Goal From Yesterday:&#xA;Set up text message for request Client Artist Accept Request &amp;amp; Booking Feature &amp;ldquo;Accept&amp;rdquo; button HTML site Booking HTML site Booking Python file (refactor requests to make recs_books?) Accomplishments I got a Twilio phone number waiting to be verified, added the booking form and all the logic to get there, as well as fixed a small issue where requests were stuck and would re-send after refreshing the page.</description>
    </item>
    <item>
      <title>Day 10</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-10/</link>
      <pubDate>Tue, 10 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-10/</guid>
      <description>Goal From Yesterday:&#xA;Set up text message for request Client Artist For Today:&#xA;Accept Request &amp;amp; Booking Feature &amp;ldquo;Accept&amp;rdquo; button HTML site Booking HTML site Booking Python file (refactor requests to make recs_books?) Accomplishments Set up the text messaging API account.&#xA;Problems or Issues Next: Day 11</description>
    </item>
    <item>
      <title>Day 9</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-9/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-9/</guid>
      <description>Goal From Last Week:&#xA;Format the Email back to client For Today:&#xA;Set up email to Client w/ request form Set up email to Admin saying there&amp;rsquo;s a new request w/ client info Set up text messages for both Accomplishments I was able to get a decent chunk of things today for today. One thing that I&amp;rsquo;m trying to to stress is the prettification of all of my elements. I got the emails working, but they look like crap.</description>
    </item>
    <item>
      <title>Day 8</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-8/</link>
      <pubDate>Sun, 08 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-2/day-8/</guid>
      <description>Goal From Yesterday:&#xA;Format the Email back to client Accomplishments Problems or Issues Tattooed today, so maybe today will be nice free day?&#xA;Next: Day 9</description>
    </item>
    <item>
      <title>Day 7</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-7/</link>
      <pubDate>Sat, 07 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-7/</guid>
      <description>Goal From Yesterday:&#xA;Format the Email back to client Accomplishments I didn&amp;rsquo;t get to work on this project much this weekend, and honestly I feel kind of okay about it? I am going to be putting off the AI roadmap on hold until this month is over to see if that helps with my workflow. This week I tried to do both and it left me really wanting to pick one over the other, so perhaps I&amp;rsquo;ll just leave the AI roadmap stuff on the back burner while I work hard on the next few days.</description>
    </item>
    <item>
      <title>Day 6</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-6/</link>
      <pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-6/</guid>
      <description>Goal From yesterday:&#xA;Test email sending/receiving Format the Email back to client Accomplishments Today was a very busy work day, so I really didn&amp;rsquo;t get that far on anything. The biggest thing I did was I was able to locate the right documentation to help out with the next few steps. Otherwise, not a whole lot got done today.&#xA;Problems or Issues When running the Gmail quickstart code, I neglected to realize you would need to change the SCOPE list variable to allow more authorizations.</description>
    </item>
    <item>
      <title>Day 5</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-5/</link>
      <pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-5/</guid>
      <description>Goal From yesterday:&#xA;View Request Page (Admin page for Sarah) Work on getting pictures to display Test and integrate email to client &amp;amp; Sarah w/ request form Format the Email back to client Accomplishments Work Time: 1hr&#xA;So far so okay. I was able to finally get the images working, but I had to rely on ChatGPT for help since none of the videos I watched were able to really help.</description>
    </item>
    <item>
      <title>Day 4</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-4/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-4/</guid>
      <description>Goal From yesterday:&#xA;View Request Page (Admin page for Sarah) Work on the JOIN to bring client info along with each request Work on getting pictures to display Test and integrate email to client &amp;amp; Sarah w/ request form Format the Email back to client Accomplishments Work Time: 1hr 20&#xA;Not my best day, but to be expected. Today wasn&amp;rsquo;t one of my best days, so I shouldn&amp;rsquo;t be too hard on myself.</description>
    </item>
    <item>
      <title>Day 3</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-3/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-3/</guid>
      <description>Goal From yesterday:&#xA;View Request Page (Admin page for Sarah) Python file (Flask View) HTML file (formatting) Work on the JOIN to bring client info along with each request For today:&#xA;Test and integrate email to client &amp;amp; Sarah w/ request form Format the Email back to client Accomplishments Work Time: 2 hours&#xA;While I didn&amp;rsquo;t get that much done as far as my lists are concerned, I was able to get a lot done today.</description>
    </item>
    <item>
      <title>Sorting Techniques</title>
      <link>http://localhost:1313/notes/computer-science/python/advanced-python/sorting-techniques/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/advanced-python/sorting-techniques/</guid>
      <description>Link to article&#xA;Sorting Basics There are two basic ways we can ascending sort (organize from least to greatest on value) built into Python, .sort() on a list object, and the sorted() function, which takes in any iterable sequence.&#xA;sorted() will actually return the sequence in order, while .sort() is more of a step to be done, and will actually return None.&#xA;&amp;gt;&amp;gt;&amp;gt; a = [3, 6, 1, 4] &amp;gt;&amp;gt;&amp;gt; sorted(a) [1, 3, 4, 6] &amp;gt;&amp;gt;&amp;gt; a.</description>
    </item>
    <item>
      <title>Day 1</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-1/</link>
      <pubDate>Sat, 30 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-1/</guid>
      <description>Goal Write down a step-by-step initial guide to follow to help track/maintain progress Complete the initial booking form Set up the SQLite database/schema Accomplishments Work Time: 1hr 45&#xA;So today was the first day and I feel like I was able to make some pretty decent progress. I created a really simple step-by-step guide to keep me on track, and to make the scope less creepy. I also was able to get a working schema for my tables, and I currently have user for Sarah, client for all people who book, and a requests for initial requests.</description>
    </item>
    <item>
      <title>Day 2</title>
      <link>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-2/</link>
      <pubDate>Sat, 30 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/30-day-coding-challenge/week-1/day-2/</guid>
      <description>Goal From yesterday:&#xA;Complete the initial booking form For today:&#xA;Allow Images to be stored in SQLite database View Request Page (Admin page for Sarah) Accomplishments Work Time: 1hr 30&#xA;I got a lot done today, or at least it feels like it. First up, I messed around with the CSS Cursor gave me and tried to play with the setting up of the text entry fields for the requests.</description>
    </item>
    <item>
      <title>13. Roman to Integer</title>
      <link>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/13.-roman-to-integer/</link>
      <pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/13.-roman-to-integer/</guid>
      <description>Question: Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.&#xA;Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000&#xA;For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.</description>
    </item>
    <item>
      <title>Decorators</title>
      <link>http://localhost:1313/notes/computer-science/python/advanced-python/decorators/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/advanced-python/decorators/</guid>
      <description>What is a Decorator? Essentially, a decorator, is a wrapping for function. It allows you to do something before and/or after a function is called. Let&amp;rsquo;s look at a super basic example;&#xA;def uppercase_word(function): def wrapper(): func = function() # call the function to get the return value make_upper = func.upper() return make_upper return wrapper Now, let&amp;rsquo;s say we make a really basic function to print text out;&#xA;def say_word(): return &amp;#34;say wooooord&amp;#34; We could print it out like this:</description>
    </item>
    <item>
      <title>Inheritance</title>
      <link>http://localhost:1313/notes/computer-science/python/advanced-python/inheritance/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/advanced-python/inheritance/</guid>
      <description>According to the AI road map I&amp;rsquo;ve been following, this and the rest of the concepts in this folder are meant to be considered more advanced concepts. Some of these have been covered in the Python Tutorial, some have not. This is the starting note, but I won&amp;rsquo;t link these concepts together unless necessary, as the concepts aren&amp;rsquo;t explicitly tied together.&#xA;What is Inheritance? Inheritance is the concept that you can build a new class based off of, or derived from, an existing class.</description>
    </item>
    <item>
      <title>Flask&#39;s Tutorial</title>
      <link>http://localhost:1313/notes/computer-science/python/flask-notes/flasks-tutorial/</link>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/flask-notes/flasks-tutorial/</guid>
      <description>Link to tutorial.&#xA;I was really hesitant to start this note, since I basically ran through this tutorial once already to start and complete my final project, Lython. However, since I&amp;rsquo;m starting Sarah&amp;rsquo;s site, and I want to test out a bunch of features/really get to understand Flask, let&amp;rsquo;s go through it once more.&#xA;Last time, I did a combination of going through the tutorial, then making changes as I saw fit.</description>
    </item>
    <item>
      <title>Your First App</title>
      <link>http://localhost:1313/notes/computer-science/python/tkinter/your-first-app/</link>
      <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/tkinter/your-first-app/</guid>
      <description>Link to the tutorial.&#xA;What makes Tkinter nice is that it&amp;rsquo;s a built-in library, meaning it should come with all versions of Python 3.12. If you&amp;rsquo;re using Ubuntu (like me) for this example you will have to install it but it doesn&amp;rsquo;t take long at all (sudo apt-get install python3-tk).&#xA;Creating your first window is incredibly simple. The following code will get you up and running in no time:</description>
    </item>
    <item>
      <title>SQLite Tutorial</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlite-tutorial/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlite-tutorial/</guid>
      <description>What is a Database? Essentially, a database is a place in which your data and tables exists, organized in a way described by the database schema.&#xA;There are many database platforms that use SQL as their main language; MySQL, NoSQL, Microsoft SQL Server, just to name a few. The one we&amp;rsquo;re going to work with due to it&amp;rsquo;s ease of use and lightweight installation is SQLite (appropriately named).&#xA;Creating Our First Database Connection We can actually use SQLite directly inside of PyCharm, our IDE.</description>
    </item>
    <item>
      <title>Products of Array Not Including Self</title>
      <link>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/products-of-array-not-including-self/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/products-of-array-not-including-self/</guid>
      <description>Question: Given an integer array nums, return an array output where output[i] is the product of all the elements of nums except nums[i].&#xA;How to Solve: I originally thought I had an awesome solution, but it only passed with the first test case that didn&amp;rsquo;t have zeros:&#xA;def productExceptSelf(self, nums: List[int]) -&amp;gt; List[int]: total = nums[0] * nums[1] ans = [] i = 2 while i &amp;lt; len(nums): total *= nums[i] i += 1 for num in nums: if num !</description>
    </item>
    <item>
      <title>Exploratory Data Analysis with Pandas</title>
      <link>http://localhost:1313/notes/computer-science/python/exploratory-data-analysis-with-pandas/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/exploratory-data-analysis-with-pandas/</guid>
      <description>Link to article</description>
    </item>
    <item>
      <title>NumPy Quickstart</title>
      <link>http://localhost:1313/notes/computer-science/python/numpy-notes/numpy-quickstart/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/numpy-notes/numpy-quickstart/</guid>
      <description>Link to documentation.&#xA;Prerequisites What should you know to get the most out of this lesson? At the very least, the fundamentals of Python. You should also refer to this to get a fundamental understanding of the reasons why we&amp;rsquo;d want to use ndarray in the first place.&#xA;What are we doing this lesson then? We&amp;rsquo;re going to learn about what one, two, and $n$ dimensional arrays actually are, some algebra operations on ndarray objects without for loops, and even more advanced things like what axis and shape properties are.</description>
    </item>
    <item>
      <title>Contains Duplicate</title>
      <link>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/contains-duplicate/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/contains-duplicate/</guid>
      <description>Question: Given an integer array nums, return true if any value appears more than once in the array, otherwise return false.&#xA;How to Solve: We can create a secondary list that we can start to throw the values from our array nums into, and check to see if they already exist in the list or not. As soon as we enter a number that already exists in our list, it will return True and end.</description>
    </item>
    <item>
      <title>Two Integer Sum</title>
      <link>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/two-integer-sum/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/two-integer-sum/</guid>
      <description>Question: Given an array of integers nums and an integer target, return the indices i and j such that nums[i] + nums[j] == target and i != j.&#xA;You may assume that every input has exactly one pair of indices i and j that satisfy the condition.&#xA;Return the answer with the smaller index first.&#xA;How to Solve: We can use a two pointer approach with i and j. First, we set up a for loop that will iterate j from the length of the array to the first position.</description>
    </item>
    <item>
      <title>Valid Anagram</title>
      <link>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/valid-anagram/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/leet-and-neet-code-problems/valid-anagram/</guid>
      <description>Question: Given two strings s and t, return true if the two strings are anagrams of each other, otherwise return false.&#xA;An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.&#xA;How to Solve: We essentially need to compare two strings and see if the amount of characters are the same for each word. There are probably a few ways to do that, but I went for the extremely direct approach.</description>
    </item>
    <item>
      <title>Python Problems</title>
      <link>http://localhost:1313/notes/computer-science/python/python-problems/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-problems/</guid>
      <description> </description>
    </item>
    <item>
      <title>Reading and Writing Python Files</title>
      <link>http://localhost:1313/notes/computer-science/python/reading-and-writing-files-with-python/</link>
      <pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/reading-and-writing-files-with-python/</guid>
      <description>This is a more general file for Python input and output for files. I feel like I constantly need to look up this stuff, so things I find I&amp;rsquo;ll write down here for reference.&#xA;Reading in a CSV I was solving some Python Problems and needed to format easily from a CSV. I did a quick google and came across this article which reminded me Pandas has a easy CSV reader.</description>
    </item>
    <item>
      <title>Private GPT</title>
      <link>http://localhost:1313/projects/private-gpt/</link>
      <pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/private-gpt/</guid>
      <description>Link to the project.&#xA;This really tested my time and patience. What should have taken me an hour took me closer to a day, but it was extremely worth the time investment. No mind blowing innovation going on, and certainly nothing I haven&amp;rsquo;t seen before, nevertheless gratifying to bring together.&#xA;The most frustrating issue was that the configuration for running setting up the llama model in Poetry was either wrong on the tutorial or my machine is weird.</description>
    </item>
    <item>
      <title>Beautiful Soup</title>
      <link>http://localhost:1313/notes/computer-science/python/beautiful-soup/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/beautiful-soup/</guid>
      <description>Link to documentation.</description>
    </item>
    <item>
      <title>Flask&#39;s Templates</title>
      <link>http://localhost:1313/notes/computer-science/python/flask-notes/flasks-templates/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/flask-notes/flasks-templates/</guid>
      <description>Link to documentation.</description>
    </item>
    <item>
      <title>How To Use @dataclass in Python</title>
      <link>http://localhost:1313/notes/computer-science/videos/how-to-use-@dataclass-in-python/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/videos/how-to-use-@dataclass-in-python/</guid>
      <description>Modified: July 19 2024&#xA;Link to video.&#xA;Can be faster than creating a regular class.&#xA;How classes are typically written:&#xA;class Fruit: def __init__(self, name: str, calories: float): self.name = name self.calories = calories banana = Fruit(&amp;#39;Banana&amp;#39;, 10) We can do the same with a dataclass:&#xA;from dataclasses import dataclass @dataclass class Fruit: name: str calories: float banana = Fruit(&amp;#39;Banana&amp;#39;, 10) With the first example, we wouldn&amp;rsquo;t be able to print it nicely without writing a __str__ representation, but here, we can print out banana and get Fruit(name=&#39;Banana&#39;, calories=10), which looks much nicer.</description>
    </item>
    <item>
      <title>Lython</title>
      <link>http://localhost:1313/projects/lython/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/lython/</guid>
      <description>Lython is my final project for my Masters program. I based it off an idea I had of giving my students a filtered AI, which branched off into editing ChatGPT with prompt filtering. Seeing that alone was particularly easy, I looked into implementing RAG, which works kind of.&#xA;Github&#xA;I&amp;rsquo;d like to continue working on my project as an actual tool to use during class. I&amp;rsquo;d like to be able to launch it to a production server, so my students can access it during class.</description>
    </item>
    <item>
      <title>The Ultimate Guide to Writing Functions</title>
      <link>http://localhost:1313/notes/computer-science/videos/the-ultimate-guide-to-writing-functions/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/videos/the-ultimate-guide-to-writing-functions/</guid>
      <description>Modified: July 23 2024&#xA;Link to video.&#xA;Tip 1: Do one thing, and do it well A function should perform a single task.&#xA;Think about the level of abstraction; the function should be on the same level of abstraction.&#xA;He brings up two examples, one of a function that iterates through a collection, checking each value against a matcher to return if one exists. He says this has two levels of abstraction; the iteration, and the comparison.</description>
    </item>
    <item>
      <title>You Can Do Really Cool Things With Functions in Python</title>
      <link>http://localhost:1313/notes/computer-science/videos/you-can-do-really-cool-things-with-functions-in-python/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/videos/you-can-do-really-cool-things-with-functions-in-python/</guid>
      <description>Modified: July 15 2024&#xA;Link to video.&#xA;This video goes over some uncommon ways to use functions in Python. It uses the following code as a base:&#xA;&amp;#34;&amp;#34;&amp;#34; main.py &amp;#34;&amp;#34;&amp;#34; import statistics from dataclasses import dataclass from typing import Protocol from exchange import Exchange class TradingStrategy(Protocol): &amp;#34;&amp;#34;&amp;#34;Trading strategy that decides whether to buy or sell, given a list of prices&amp;#34;&amp;#34;&amp;#34; def should_buy(self, prices: list[int]) -&amp;gt; bool: raise NotImplementedError() def should_sell(self, prices: list[int]) -&amp;gt; bool: raise NotImplementedError() class AverageTradingStrategy: &amp;#34;&amp;#34;&amp;#34;Trading strategy based on price averages.</description>
    </item>
    <item>
      <title>Blinker</title>
      <link>http://localhost:1313/notes/computer-science/python/flask-notes/blinker/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/flask-notes/blinker/</guid>
      <description>Link to documentation.</description>
    </item>
    <item>
      <title>Click</title>
      <link>http://localhost:1313/notes/computer-science/python/flask-notes/click/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/flask-notes/click/</guid>
      <description>Link to the documentation.</description>
    </item>
    <item>
      <title>Werkzeug</title>
      <link>http://localhost:1313/notes/computer-science/python/flask-notes/werkzeug/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/flask-notes/werkzeug/</guid>
      <description>Link to documentation.&#xA;First of all, what is WSGI?&#xA;Web Server Gateway Interface, a specification that describes how a web server communicates with web applications, and how web applications can be chained together to process one request.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 12</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-12/</link>
      <pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-12/</guid>
      <description>Modified: July 19 2024&#xA;Virtual Environments and Packages 12.1 Introduction Often, you&amp;rsquo;re going to need tools and modules that aren&amp;rsquo;t included with Python by default, or in your standard library. One Python install might not suffice for most applications.&#xA;To circumnavigate this, we create virtual environments, that act as self-contained directories with an installation of Python, and any number of packages.&#xA;12.2 Creating Virtual Environments We can use the venv module to create and manage our own virtual environment.</description>
    </item>
    <item>
      <title>PyCharm IDE Features</title>
      <link>http://localhost:1313/notes/computer-science/python/pycharm-ide-features/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/pycharm-ide-features/</guid>
      <description>Get Acquainted with PyCharm The project view is one of the main tool windows, containing the project directory, external libraries, and scratch files. You can also open it with Alt 1. The Python interpreter is easily viewable in the status bar in the bottom right. You can run, debug, or other option on the top right of the window. You can also press Shift F10. We got an unexpected error in our code, featured below.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 11</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-11/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-11/</guid>
      <description>Modified: July 19 2024&#xA;The Standard Library - Part 2 7/9/2024&#xA;The second part here will go over more advanced, less common modules that nevertheless, exist.&#xA;11.1 Output Formatting reprlib is an appropriately named library containing a version of repr() modified for abbreviated displays of large or deeply nested containers:&#xA;&amp;gt;&amp;gt;&amp;gt; import reprlib &amp;gt;&amp;gt;&amp;gt; reprlib.repr(set(&amp;#39;supercalafragalisticexpialidocious&amp;#39;)) &amp;#34;{&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;,...&amp;#34; pprint is a module with more sophisticated control over printing both built-in and user defined objects.</description>
    </item>
    <item>
      <title>Raspberry Pi NAS</title>
      <link>http://localhost:1313/projects/raspberry-pi-nas/</link>
      <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/raspberry-pi-nas/</guid>
      <description>Link</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 10</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/</guid>
      <description>Modified: July 19 2024&#xA;A Brief Tour of the Standard Library 7/4/2024&#xA;10.1 Operating System Interface The os module provides functions for interacting with operating systems:&#xA;&amp;gt;&amp;gt;&amp;gt; import os &amp;gt;&amp;gt;&amp;gt; os.getcwd() # returns the working directory &amp;#39;C:\\Python312&amp;#39; &amp;gt;&amp;gt;&amp;gt; os.chdir(&amp;#39;/server/accesslogs&amp;#39;) # change working directory &amp;gt;&amp;gt;&amp;gt; os.system(&amp;#39;mkdir today&amp;#39;) # run the command mkdir in the system shell 0 Never use from os import *. It&amp;rsquo;s not good practice to not do this regardless, but it will specifically keep os.</description>
    </item>
    <item>
      <title>Formatting Percentages</title>
      <link>http://localhost:1313/notes/computer-science/python/formatting-percentages/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/formatting-percentages/</guid>
      <description>Modified: July 03 2024&#xA;7/3/2024&#xA;Taken from this article.&#xA;Often in projects, we want to format our large float types as smaller percentages.&#xA;There are three main ways to do this:&#xA;Rounding and Float/String Types: round() takes two parameters: a value and a number to round too. Then, we can use a little complicated string statement.&#xA;&amp;gt;&amp;gt;&amp;gt; number = 0.8839133112 &amp;gt;&amp;gt;&amp;gt; n2 = round(number, 4) &amp;gt;&amp;gt;&amp;gt; print(n2) 0.886 &amp;gt;&amp;gt;&amp;gt; print(str(n2 * 100) + &amp;#39;%&amp;#39;) Format() Alternatively, if that seems a bit complicated, we can just format() instead.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 9</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-9/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-9/</guid>
      <description>Modified: July 19 2024&#xA;Classes 6/28/2024&#xA;Classes combine data storage and functionality into one package. When you make a new class, you are making a new type of object. A new instance, or occurrence of that type are able to be made using function call of the class.&#xA;A class is made up of attributes and methods defined by the classes definition.&#xA;Python classes follow closely to other Object Oriented Programming languages classes in the following ways:</description>
    </item>
    <item>
      <title>Flask&#39;s Quickstart</title>
      <link>http://localhost:1313/notes/computer-science/python/flask-notes/flasks-quickstart/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/flask-notes/flasks-quickstart/</guid>
      <description>Link to documentation.&#xA;Flask is a framework to create applications via Python. It makes web based applications rather simple.&#xA;Starting from the here, the installation page.&#xA;Installation Python Version Python version should be up to date. Flask supports 3.8 and newer.&#xA;Dependencies The following are installed automatically when installing Flask:&#xA;Werkzeug uses WSGI, the standard Python interface between applications and servers. Jinja is a template language that renders the pages your application serves.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 8</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-8/</link>
      <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-8/</guid>
      <description>Modified: July 19 2024&#xA;Errors and Exceptions 6/22/2024&#xA;There are two distinguishable types of errors: syntax errors and exceptions.&#xA;8.1 Syntax Syntax errors (or parsing errors) are errors involving the actual use of the language.&#xA;&amp;gt;&amp;gt;&amp;gt; while True print(&amp;#39;Hello World&amp;#39;) File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1 while True print(&amp;#39;Hello world&amp;#39;) ^^^^^ SyntaxError: invalid syntax In the example above, the while statement is missing the : required to use it.&#xA;8.2 Exceptions Even if code is syntactically correct, an error may occur when attempting to execute it.</description>
    </item>
    <item>
      <title>Designing a RESTful API</title>
      <link>http://localhost:1313/projects/designing-a-restful-api/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/designing-a-restful-api/</guid>
      <description>Modified: August 02 2024&#xA;Watched this video to take some notes on what REST is.&#xA;API: Application Programming Interface, is how to computers can communicate with each other.&#xA;Client sends a Request to the server, server sends a response back to the client.&#xA;REST, or Representational State Transfer, is the most popular way to communicate with these web servers.&#xA;REST is actually a set of rules and standards. Any API that follows the REST rules is known as a RESTful API.</description>
    </item>
    <item>
      <title>What is NumPy</title>
      <link>http://localhost:1313/notes/computer-science/python/numpy-notes/what-is-numpy/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/numpy-notes/what-is-numpy/</guid>
      <description>Link to documentation&#xA;What is NumPy? Python lists are great- easy to use, easy to understand, and perfect for quick one-and-done scenarios. However, there is a huge downside to lists. In most cases, since lists can accept any data type by default, this leaves lists open to unexpected data types you might not want around your list data.&#xA;NumPy is a solution to this issue, specifically in the realm of scientific computing.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 7</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-7/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-7/</guid>
      <description>Modified: July 19 2024&#xA;Input and Output 6/18/2024&#xA;There are three main ways to present output in Python; expression statements (not using print()), using print(), and using write() which writes something into an existing or new file.&#xA;7.1 Fancier Output Formatting At any point in the command line, I can just send out some text without any print() commands and get back what I just sent in. That&amp;rsquo;s an expression statement.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 6</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-6/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-6/</guid>
      <description>Modified: July 19 2024&#xA;Modules 6/15/2024&#xA;Obviously, using local instances are not viable for long time development is not realistic. This is why we write scripts.&#xA;Python has the ability to writes scripts, or another method called modules. Definitions from modules can be imported into your instance of Python.&#xA;Main is also given a definition here: the collection of variables that you have access to in a script executed at the top level and in calculator mode.</description>
    </item>
    <item>
      <title>Vinyl Visualizer</title>
      <link>http://localhost:1313/projects/vinyl-visualizer/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/vinyl-visualizer/</guid>
      <description>A passion project I&amp;rsquo;d like to make. It would be my first time using hardware and software together.&#xA;To start, I&amp;rsquo;d like to grab a raspberry pi with a screen and audio in so it can display the record cover, the title, artist, and duration that updates as the song goes on.&#xA;I first asked ChatGPT 3.5 for advice.&#xA;I also asked ChatGPT 4o and got a little better/pointed advice.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 5</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-5/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-5/</guid>
      <description>Data Structures 6/10/2024&#xA;5.1 More on Lists Methods for Lists:&#xA;list.append(x) Adds an item to the end of the list Equivalent to a[len(a):] = [x] list.extend(iterable) Extend the list by appending all items from an iterable list.insert(i, x) Insert an item into a given position, where i is the index location and x is the value list.remove(x) Remove the first item from the list whose value is equal to x, ValueError if no such item list.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 4</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-4/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-4/</guid>
      <description>Modified: July 19 2024&#xA;Control Flow Tools 6/5/2024&#xA;The while loop was seen in the previous Fibonacci Sequence example.&#xA;4.1 if Statements &amp;gt;&amp;gt;&amp;gt; x = int(input(&amp;#34;Please enter an integer: &amp;#34;)) Please enter an integer: 42 &amp;gt;&amp;gt;&amp;gt; if x &amp;lt; 0: &amp;gt;&amp;gt;&amp;gt; x = 0 &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Negative so now it&amp;#39;s zero!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; elif x == 0: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Zero!!!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; elif x == 1: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;UNO!!!!!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; else: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Nice B)&amp;#34;) Nice B) Very basic; all you need is an if statement.</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 1, 2, and 3</title>
      <link>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</link>
      <pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</guid>
      <description>Modified: July 19 2024&#xA;Link to source&#xA;6/2/2024&#xA;In order to get a better understanding of Python as a whole language, I&amp;rsquo;m going to document and take notes as I go through the tutorial. I mostly would like to improve as a programmer, and eventually get a software job at Google or something.&#xA;Introduction What is Python?&#xA;Python is an easy to learn, powerful programming language. Featuring efficient high-level data structures as well as a simple but effective approach to object-oriented programming.</description>
    </item>
  </channel>
</rss>
