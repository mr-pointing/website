<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Mr. Pointing</title>
    <link>https://mrpointing.com/tags/python/</link>
    <description>Recent content in Python on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 29 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mrpointing.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generators</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/generators/</link>
      <pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/generators/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://wiki.python.org/moin/Generators&#34;&gt;Link&lt;/a&gt; to article 1.&#xA;&lt;a href=&#34;https://realpython.com/introduction-to-python-generators/&#34;&gt;Link&lt;/a&gt; to article 2.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>How .join Works</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/how-.join-works/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/how-.join-works/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://realpython.com/python-join-string/&#34;&gt;Link&lt;/a&gt; to article&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;A simple built-in string method of Python, &lt;code&gt;.join()&lt;/code&gt; allows you to combine strings passed through an iterable of strings, using a &lt;em&gt;separator string&lt;/em&gt; as the delimiter.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; facts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Giorno&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;the&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;strongest&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jojo&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(facts)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Giorno is the strongest Jojo&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# You could also set the delimiter into it&amp;#39;s own variable for more modularity&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; separator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; separator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(facts)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Giorno is the strongest Jojo&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You don&amp;rsquo;t have to use a whitespace either if you don&amp;rsquo;t want too. You could just as easily concatenate them like so;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generate Parentheses</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/generate-parentheses/</link>
      <pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/generate-parentheses/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt;&#xA;You are given an integer &lt;code&gt;n&lt;/code&gt;. Return all well-formed parentheses strings that you can generate with &lt;code&gt;n&lt;/code&gt; pairs of parentheses.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Input: n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Output: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;()&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Input: n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Output: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;((()))&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(()())&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(())()&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;()(())&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;()()()&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;This one was rough. It was hard to imagine exactly how to get all of the different configurations of the parenthesis. I started out with a basic &lt;code&gt;for&lt;/code&gt; loop to create the most basic version, or the first from the examples;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Geometry Managers</title>
      <link>https://mrpointing.com/notes/computer-science/python/tkinter/geometry-managers/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/tkinter/geometry-managers/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;controlling-layouts-with-geometry-managers&#34;&gt;Controlling Layouts with Geometry Managers&lt;/h1&gt;&#xA;&lt;p&gt;Tkinter has three &lt;em&gt;geometry managers&lt;/em&gt;, or methods that define how the content of your app is structured. &lt;code&gt;.pack()&lt;/code&gt; is just one of them; we also could use &lt;code&gt;.place()&lt;/code&gt; or &lt;code&gt;.grid()&lt;/code&gt;. You can only use one at a time, so let&amp;rsquo;s discover the instances in which we&amp;rsquo;d use them.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pack&#34;&gt;&lt;code&gt;.pack()&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;When using &lt;code&gt;.pack()&lt;/code&gt;, you&amp;rsquo;re actually using a &lt;em&gt;packing algorithm&lt;/em&gt; in order to place the widgets on screen. It accomplishes this in two steps;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interactive Applications</title>
      <link>https://mrpointing.com/notes/computer-science/python/tkinter/interactive-applications/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/tkinter/interactive-applications/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;The above has taught you how to make things appear inside your window. This will only get you so far; the things in your window need to do things. Let&amp;rsquo;s learn about &lt;em&gt;events&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h1 id=&#34;using-events-and-event-handlers&#34;&gt;Using Events and Event Handlers&lt;/h1&gt;&#xA;&lt;p&gt;Going back to when we learned about the &lt;code&gt;window.mainloop()&lt;/code&gt;, the loop this starts is known as the &lt;em&gt;event loop&lt;/em&gt;. During this, the window will wait for some response. All we have to code is the events that we want to happen in response to these events, otherwise known as &lt;em&gt;event handlers&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Widgets</title>
      <link>https://mrpointing.com/notes/computer-science/python/tkinter/widgets/</link>
      <pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/tkinter/widgets/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Below are a few different types of widgets;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Label&lt;/code&gt;: displays text&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Button&lt;/code&gt;: displays a button that can have text and do action commands&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Entry&lt;/code&gt;: displays a text input form for a single line&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Text&lt;/code&gt;: displays a text input form for multi-line entry&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Frame&lt;/code&gt;: a rectangular area for widgets or padding between widgets&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;There are many more widgets, as well as &lt;em&gt;themed widgets&lt;/em&gt;, which are more updated versions of classic widgets, but we don&amp;rsquo;t need to get into that today.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Valid Parenthesis</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-parenthesis/</link>
      <pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-parenthesis/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; You are given a string &lt;code&gt;s&lt;/code&gt; consisting of the following characters: &lt;code&gt;&#39;(&#39;&lt;/code&gt;, &lt;code&gt;&#39;)&#39;&lt;/code&gt;, &lt;code&gt;&#39;{&#39;&lt;/code&gt;, &lt;code&gt;&#39;}&#39;&lt;/code&gt;, &lt;code&gt;&#39;[&#39;&lt;/code&gt; and &lt;code&gt;&#39;]&#39;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The input string &lt;code&gt;s&lt;/code&gt; is valid if and only if:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Every open bracket is closed by the same type of close bracket.&lt;/li&gt;&#xA;&lt;li&gt;Open brackets are closed in the correct order.&lt;/li&gt;&#xA;&lt;li&gt;Every close bracket has a corresponding open bracket of the same type.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;s&lt;/code&gt; is a valid string, and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Valid Sudoku</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-sudoku/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-sudoku/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; You are given a a &lt;code&gt;9 x 9&lt;/code&gt; Sudoku board &lt;code&gt;board&lt;/code&gt;. A Sudoku board is valid if the following rules are followed:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Each row must contain the digits &lt;code&gt;1-9&lt;/code&gt; without duplicates.&lt;/li&gt;&#xA;&lt;li&gt;Each column must contain the digits &lt;code&gt;1-9&lt;/code&gt; without duplicates.&lt;/li&gt;&#xA;&lt;li&gt;Each of the nine &lt;code&gt;3 x 3&lt;/code&gt; sub-boxes of the grid must contain the digits &lt;code&gt;1-9&lt;/code&gt; without duplicates.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if the Sudoku board is valid, otherwise return &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Importing CSV to SQL Table Using Python</title>
      <link>https://mrpointing.com/notes/computer-science/sql/importing-csv-to-sql-table-using-python/</link>
      <pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/importing-csv-to-sql-table-using-python/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;From &lt;a href=&#34;https://stackoverflow.com/questions/2887878/importing-a-csv-file-into-a-sqlite3-database-table-using-python&#34;&gt;Stack Overflow&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;h4 id=&#34;using-sqlite&#34;&gt;Using SQLite&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; csv&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sqlite3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;con &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sqlite3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:memory:&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# change to &amp;#39;sqlite:///your_filename.db&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; con&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cursor()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cur&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREATE TABLE t (col1, col2);&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# use your column names here&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data.csv&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; fin: &lt;span style=&#34;color:#75715e&#34;&gt;# `with` statement available in 2.5+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# csv.DictReader uses first line in file for column headings by default&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; csv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DictReader(fin) &lt;span style=&#34;color:#75715e&#34;&gt;# comma is default delimiter&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    to_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;col1&amp;#39;&lt;/span&gt;], i[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;col2&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dr]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cur&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;executemany(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INSERT INTO t (col1, col2) VALUES (?, ?);&amp;#34;&lt;/span&gt;, to_db)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;con&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;con&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;using-pandas&#34;&gt;Using Pandas&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(csvfile)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_sql(table_name, conn, if_exists&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;append&amp;#39;&lt;/span&gt;, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Day 30</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-30/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-30/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish Portfolio prototype&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I was able to finish a basic prototype for the portfolio page but it kind of sucks.&lt;/p&gt;&#xA;&lt;p&gt;I wanted to figure out an easy way to get the Instagram feed for the artist, but working with Meta&amp;rsquo;s API is almost as sucky as my portfolio page. So I honestly have my work cut out for me.&lt;/p&gt;&#xA;&lt;p&gt;This has been a crazy 30 days. Technically more, but who&amp;rsquo;s counting?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 31 - Summary</title>
      <link>https://mrpointing.com/posts/day-31---summary/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/posts/day-31---summary/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;I can&amp;rsquo;t believe I worked on this project for 30 days. The growth has been fantastic, and I should be proud of all that I was able to accomplish. If this is true, why do I feel a pit in my stomach when I think about this project? If I did such a good job, why do I feel like such crap?&lt;/p&gt;&#xA;&lt;p&gt;To be honest, the more I worked on this the more I understood why it takes teams of people to produce applications. I know there are gurus out there who can solo develop their ideas, but wow I never realized how &lt;em&gt;not&lt;/em&gt; like that I am. I enjoyed every part of the development process, yet the more I saw of the road ahead of me to actually make this usable? That is what really scared me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 29</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-29/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-29/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Complete the manual entry form&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;FINALLY&lt;/strong&gt; completed the manual entry form!! I&amp;rsquo;ve been building this out for a while and I was nervous to commit to it since there were a few more moving parts than just a regular request/booking. Happy to say it&amp;rsquo;s done and it&amp;rsquo;s pretty close to completion. The next and hopefully last big hurdle is the creation of the portfolio page, and ending with the testing of the hosting and such.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 28</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-28/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-28/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Work on email formatting&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish search for bookings&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Look into pagination&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I finished the searching for the bookings table, and tweaked the functions around a bit. This time, instead of creating a second search function, I made a new parameter &lt;code&gt;table&lt;/code&gt; that takes in the type of table you want to search from. This way, I can just create a second view for the page to view the bookings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 27</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-27/</link>
      <pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-27/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I got the search feature working! I honestly was pretty shocked at how easy it was to implement after I got past the initial hurdle of creating the correct SQL query.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I had to change the SQL query that grabbed the search results to format it with the variables before trying to execute it. I think because I was using a question mark placeholder for both column and search term, it was messing up the column value with quotation marks. Now, it&amp;rsquo;s working just fine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 26</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-26/</link>
      <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-26/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I was able to get the progress from yesterday into a bit more of a tangible solution. Currently, in order to update the SQL table of when a booking has been confirmed, is when the embedded widget passes an event scheduled action, it will notify the window which will in turn send the scheduled events information to a Flask view. From there, I need to make another call using the events information unique identifier to retrieve the start time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 25</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-25/</link>
      <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-25/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I worked for a bit yesterday and a lot today, so I&amp;rsquo;ll count them as one. I was able to implement some more font choices so we can narrow that down sooner rather than later, and was also able to work on the color scheme a bit.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Today was a daunting experience. I was finally able to get the API connection with Calendly going, just to realize I&amp;rsquo;m getting into more unfamiliar territory. This time, I have to learn a bit about webhooks and how I can implement them to update my SQLite table when a booking is made. It seems like I have two options; I can use webhooks and figure out how that works, or I can find out how to get the response from the embedded widget. The webhooks seem like the better response long term.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 24</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-24/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-24/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Get current bookings page working&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Look into filtering requests/bookings&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Don&amp;rsquo;t want to have to refresh the page, but it doesn&amp;rsquo;t need to constantly update as the user is typing. Results should only appear upon hitting enter.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Current bookings was a lot easier now that I&amp;rsquo;m using a template for all my pages, and it was a breeze to create a new blueprint for the page since it&amp;rsquo;s even less code than the requests page, due to their not needing to handle any &lt;code&gt;post&lt;/code&gt; requests.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 23</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-23/</link>
      <pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-23/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Coming back from a few days to think about a game plan for the finish line, I think I can get something out and working by the end of these 30 days. Maybe.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish applying &lt;code&gt;base.html&lt;/code&gt; to all pages&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Make the admin index&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; page for current requests&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; page for current bookings&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; page for manual application form&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish CSS for pages&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Got a ton done today, and worked for probably over 2 hours. I was able to extend the &lt;code&gt;base.html&lt;/code&gt; to all files needed, and differentiated between admin and client-side facing pages with the creation of the &lt;code&gt;admin_base.html&lt;/code&gt; file. Not much different, but eventually I may split the stylesheets as well to really separate them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 22</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-22/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-22/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Start working on HTML/CSS changes&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish reformatting HTML with  &lt;code&gt;base.html&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Surprisingly, got a decent amount done in just under an hour. I was able to complete the &lt;code&gt;base.html&lt;/code&gt; file, and worked out some of the kinks of the formatting. It doesn&amp;rsquo;t look exactly like the Figma yet, but I want to make sure all of the HTML files have the &lt;code&gt;base.html&lt;/code&gt; extension first.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;&lt;a href=&#34;https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-23/&#34;&gt;Day 23&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 21</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-21/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-21/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Get Calendly to prefill info for booking link&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I really thought todays goal was going to be harder, but it actually ended up being pretty easy. All I had to do was edit the URL and pass in some parameters. I thought maybe I&amp;rsquo;d have to set up a developer account and use JSON/JavaScript, but honestly it seems fine without it?&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;&lt;a href=&#34;https://mrpointing.com/projects/30-day-coding-challenge/week-4/day-22/&#34;&gt;Day 22&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 20</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-20/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-20/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Correctly sync the booking form to choose which type of session&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Caret drop down menu &amp;amp; link to appropriate function&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Small Tattoo Session&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Medium Tattoo Session&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Large Tattoo Session&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Small Tattoo Reschedule&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Medium Tattoo Reschedule&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tattoo Touchup&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Got a ton done today; walked through the Figma with Big Boss and was able to get going on the layout. Promising results on that front shortly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 19</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-19/</link>
      <pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-19/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Finish the Figma for site&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Mess around on Calendly&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Finished the preliminary wireframe for the site, handed off to big boss&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So another rejection as far as my current layout for the site. I was able to get started and get an actual calendar embedded into the site which worked nicely. I now have a new slew of issues to worry about;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;There are 3 types of bookings to account for&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Normal tattoo sessions, three types&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Small (&amp;gt;2hrs)&lt;/li&gt;&#xA;&lt;li&gt;Medium (2 - 5hrs)&lt;/li&gt;&#xA;&lt;li&gt;Large (5+hrs)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Reschedules&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Small (2hrs)&lt;/li&gt;&#xA;&lt;li&gt;Medium (3hrs30)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Touchups (1hr30)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Change Admin&amp;rsquo;s booking page to choose which type of session&lt;/li&gt;&#xA;&lt;li&gt;&lt;del&gt;Booking should generate and save a link to it in the SQLite database for use later&lt;/del&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Artist can send via dm with info already filled out&lt;/li&gt;&#xA;&lt;li&gt;Figure out how to give Calendly forms pre-saved information&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;&lt;a href=&#34;https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-20/&#34;&gt;Day 20&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 18</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-18/</link>
      <pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-18/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Goals for today are quite simple; complete the look of the website on Figma, so the boss can come in and make design changes before I start committing any time towards building in HTML/CSS. I&amp;rsquo;m building out a basic skeleton for her to build off of, and I should be able to finish that today.&lt;/p&gt;&#xA;&lt;p&gt;As far as the project is coming along, since we are moving &lt;em&gt;away&lt;/em&gt; from using Full Calendar, I think we&amp;rsquo;re going to just integrate with Calendly. Two main reasons why I did this;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 17</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-17/</link>
      <pubDate>Tue, 17 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-17/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;First day back!&lt;/p&gt;&#xA;&lt;p&gt;I was sick for maybe 2, 3 weeks? Probably the worst cold I&amp;rsquo;ve had in my life, and of course it happened in the midst of my 30 day challenge. I almost tried to work through it, but I couldn&amp;rsquo;t focus at all and had to stop completely. Instead of calling it quits though, I&amp;rsquo;m going to start Day 17 over as a new day, and try and get back up on the saddle.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 16</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-16/</link>
      <pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-16/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Honestly, I might be taking a small break today? I mostly wanted to get the ball rolling this week but after yesterday, I think I might have to settle for Calendly integration before trying to re-create their services. The Twilio account rejected my verification &lt;em&gt;again&lt;/em&gt;, and after trying to build a working calendar system through JavaScript, I realized two things; I suck at JavaScript and don&amp;rsquo;t know what I&amp;rsquo;m doing, &lt;strong&gt;and&lt;/strong&gt; Twilio has everything I&amp;rsquo;m looking for plus a little more. Until I have enough free time to actually justify spending time trying to build a calendar system, I&amp;rsquo;d rather go for the faster approach, then come back later and see if there&amp;rsquo;s anything I can implement myself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 15</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-15/</link>
      <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-3/day-15/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text message for request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Artist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Integrate with Google Calendar&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For Today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Change calendar to full month and change the formatting&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Had a talk with the boss, and she wants it to look a little bit different than the week-hour grid I had going on. Instead, I need each date to be clickable when available, and when clicked, needs to open up a little window in front with the available times. I need to account for multiple things;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 14</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-14/</link>
      <pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-14/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text message for request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Artist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For Today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Refactor for Yagmail instead of Gmail&amp;rsquo;s Oauth2 set up&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Refactor requests for asking for consent for text messages&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create JSON file for artist schedule&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Integrate with Google Calendar? (maybe way down the line)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Make a confirm booking button that checks to make sure there is no issue with timing&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Getting a lot done today; more so with understanding how the calendar features work for Fullcalendar. So far, I know I&amp;rsquo;m going to use a Grid view, and I&amp;rsquo;m currently able to place events anywhere with the limit set by the artist.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 13</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-13/</link>
      <pubDate>Fri, 13 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-13/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I looked more into Twilio and it seems like they have their own API that can be used to make sure it&amp;rsquo;s compliant with their rules. I&amp;rsquo;m going to try editing in a checkbox option that allows the user to check yes before submitting the application. If they don&amp;rsquo;t say yes, the database save will &lt;em&gt;not&lt;/em&gt; include the phone number, save it as &lt;code&gt;None&lt;/code&gt;, and text message reminders won&amp;rsquo;t be sent to them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 12</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-12/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text message for request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Artist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For Today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Booking Python file&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Figure out how Google Calendar works&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Had a good talk with the boss about the structuring of the site so far. I had misunderstood the need for a &amp;ldquo;fast form&amp;rdquo;, it really should just be a button that sends a booking form that she fills out the request details and customer information for.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 11</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-11/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text message for request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Artist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Accept Request &amp;amp; Booking Feature&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &amp;ldquo;Accept&amp;rdquo; button HTML site&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Booking HTML site&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Booking Python file (refactor requests to make recs_books?)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I got a Twilio phone number waiting to be verified, added the booking form and all the logic to get there, as well as fixed a small issue where requests were stuck and would re-send after refreshing the page.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 10</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-10/</link>
      <pubDate>Tue, 10 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text message for request&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Client&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Artist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For Today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Accept Request &amp;amp; Booking Feature&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &amp;ldquo;Accept&amp;rdquo; button HTML site&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Booking HTML site&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Booking Python file (refactor requests to make recs_books?)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Set up the text messaging API account.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;&lt;a href=&#34;https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-11/&#34;&gt;Day 11&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 9</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-9/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Last Week:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For Today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up email to Client w/ request form&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up email to Admin saying there&amp;rsquo;s a new request w/ client info&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up text messages for both&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I was able to get a decent chunk of things today for today. One thing that I&amp;rsquo;m trying to to stress is the prettification of all of my elements. I got the emails working, but they look like crap. I am slightly worried when it comes time to use HTML to build them, they might break, but for now I&amp;rsquo;ll try not to let it stress me out.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 8</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-8/</link>
      <pubDate>Sun, 08 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Tattooed today, so maybe today will be nice free day?&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;&lt;a href=&#34;https://mrpointing.com/projects/30-day-coding-challenge/week-2/day-9/&#34;&gt;Day 9&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 7</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-7/</link>
      <pubDate>Sat, 07 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From Yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I didn&amp;rsquo;t get to work on this project much this weekend, and honestly I feel kind of okay about it? I am going to be putting off the AI roadmap on hold until this month is over to see if that helps with my workflow. This week I tried to do both and it left me really wanting to pick one over the other, so perhaps I&amp;rsquo;ll just leave the AI roadmap stuff on the back burner while I work hard on the next few days.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 6</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-6/</link>
      <pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test email sending/receiving&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Today was a very busy work day, so I really didn&amp;rsquo;t get that far on anything. The biggest thing I did was I was able to locate the right documentation to help out with the next few steps. Otherwise, not a whole lot got done today.&lt;/p&gt;&#xA;&lt;h1 id=&#34;problems-or-issues&#34;&gt;Problems or Issues&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;When running the Gmail quickstart code, I neglected to realize you would need to change the &lt;code&gt;SCOPE&lt;/code&gt; list variable to allow more authorizations. I spent way too long yesterday getting a validation error.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 5</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-5/</link>
      <pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; View Request Page (Admin page for Sarah)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Work on getting pictures to display&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test and integrate email to client &amp;amp; Sarah w/ request form&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Work Time:&lt;/strong&gt;&lt;/em&gt; 1hr&lt;/p&gt;&#xA;&lt;p&gt;So far so okay. I was able to finally get the images working, but I had to rely on ChatGPT for help since none of the videos I watched were able to really help. I also dived into docs but couldn&amp;rsquo;t really find what I was looking for. So for today, I&amp;rsquo;m going to have to be happy with what I got done, and call it till tomorrow, where I&amp;rsquo;ll give a shot at multiple images and the email function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 4</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-4/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; View Request Page (Admin page for Sarah)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Work on the &lt;code&gt;JOIN&lt;/code&gt; to bring client info along with each request&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Work on getting pictures to display&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test and integrate email to client &amp;amp; Sarah w/ request form&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Work Time:&lt;/strong&gt;&lt;/em&gt; 1hr 20&lt;/p&gt;&#xA;&lt;p&gt;Not my best day, but to be expected. Today wasn&amp;rsquo;t one of my best days, so I shouldn&amp;rsquo;t be too hard on myself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 3</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-3/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; View Request Page (Admin page for Sarah)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Python file (Flask View)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; HTML file (formatting)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Work on the &lt;code&gt;JOIN&lt;/code&gt; to bring client info along with each request&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test and integrate email to client &amp;amp; Sarah w/ request form&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Format the Email back to client&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Work Time:&lt;/strong&gt;&lt;/em&gt; 2 hours&lt;/p&gt;&#xA;&lt;p&gt;While I didn&amp;rsquo;t get that much done as far as my lists are concerned, I was able to get a lot done today. I had to make all of the logging in and out features, as well as the pages for it and viewing all the requests. I was able to work it out nicely so all Sarah has to do is change the ending of the URL to get to the log-in form, and people are tempted to mess around with it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sorting Techniques</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/sorting-techniques/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/sorting-techniques/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/howto/sorting.html&#34;&gt;Link&lt;/a&gt; to article&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;sorting-basics&#34;&gt;Sorting Basics&lt;/h1&gt;&#xA;&lt;p&gt;There are two basic ways we can ascending sort (organize from least to greatest on value) built into Python, &lt;code&gt;.sort()&lt;/code&gt; on a list object, and the &lt;code&gt;sorted()&lt;/code&gt; function, which takes in any iterable sequence.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt; will actually return the sequence in order, while &lt;code&gt;.sort()&lt;/code&gt; is more of a step to be done, and will actually return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sorted(a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;key-functions&#34;&gt;Key Functions&lt;/h2&gt;&#xA;&lt;p&gt;Both of the methods we looked at above have an additional parameter &lt;code&gt;key&lt;/code&gt;, which takes in a function that is performed on each element within the sorted list before making any comparisons. This allows for different sorting methods; some even use lambda which is pretty cool.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 1</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-1/</link>
      <pubDate>Sat, 30 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write down a step-by-step initial guide to follow to help track/maintain progress&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Complete the initial booking form&lt;/li&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Set up the SQLite database/schema&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Work Time:&lt;/strong&gt;&lt;/em&gt; 1hr 45&lt;/p&gt;&#xA;&lt;p&gt;So today was the first day and I feel like I was able to make some pretty decent progress. I created a really simple step-by-step guide to keep me on track, and to make the scope less creepy. I also was able to get a working schema for my tables, and I currently have &lt;code&gt;user&lt;/code&gt; for Sarah, &lt;code&gt;client&lt;/code&gt; for all people who book, and a &lt;code&gt;requests&lt;/code&gt; for initial requests. I&amp;rsquo;m not sure if I&amp;rsquo;ll have a separate table for full bookings or not, who knows.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Day 2</title>
      <link>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-2/</link>
      <pubDate>Sat, 30 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/30-day-coding-challenge/week-1/day-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;From yesterday:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Complete the initial booking form&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For today:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Allow Images to be stored in SQLite database&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; View Request Page (Admin page for Sarah)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;accomplishments&#34;&gt;Accomplishments&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Work Time:&lt;/strong&gt;&lt;/em&gt; 1hr 30&lt;/p&gt;&#xA;&lt;p&gt;I got a lot done today, or at least it feels like it. First up, I messed around with the CSS Cursor gave me and tried to play with the setting up of the text entry fields for the requests. That went by smoothly, but I wanted to look into how I could use conditionals to retrieve different question fields.&lt;/p&gt;</description>
    </item>
    <item>
      <title>13. Roman to Integer</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/13.-roman-to-integer/</link>
      <pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/13.-roman-to-integer/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Roman numerals are represented by seven different symbols: &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Symbol&lt;/strong&gt;       &lt;strong&gt;Value&lt;/strong&gt;&#xA;I             1&#xA;V             5&#xA;X             10&#xA;L             50&#xA;C             100&#xA;D             500&#xA;M             1000&lt;/p&gt;&#xA;&lt;p&gt;For example, &lt;code&gt;2&lt;/code&gt; is written as &lt;code&gt;II&lt;/code&gt; in Roman numeral, just two ones added together. &lt;code&gt;12&lt;/code&gt; is written as &lt;code&gt;XII&lt;/code&gt;, which is simply &lt;code&gt;X + II&lt;/code&gt;. The number &lt;code&gt;27&lt;/code&gt; is written as &lt;code&gt;XXVII&lt;/code&gt;, which is &lt;code&gt;XX + V + II&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decorators</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/decorators/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/decorators/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;what-is-a-decorator&#34;&gt;What is a Decorator?&lt;/h1&gt;&#xA;&lt;p&gt;Essentially, a decorator, is a wrapping for function. It allows you to do something &lt;em&gt;before&lt;/em&gt; and/or &lt;em&gt;after&lt;/em&gt; a function is called. Let&amp;rsquo;s look at a super basic example;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uppercase_word&lt;/span&gt;(function):  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wrapper&lt;/span&gt;():  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; function()  &lt;span style=&#34;color:#75715e&#34;&gt;# call the function to get the return value  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        make_upper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; make_upper  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; wrapper&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s say we make a really basic function to print text out;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;say_word&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;say wooooord&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could print it out like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inheritance</title>
      <link>https://mrpointing.com/notes/computer-science/python/advanced-python/inheritance/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/advanced-python/inheritance/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;According to the AI road map I&amp;rsquo;ve been following, this and the rest of the concepts in this folder are meant to be considered more advanced concepts. Some of these have been covered in the &lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/&#34;&gt;Python Tutorial&lt;/a&gt;, some have not. This is the starting note, but I won&amp;rsquo;t link these concepts together unless necessary, as the concepts aren&amp;rsquo;t explicitly tied together.&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-is-inheritance&#34;&gt;What is Inheritance?&lt;/h1&gt;&#xA;&lt;p&gt;Inheritance is the concept that you can build a new class based off of, or &lt;em&gt;derived&lt;/em&gt; from, an existing class. You can actually build one based off many, and the syntax is as follows;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flask&#39;s Tutorial</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-tutorial/</link>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-tutorial/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://flask.palletsprojects.com/en/stable/tutorial/&#34;&gt;Link&lt;/a&gt; to tutorial.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I was really hesitant to start this note, since I basically ran through this tutorial once already to start and complete my final project, &lt;a href=&#34;https://mrpointing.com/projects/lython/&#34;&gt;Lython&lt;/a&gt;. However, since I&amp;rsquo;m starting Sarah&amp;rsquo;s site, and I want to test out a bunch of features/really get to understand Flask, let&amp;rsquo;s go through it once more.&lt;/p&gt;&#xA;&lt;p&gt;Last time, I did a combination of going through the tutorial, then making changes as I saw fit. I feel like I missed some crucial details I want to review, and I never documented my process. I&amp;rsquo;m going to completely go through it as if I don&amp;rsquo;t want to make any edits, then make edits &lt;em&gt;after&lt;/em&gt; it&amp;rsquo;s finished.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Your First App</title>
      <link>https://mrpointing.com/notes/computer-science/python/tkinter/your-first-app/</link>
      <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/tkinter/your-first-app/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://realpython.com/python-gui-tkinter/&#34;&gt;Link&lt;/a&gt; to the tutorial.&lt;/p&gt;&#xA;&lt;p&gt;What makes Tkinter nice is that it&amp;rsquo;s a built-in library, meaning it should come with all versions of Python 3.12. If you&amp;rsquo;re using Ubuntu (like me) for this example you will have to install it but it doesn&amp;rsquo;t take long at all (&lt;code&gt;sudo apt-get install python3-tk&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;p&gt;Creating your first window is incredibly simple. The following code will get you up and running in no time:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tkinter &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; tk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tk()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tk&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Label(text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I Love Python!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;words&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pack()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;window&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mainloop()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code will give you an empty window that will stay open until you close it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLite Tutorial</title>
      <link>https://mrpointing.com/notes/computer-science/sql/sqlite-tutorial/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/sql/sqlite-tutorial/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;what-is-a-database&#34;&gt;What is a Database?&lt;/h1&gt;&#xA;&lt;p&gt;Essentially, a database is a place in which your data and tables exists, organized in a way described by the &lt;em&gt;database schema&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;There are many database platforms that use SQL as their main language; MySQL, NoSQL, Microsoft SQL Server, just to name a few. The one we&amp;rsquo;re going to work with due to it&amp;rsquo;s ease of use and lightweight installation is SQLite (appropriately named).&lt;/p&gt;&#xA;&lt;h1 id=&#34;creating-our-first-database&#34;&gt;Creating Our First Database&lt;/h1&gt;&#xA;&lt;h2 id=&#34;connection&#34;&gt;Connection&lt;/h2&gt;&#xA;&lt;p&gt;We can actually use SQLite directly inside of PyCharm, our IDE. Just like any other module, we can use &lt;code&gt;pip install sqlite3&lt;/code&gt; to install SQLite in our project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Products of Array Not Including Self</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/products-of-array-not-including-self/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/products-of-array-not-including-self/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given an integer array &lt;code&gt;nums&lt;/code&gt;, return an array &lt;code&gt;output&lt;/code&gt; where &lt;code&gt;output[i]&lt;/code&gt; is the product of all the elements of &lt;code&gt;nums&lt;/code&gt; except &lt;code&gt;nums[i]&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; I originally thought I had an awesome solution, but it only passed with the first test case that didn&amp;rsquo;t have zeros:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;productExceptSelf&lt;/span&gt;(self, nums: List[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; List[int]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; nums[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(nums):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            total &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; nums[i]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; nums:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(int(total&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;num))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ans&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(total)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My issue began when there were 0&amp;rsquo;s to worry about. I spent a decent amount of time on this so I just decided to look at the answer below and I&amp;rsquo;ll dissect it after:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploratory Data Analysis with Pandas</title>
      <link>https://mrpointing.com/notes/computer-science/python/exploratory-data-analysis-with-pandas/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/exploratory-data-analysis-with-pandas/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.kaggle.com/code/kashnitsky/topic-1-exploratory-data-analysis-with-pandas&#34;&gt;Link&lt;/a&gt; to article&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>NumPy Quickstart</title>
      <link>https://mrpointing.com/notes/computer-science/python/numpy-notes/numpy-quickstart/</link>
      <pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/numpy-notes/numpy-quickstart/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://numpy.org/doc/stable/user/quickstart.html&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;&#xA;&lt;p&gt;What should you know to get the most out of this lesson? At the very least, the fundamentals of Python. You should also refer to &lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/numpy-notes/what-is-numpy/&#34;&gt;this&lt;/a&gt; to get a fundamental understanding of the reasons why we&amp;rsquo;d want to use &lt;code&gt;ndarray&lt;/code&gt; in the first place.&lt;/p&gt;&#xA;&lt;p&gt;What are we doing this lesson then? We&amp;rsquo;re going to learn about what one, two, and $n$ dimensional arrays actually are, some algebra operations on &lt;code&gt;ndarray&lt;/code&gt; objects &lt;em&gt;without&lt;/em&gt; &lt;code&gt;for&lt;/code&gt; loops, and even more advanced things like what axis and shape properties are.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contains Duplicate</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/contains-duplicate/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/contains-duplicate/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given an integer array &lt;code&gt;nums&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; if any value appears &lt;strong&gt;more than once&lt;/strong&gt; in the array, otherwise return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; We can create a secondary list that we can start to throw the values from our array &lt;code&gt;nums&lt;/code&gt; into, and check to see if they already exist in the list or not. As soon as we enter a number that already exists in our list, it will return &lt;code&gt;True&lt;/code&gt; and end. If it goes through the entire &lt;code&gt;nums&lt;/code&gt; array without breaking, our list has no duplicates, and we can return &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Two Integer Sum</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/two-integer-sum/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/two-integer-sum/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given an array of integers &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;target&lt;/code&gt;, return the indices &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; such that &lt;code&gt;nums[i] + nums[j] == target&lt;/code&gt; and &lt;code&gt;i != j&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;You may assume that &lt;em&gt;every&lt;/em&gt; input has exactly one pair of indices &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; that satisfy the condition.&lt;/p&gt;&#xA;&lt;p&gt;Return the answer with the smaller index first.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; We can use a two pointer approach with &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;. First, we set up a for loop that will iterate &lt;code&gt;j&lt;/code&gt; from the length of the array to the first position. Then we can use &lt;code&gt;i&lt;/code&gt; to move through the array forwards. We use a nested while loop with a conditional statement that says if the combination of position &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are equal to target, return those positions in &lt;code&gt;[i, j]&lt;/code&gt; format.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Valid Anagram</title>
      <link>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-anagram/</link>
      <pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/leet-and-neet-code-problems/valid-anagram/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;/em&gt; Given two strings &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; if the two strings are anagrams of each other, otherwise return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;An &lt;strong&gt;anagram&lt;/strong&gt; is a string that contains the exact same characters as another string, but the order of the characters can be different.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;How to Solve:&lt;/strong&gt;&lt;/em&gt; We essentially need to compare two strings and see if the amount of characters are the same for each word. There are probably a few ways to do that, but I went for the extremely direct approach.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Problems</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-problems/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-problems/</guid>
      <description>&lt;hr&gt;</description>
    </item>
    <item>
      <title>Reading and Writing Python Files</title>
      <link>https://mrpointing.com/notes/computer-science/python/reading-and-writing-files-with-python/</link>
      <pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/reading-and-writing-files-with-python/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;This is a more general file for Python input and output for files. I feel like I constantly need to look up this stuff, so things I find I&amp;rsquo;ll write down here for reference.&lt;/p&gt;&#xA;&lt;h1 id=&#34;reading-in-a-csv&#34;&gt;Reading in a CSV&lt;/h1&gt;&#xA;&lt;p&gt;I was solving some &lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/python-problems/&#34;&gt;Python Problems&lt;/a&gt; and needed to format easily from a CSV. I did a quick google and came across this &lt;a href=&#34;https://saturncloud.io/blog/how-to-convert-a-csv-file-to-a-dictionary-in-python-using-the-csv-and-pandas-modules/&#34;&gt;article&lt;/a&gt; which reminded me &lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/pandas/&#34;&gt;Pandas&lt;/a&gt; has a easy CSV reader. The syntax is like so,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Private GPT</title>
      <link>https://mrpointing.com/projects/private-gpt/</link>
      <pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/private-gpt/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.privategpt.dev/installation/getting-started/installation&#34;&gt;Link&lt;/a&gt; to the project.&lt;/p&gt;&#xA;&lt;p&gt;This really tested my time and patience. What should have taken me an hour took me closer to a day, but it was extremely worth the time investment. No mind blowing innovation going on, and certainly nothing I haven&amp;rsquo;t seen before, nevertheless gratifying to bring together.&lt;/p&gt;&#xA;&lt;p&gt;The most frustrating issue was that the configuration for running setting up the llama model in Poetry was either wrong on the tutorial or my machine is weird. Essentially I had to use &lt;code&gt;poetry install --extras &amp;quot;llms-llama-cpp ui vector-stores-qdrant embeddings-huggingface&amp;quot;&lt;/code&gt; instead of there version (not much different, save embeddings and different llama model).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beautiful Soup</title>
      <link>https://mrpointing.com/notes/computer-science/python/beautiful-soup/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/beautiful-soup/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flask&#39;s Templates</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-templates/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-templates/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://flask.palletsprojects.com/en/3.0.x/templating/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>How To Use @dataclass in Python</title>
      <link>https://mrpointing.com/notes/computer-science/videos/how-to-use-@dataclass-in-python/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/videos/how-to-use-@dataclass-in-python/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mVea6Mu15l8&#34;&gt;Link&lt;/a&gt; to video.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Can be faster than creating a regular class.&lt;/p&gt;&#xA;&lt;p&gt;How classes are typically written:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fruit&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name: str, calories: float):  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;calories &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calories  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;banana &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fruit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Banana&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can do the same with a &lt;code&gt;dataclass&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Fruit&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name: str  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    calories: float  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;banana &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Fruit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Banana&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the first example, we wouldn&amp;rsquo;t be able to print it nicely without writing a &lt;code&gt;__str__&lt;/code&gt; representation, but here, we can print out &lt;code&gt;banana&lt;/code&gt; and get &lt;code&gt;Fruit(name=&#39;Banana&#39;, calories=10)&lt;/code&gt;, which looks much nicer. You could also set &lt;code&gt;float = 10&lt;/code&gt; so that calories are set to 10 by default.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lython</title>
      <link>https://mrpointing.com/projects/lython/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/lython/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;Lython is my final project for my Masters program. I based it off an idea I had of giving my students a filtered AI, which branched off into editing ChatGPT with prompt filtering. Seeing that alone was particularly easy, I looked into implementing RAG, which works kind of.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mr-pointing/Lython_GCU&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;d like to continue working on my project as an actual tool to use during class. I&amp;rsquo;d like to be able to launch it to a production server, so my students can access it during class. That way, I can cut the websites to just Lython, and the website they need to submit their assignments on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Ultimate Guide to Writing Functions</title>
      <link>https://mrpointing.com/notes/computer-science/videos/the-ultimate-guide-to-writing-functions/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/videos/the-ultimate-guide-to-writing-functions/</guid>
      <description>&lt;p&gt;Modified: July 23 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yatgY4NpZXE&#34;&gt;Link&lt;/a&gt; to video.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;tip-1-do-one-thing-and-do-it-well&#34;&gt;Tip 1: Do one thing, and do it well&lt;/h3&gt;&#xA;&lt;p&gt;A function should perform a single task.&lt;/p&gt;&#xA;&lt;p&gt;Think about the level of abstraction; the function should be on the same level of abstraction.&lt;/p&gt;&#xA;&lt;p&gt;He brings up two examples, one of a function that iterates through a collection, checking each value against a matcher to return if one exists. He says this has two levels of abstraction; the iteration, and the comparison.&lt;/p&gt;</description>
    </item>
    <item>
      <title>You Can Do Really Cool Things With Functions in Python</title>
      <link>https://mrpointing.com/notes/computer-science/videos/you-can-do-really-cool-things-with-functions-in-python/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/videos/you-can-do-really-cool-things-with-functions-in-python/</guid>
      <description>&lt;p&gt;Modified: July 15 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ph2HjBQuI8Y&amp;list=PLU-P2PlzpIf3EpWfxk-Mu_ZVJVS5Wb-_e&amp;index=35&#34;&gt;Link&lt;/a&gt; to video.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This video goes over some uncommon ways to use functions in Python. It uses the following code as a base:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;main.py &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; statistics  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Protocol  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; exchange &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Exchange  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TradingStrategy&lt;/span&gt;(Protocol):  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Trading strategy that decides whether to buy or sell, given a list of prices&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_buy&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_sell&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotImplementedError&lt;/span&gt;()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AverageTradingStrategy&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Trading strategy based on price averages.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_buy&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list_window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:]  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; statistics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(list_window)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_sell&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list_window &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:]  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; statistics&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(list_window)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MinMaxTradingStrategy&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Trading strategy based on price minima and maxima.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_buy&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# buy if it&amp;#39;s below $32,000  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32_000_00&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_sell&lt;/span&gt;(self, prices: list[int]) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# sell if it&amp;#39;s above $33,000  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; prices[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33_000_00&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TradingBot&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Trading bot that connects to a crypto exchange and performs trades.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exchange: Exchange  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trading_strategy: TradingStrategy  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self, symbol: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        prices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_market_data(symbol)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        should_buy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trading_strategy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;should_buy(prices)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        should_sell &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;trading_strategy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;should_sell(prices)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; should_buy:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buy(symbol, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; should_sell:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sell(symbol, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No action required for &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;symbol&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Creates the exchange and connects to it  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exchange &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Exchange()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exchange&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# create the trading strategy  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trading_strategy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AverageTradingStrategy()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# create the trading bot and run the bot once  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TradingBot(exchange, trading_strategy)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BTC/USD&amp;#39;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;exchange.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PRICE_DATA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BTC/USD&amp;#34;&lt;/span&gt;: [  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;35_842_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;34_069_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;33_871_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;34_209_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;32_917_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;33_931_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;33_370_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;34_445_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;32_901_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;33_013_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ETH/USD&amp;#34;&lt;/span&gt;: [  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_381_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_233_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_300_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_342_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_137_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_156_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_103_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_165_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_028_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;2_004_00&lt;/span&gt;,  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExchangeConnectionError&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;):  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Custom error that is raised when an exchange connection fails.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exchange&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connected &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Connects to the exchange.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connecting to Crypto Bullshit...&amp;#34;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connected &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_connection&lt;/span&gt;(self) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Checks if the exchange is connected.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connected:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; ExchangeConnectionError(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exchange is not connected dummy.&amp;#34;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_market_data&lt;/span&gt;(self, symbol: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; list[int]:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Returns fake market price for data given a market symbol.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_connection()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; PRICE_DATA[symbol]  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buy&lt;/span&gt;(self, symbol: str, amount: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Simulate buying an amount of a given symbol at current price.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_connection()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Buying amount &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;amount&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; in market &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;symbol&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sell&lt;/span&gt;(self, symbol: str, amount: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Simulate selling an amount of a given symbol at current price.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_connection()  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Selling amount &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;amount&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; in market &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;symbol&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Functions can replicate or even replace code that is heavily reliant on classes. As we see in the code above, the structure is built off of a base &lt;code&gt;TradingStrategy()&lt;/code&gt; class, and is used/reference many times.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blinker</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/blinker/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/blinker/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blinker.readthedocs.io/en/stable/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Click</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/click/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/click/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://click.palletsprojects.com/en/8.1.x/&#34;&gt;Link&lt;/a&gt; to the documentation.&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Werkzeug</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/werkzeug/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/werkzeug/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://werkzeug.palletsprojects.com/en/3.0.x/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;First of all, what is WSGI?&lt;/p&gt;&#xA;&lt;p&gt;Web Server Gateway Interface, a specification that describes how a web server communicates with web applications, and how web applications can be chained together to process one request.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 12</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-12/</link>
      <pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-12/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;virtual-environments-and-packages&#34;&gt;&lt;strong&gt;Virtual Environments and Packages&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;121-introduction&#34;&gt;&lt;strong&gt;12.1 Introduction&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Often, you&amp;rsquo;re going to need tools and modules that aren&amp;rsquo;t included with Python by default, or in your standard library. One Python install might not suffice for most applications.&lt;/p&gt;&#xA;&lt;p&gt;To circumnavigate this, we create &lt;em&gt;virtual environments&lt;/em&gt;, that act as self-contained directories with an installation of Python, and any number of packages.&lt;/p&gt;&#xA;&lt;h3 id=&#34;122-creating-virtual-environments&#34;&gt;&lt;strong&gt;12.2 Creating Virtual Environments&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;We can use the &lt;code&gt;venv&lt;/code&gt; module to create and manage our own virtual environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyCharm IDE Features</title>
      <link>https://mrpointing.com/notes/computer-science/python/pycharm-ide-features/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/pycharm-ide-features/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h3 id=&#34;get-acquainted-with-pycharm&#34;&gt;Get Acquainted with PyCharm&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The project view is one of the main tool windows, containing the project directory, external libraries, and scratch files. You can also open it with &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The Python interpreter is easily viewable in the status bar in the bottom right.&lt;/li&gt;&#xA;&lt;li&gt;You can run, debug, or other option on the top right of the window. You can also press &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;F10&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;We got an unexpected error in our code, featured below. We can place stop at the return statement to debug our code and see what&amp;rsquo;s wrong. After placed, use the debug option (lil green bug).&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_average&lt;/span&gt;(values):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; values:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;result &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AVERAGE&amp;#34;&lt;/span&gt;, find_average([&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;There is a debug workflow lesson later on we can do.&lt;/li&gt;&#xA;&lt;li&gt;When hitting &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Enter&lt;/code&gt; on something, that&amp;rsquo;s called performing a quick fix. You can quick fix formatting issues, and even functions to add intentions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Intentions are specifiers added to functions to define what type of return object is expected.&lt;/strong&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Ex. &lt;code&gt;def sum_list(num_list: list) -&amp;gt; list:&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Shift twice on anything will open the Search Everywhere dialog, where you can do things with the selected text like case it or something else.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;editor-basics&#34;&gt;Editor Basics&lt;/h2&gt;&#xA;&lt;h3 id=&#34;context-actions&#34;&gt;Context Actions&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Enter&lt;/code&gt; invokes the Show Context Actions.&lt;/li&gt;&#xA;&lt;li&gt;We can do things like remove redundant parameters, or change the format to professional standard.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;search-for-actions&#34;&gt;Search for actions&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; will Find Action.&lt;/li&gt;&#xA;&lt;li&gt;Same action as double &lt;code&gt;Shift&lt;/code&gt;. You can search for &amp;lsquo;about&amp;rsquo; to find out info on PyCharm.&lt;/li&gt;&#xA;&lt;li&gt;We can even edit IDE settings, like line number visibility.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;expand-and-shrink-the-code-selection&#34;&gt;Expand and shrink the code selection&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;W&lt;/code&gt; to select the word under the caret, and you can continue to press it to move outwards to the entire call.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;W&lt;/code&gt; will work the other way around, shrinking down to a single word.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;comment-line&#34;&gt;Comment Line&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Comment any line using &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Slash&lt;/code&gt;. You can uncomment using the same command.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;duplicate-and-delete-lines&#34;&gt;Duplicate and Delete Lines&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Press &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;D&lt;/code&gt; wherever your caret is to duplicate it to another line below it. You can also duplicate multiple lines at the same time.&lt;/li&gt;&#xA;&lt;li&gt;You can press &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Y&lt;/code&gt; to delete the current line.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;move-code-fragments&#34;&gt;Move Code Fragments&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You can move whole lines down using &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;DownArrow&lt;/code&gt;. You can move whole lines up using &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;UpArrow&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;You can also move whole methods down, but replacing &lt;code&gt;Alt&lt;/code&gt; with &lt;code&gt;Ctrl&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;collapse&#34;&gt;Collapse&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;We often have to collapse code quickly for the sake of readability. We can use &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Minus&lt;/code&gt; to collapse anything we are currently in.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Equals&lt;/code&gt; will expand a code region.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;Minus&lt;/code&gt; will collapse all collapsible code in the file.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;Equals&lt;/code&gt; will expand all expandable parts of the file.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;surround-and-unwrap&#34;&gt;Surround and unwrap&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;You can select a piece of code, and use &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; to bring up the surround with template feature. You can choose from a few structures like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;try&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;You can unwrap using &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;Delete&lt;/code&gt;.\&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;multiple-selections&#34;&gt;Multiple selections&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Let&amp;rsquo;s say you have a bunch of &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; tags that need to be &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; tags. We can use our caret to hover over what we want, then use &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;J&lt;/code&gt; to select it.&lt;/li&gt;&#xA;&lt;li&gt;From there, we can use &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;J&lt;/code&gt; again to select the next occurrence, &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;J&lt;/code&gt; to deselect the last selected occurrence, and &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Alt&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;J&lt;/code&gt; to select all occurrences of it.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;8/12/2024&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 11</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-11/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-11/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;the-standard-library---part-2&#34;&gt;&lt;strong&gt;The Standard Library - Part 2&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;7/9/2024&lt;/p&gt;&#xA;&lt;p&gt;The second part here will go over more advanced, less common modules that nevertheless, exist.&lt;/p&gt;&#xA;&lt;h3 id=&#34;111-output-formatting&#34;&gt;&lt;strong&gt;11.1 Output Formatting&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;reprlib&lt;/code&gt; is an appropriately named library containing a version of &lt;code&gt;repr()&lt;/code&gt; modified for abbreviated displays of large or deeply nested containers:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reprlib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; reprlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repr(set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;supercalafragalisticexpialidocious&amp;#39;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;,...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pprint&lt;/code&gt; is a module with more sophisticated control over printing both built-in and user defined objects. Could also be called a &amp;ldquo;pretty printer&amp;rdquo;, it will add line breaks and indentation to more clearly reveal complex data structures.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Raspberry Pi NAS</title>
      <link>https://mrpointing.com/projects/raspberry-pi-nas/</link>
      <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/raspberry-pi-nas/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gyMpI8csWis&amp;t=122s&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 10</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-10/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;a-brief-tour-of-the-standard-library&#34;&gt;&lt;strong&gt;A Brief Tour of the Standard Library&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;7/4/2024&lt;/p&gt;&#xA;&lt;h3 id=&#34;101-operating-system-interface&#34;&gt;&lt;strong&gt;10.1 Operating System Interface&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;The &lt;code&gt;os&lt;/code&gt; module provides functions for interacting with operating systems:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()     &lt;span style=&#34;color:#75715e&#34;&gt;# returns the working directory&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Python312&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/server/accesslogs&amp;#39;&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;# change working directory&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mkdir today&amp;#39;&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;# run the command mkdir in the system shell&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Never use &lt;code&gt;from os import *&lt;/code&gt;. It&amp;rsquo;s not good practice to not  do this regardless, but it will specifically keep &lt;code&gt;os.open()&lt;/code&gt; from shadowing the built-in &lt;code&gt;open()&lt;/code&gt; function which operators for opening files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Formatting Percentages</title>
      <link>https://mrpointing.com/notes/computer-science/python/formatting-percentages/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/formatting-percentages/</guid>
      <description>&lt;p&gt;Modified: July 03 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;7/3/2024&lt;/p&gt;&#xA;&lt;p&gt;Taken from &lt;a href=&#34;https://pythonmldaily.com/posts/python-show-number-as-percentage-with-format-and-f-string&#34;&gt;this&lt;/a&gt; article.&lt;/p&gt;&#xA;&lt;p&gt;Often in projects, we want to format our large &lt;code&gt;float&lt;/code&gt; types as smaller percentages.&lt;/p&gt;&#xA;&lt;p&gt;There are three main ways to do this:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Rounding and Float/String Types:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;round()&lt;/code&gt; takes two parameters: a value and a number to round too. Then, we can use a little complicated string statement.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8839133112&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; n2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round(number, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; print(n2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.886&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; print(str(n2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Format()&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Alternatively, if that seems a bit complicated, we can just &lt;code&gt;format()&lt;/code&gt; instead.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 9</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-9/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-9/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;classes&#34;&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/28/2024&lt;/p&gt;&#xA;&lt;p&gt;Classes combine data storage and functionality into one package. When you make a new class, you are making a new &lt;em&gt;type&lt;/em&gt; of object. A new &lt;em&gt;instance&lt;/em&gt;, or occurrence of that type are able to be made using function call of the class.&lt;/p&gt;&#xA;&lt;p&gt;A class is made up of attributes and methods defined by the classes definition.&lt;/p&gt;&#xA;&lt;p&gt;Python classes follow closely to other Object Oriented Programming languages classes in the following ways:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flask&#39;s Quickstart</title>
      <link>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-quickstart/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/flask-notes/flasks-quickstart/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://flask.palletsprojects.com/en/3.0.x/&#34;&gt;Link&lt;/a&gt; to documentation.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Flask is a framework to create applications via Python. It makes web based applications rather simple.&lt;/p&gt;&#xA;&lt;p&gt;Starting from the &lt;a href=&#34;https://flask.palletsprojects.com/en/3.0.x/installation/#python-version&#34;&gt;here&lt;/a&gt;, the installation page.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;h3 id=&#34;python-version&#34;&gt;Python Version&lt;/h3&gt;&#xA;&lt;p&gt;Python version should be up to date. Flask supports 3.8 and newer.&lt;/p&gt;&#xA;&lt;h3 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h3&gt;&#xA;&lt;p&gt;The following are installed automatically when installing Flask:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/flask-notes/werkzeug/&#34;&gt;Werkzeug&lt;/a&gt; uses WSGI, the standard Python interface between applications and servers.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/flask-notes/jinja/&#34;&gt;Jinja&lt;/a&gt; is a template language that renders the pages your application serves.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://palletsprojects.com/p/markupsafe/&#34;&gt;MarkupSafe&lt;/a&gt; comes packaged with Jinja, and is used to avoid injection attacks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://palletsprojects.com/p/itsdangerous/&#34;&gt;ItsDangerous&lt;/a&gt; signs data securely to ensure integrity to protect Flask&amp;rsquo;s session cookie&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/flask-notes/click/&#34;&gt;Click&lt;/a&gt; is a framework that you use for writing command line applications. It allows the &lt;code&gt;flask&lt;/code&gt; command and custom commands&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://mrpointing.com/notes/computer-science/python/flask-notes/blinker/&#34;&gt;Blinker&lt;/a&gt; provides support for Signals&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;virtual-environments&#34;&gt;Virtual Environments&lt;/h3&gt;&#xA;&lt;p&gt;Flask promotes the use of a virtual environment to manage the dependencies of the project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 8</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-8/</link>
      <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-8/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;errors-and-exceptions&#34;&gt;&lt;strong&gt;Errors and Exceptions&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/22/2024&lt;/p&gt;&#xA;&lt;p&gt;There are two distinguishable types of errors: &lt;em&gt;syntax errors&lt;/em&gt; and &lt;em&gt;exceptions&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;81-syntax&#34;&gt;&lt;strong&gt;8.1 Syntax&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Syntax errors (or parsing errors) are errors involving the actual use of the language.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt; print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt; print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#f92672&#34;&gt;^^^^^&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SyntaxError&lt;/span&gt;: invalid syntax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, the &lt;code&gt;while&lt;/code&gt; statement is missing the &lt;code&gt;:&lt;/code&gt; required to use it.&lt;/p&gt;&#xA;&lt;h3 id=&#34;82-exceptions&#34;&gt;&lt;strong&gt;8.2 Exceptions&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Even if code is syntactically correct, an error may occur when attempting to execute it. When the error is thrown, the last line of the error usually has an explanation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a RESTful API</title>
      <link>https://mrpointing.com/projects/designing-a-restful-api/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/designing-a-restful-api/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Watched &lt;a href=&#34;https://www.youtube.com/watch?v=-mN3VyJuCjM&#34;&gt;this&lt;/a&gt; video to take some notes on what REST is.&lt;/p&gt;&#xA;&lt;p&gt;API: Application Programming Interface, is how to computers can communicate with each other.&lt;/p&gt;&#xA;&lt;p&gt;Client sends a Request to the server, server sends a response back to the client.&lt;/p&gt;&#xA;&lt;p&gt;REST, or Representational State Transfer, is the most popular way to communicate with these web servers.&lt;/p&gt;&#xA;&lt;p&gt;REST is actually a set of rules and standards. Any API that follows the REST rules is known as a RESTful API.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is NumPy</title>
      <link>https://mrpointing.com/notes/computer-science/python/numpy-notes/what-is-numpy/</link>
      <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/numpy-notes/what-is-numpy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://numpy.org/doc/stable/&#34;&gt;Link&lt;/a&gt; to documentation&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;what-is-numpy&#34;&gt;What is NumPy?&lt;/h1&gt;&#xA;&lt;p&gt;Python lists are great- easy to use, easy to understand, and perfect for quick one-and-done scenarios. However, there is a huge downside to lists. In most cases, since lists can accept any data type by default, this leaves lists open to unexpected data types you might not want around your list data.&lt;/p&gt;&#xA;&lt;p&gt;NumPy is a solution to this issue, specifically in the realm of scientific computing. It&amp;rsquo;s primary use is for it&amp;rsquo;s &lt;em&gt;multidimensional array objects&lt;/em&gt; and &lt;em&gt;assortment of fast methods for arrays&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 7</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-7/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-7/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;input-and-output&#34;&gt;&lt;strong&gt;Input and Output&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/18/2024&lt;/p&gt;&#xA;&lt;p&gt;There are three main ways to present output in Python; expression statements (not using &lt;code&gt;print()&lt;/code&gt;), using &lt;code&gt;print()&lt;/code&gt;, and using &lt;code&gt;write()&lt;/code&gt; which writes something into an existing or new file.&lt;/p&gt;&#xA;&lt;h3 id=&#34;71-fancier-output-formatting&#34;&gt;&lt;strong&gt;7.1 Fancier Output Formatting&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;At any point in the command line, I can just send out some text without any &lt;code&gt;print()&lt;/code&gt; commands and get back what I just sent in. That&amp;rsquo;s an expression statement. Not super important.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 6</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-6/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-6/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;modules&#34;&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/15/2024&lt;/p&gt;&#xA;&lt;p&gt;Obviously, using local instances are not viable for long time development is not realistic. This is why we write &lt;em&gt;scripts&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Python has the ability to writes scripts, or another method called modules. Definitions from modules can be imported into your instance of Python.&lt;/p&gt;&#xA;&lt;p&gt;Main is also given a definition here: the collection of variables that you have access to in a script executed at the top level and in calculator mode.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vinyl Visualizer</title>
      <link>https://mrpointing.com/projects/vinyl-visualizer/</link>
      <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/projects/vinyl-visualizer/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;A passion project I&amp;rsquo;d like to make. It would be my first time using hardware and software together.&lt;/p&gt;&#xA;&lt;p&gt;To start, I&amp;rsquo;d like to grab a raspberry pi with a screen and audio in so it can display the record cover, the title, artist, and duration that updates as the song goes on.&lt;/p&gt;&#xA;&lt;p&gt;I first asked &lt;a href=&#34;https://chatgpt.com/share/ec6a257c-6e65-4364-b964-c66f437d005c&#34;&gt;ChatGPT 3.5&lt;/a&gt; for advice.&lt;/p&gt;&#xA;&lt;p&gt;I also asked &lt;a href=&#34;https://chatgpt.com/share/7c70547a-f544-4dd5-a80a-b645661ac905&#34;&gt;ChatGPT 4o&lt;/a&gt; and got a little better/pointed advice. Not much different though. It gave me advice on the script without asking.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 5</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-5/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-5/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;data-structures&#34;&gt;&lt;strong&gt;Data Structures&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/10/2024&lt;/p&gt;&#xA;&lt;h3 id=&#34;51-more-on-lists&#34;&gt;&lt;strong&gt;5.1 More on Lists&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Methods for Lists:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;list.append(x)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Adds an item to the end of the list&lt;/li&gt;&#xA;&lt;li&gt;Equivalent to &lt;code&gt;a[len(a):] = [x]&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.extend(iterable)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Extend the list by appending all items from an iterable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.insert(i, x)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Insert an item into a given position, where &lt;code&gt;i&lt;/code&gt; is the index location and &lt;code&gt;x&lt;/code&gt; is the value&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.remove(x)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Remove the first item from the list whose value is equal to &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;ValueError&lt;/code&gt; if no such item&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.pop([i])&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Remove the item at the given position in the list, and return it. Without an index, it will remove and return the last item in the list. &lt;code&gt;IndexError&lt;/code&gt; if the list is empty or the index is out of the list range&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.clear()&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Remove all items from the list. Equivalent to &lt;code&gt;del a[:]&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.index(x[, start[, end]]&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Return zero-based index from the value &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;ValueError&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; does not exist.&lt;/li&gt;&#xA;&lt;li&gt;Parameters interpreted as slices from the list in &lt;code&gt;[]&lt;/code&gt; format&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.count(x)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Return the number of times &lt;code&gt;x&lt;/code&gt; appears in the list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.sort(*, key=None, reverse=False)&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sort the items of the list in place&lt;/li&gt;&#xA;&lt;li&gt;Arguments used for sort customization&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;key&lt;/code&gt; can be set to things like &lt;code&gt;key=str.lower&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s a good &lt;a href=&#34;https://docs.python.org/3.12/howto/sorting.html#sortinghowto&#34;&gt;doc&lt;/a&gt; on sorting I want to go over later&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.reverse()&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reverse the elements of the list in place&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list.copy()&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Return a copy of the list&lt;/li&gt;&#xA;&lt;li&gt;Same as &lt;code&gt;a[:]&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Atticus&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Shroomie&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reverse()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Atticus&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Atticus&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;David&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Aphrodite&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Atticus&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cats&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Peaches&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Methods like &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt; or &lt;code&gt;sort&lt;/code&gt; modify the list and actually return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 4</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-4/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-4/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;control-flow-tools&#34;&gt;&lt;strong&gt;Control Flow Tools&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;6/5/2024&lt;/p&gt;&#xA;&lt;p&gt;The while loop was seen in the previous Fibonacci Sequence example.&lt;/p&gt;&#xA;&lt;h3 id=&#34;41-if-statements&#34;&gt;&lt;strong&gt;4.1 &lt;code&gt;if&lt;/code&gt; Statements&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please enter an integer: &amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Please enter an integer: &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &#x9;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &#x9;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Negative so now it&amp;#39;s zero!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &#x9;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Zero!!!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &#x9;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UNO!!!!!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &#x9;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nice B)&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Nice B)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Very basic; all you need is an if statement. Else is optional, and you can have many else if (&lt;code&gt;elif&lt;/code&gt;) statements as you desire.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Python Tutorial Notes - Chapter 1, 2, and 3</title>
      <link>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</link>
      <pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://mrpointing.com/notes/computer-science/python/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</guid>
      <description>&lt;p&gt;Modified: July 19 2024&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/index.html&#34;&gt;Link to source&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;6/2/2024&lt;/p&gt;&#xA;&lt;p&gt;In order to get a better understanding of Python as a whole language, I&amp;rsquo;m going to document and take notes as I go through the tutorial. I mostly would like to improve as a programmer, and eventually get a software job at Google or something.&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;What is Python?&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Python is an easy to learn, powerful programming language. Featuring efficient high-level data structures as well as a simple but effective approach to object-oriented programming.&lt;/li&gt;&#xA;&lt;li&gt;Ideal language for scripting and rapid application development&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Description of objects and modules are in &lt;a href=&#34;https://docs.python.org/3/library/index.html#library-index&#34;&gt;The Python Standard Library&lt;/a&gt;. I&amp;rsquo;ll probably go through this another day.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
