<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced Python on Mr. Pointing</title>
    <link>http://localhost:1313/notes/computer-science/python/advanced-python/</link>
    <description>Recent content in Advanced Python on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 29 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/notes/computer-science/python/advanced-python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generators</title>
      <link>http://localhost:1313/notes/computer-science/python/advanced-python/generators/</link>
      <pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/advanced-python/generators/</guid>
      <description>Link to article 1. Link to article 2.</description>
    </item>
    <item>
      <title>How .join Works</title>
      <link>http://localhost:1313/notes/computer-science/python/advanced-python/how-.join-works/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/advanced-python/how-.join-works/</guid>
      <description>Link to article&#xA;A simple built-in string method of Python, .join() allows you to combine strings passed through an iterable of strings, using a separator string as the delimiter.&#xA;&amp;gt;&amp;gt;&amp;gt; facts = [&amp;#39;Giorno&amp;#39;, &amp;#39;is&amp;#39;, &amp;#39;the&amp;#39;, &amp;#39;strongest&amp;#39;, &amp;#39;Jojo&amp;#39;] &amp;gt;&amp;gt;&amp;gt; &amp;#34; &amp;#34;.join(facts) &amp;#34;Giorno is the strongest Jojo&amp;#34; # You could also set the delimiter into it&amp;#39;s own variable for more modularity &amp;gt;&amp;gt;&amp;gt; separator = &amp;#34; &amp;#34; &amp;gt;&amp;gt;&amp;gt; separator.join(facts) &amp;#34;Giorno is the strongest Jojo&amp;#34; You don&amp;rsquo;t have to use a whitespace either if you don&amp;rsquo;t want too.</description>
    </item>
    <item>
      <title>Sending Emails from Python</title>
      <link>http://localhost:1313/notes/computer-science/python/advanced-python/sending-emails-from-python/</link>
      <pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/advanced-python/sending-emails-from-python/</guid>
      <description>As shown in one of the chapter 10 in the Python Tutorial, we can send emails over a built-in smtplib module that you can send emails with. You can find a basic example there. In wanting to implement a email to the tattoo booking app, I wanted to do a tutorial on how I can set it up so that emails are sent from the tattoo artist&amp;rsquo;s email address, so it would be easy for the client to respond.</description>
    </item>
    <item>
      <title>Sorting Techniques</title>
      <link>http://localhost:1313/notes/computer-science/python/advanced-python/sorting-techniques/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/advanced-python/sorting-techniques/</guid>
      <description>Link to article&#xA;Sorting Basics There are two basic ways we can ascending sort (organize from least to greatest on value) built into Python, .sort() on a list object, and the sorted() function, which takes in any iterable sequence.&#xA;sorted() will actually return the sequence in order, while .sort() is more of a step to be done, and will actually return None.&#xA;&amp;gt;&amp;gt;&amp;gt; a = [3, 6, 1, 4] &amp;gt;&amp;gt;&amp;gt; sorted(a) [1, 3, 4, 6] &amp;gt;&amp;gt;&amp;gt; a.</description>
    </item>
    <item>
      <title>Decorators</title>
      <link>http://localhost:1313/notes/computer-science/python/advanced-python/decorators/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/advanced-python/decorators/</guid>
      <description>What is a Decorator? Essentially, a decorator, is a wrapping for function. It allows you to do something before and/or after a function is called. Let&amp;rsquo;s look at a super basic example;&#xA;def uppercase_word(function): def wrapper(): func = function() # call the function to get the return value make_upper = func.upper() return make_upper return wrapper Now, let&amp;rsquo;s say we make a really basic function to print text out;&#xA;def say_word(): return &amp;#34;say wooooord&amp;#34; We could print it out like this:</description>
    </item>
    <item>
      <title>Inheritance</title>
      <link>http://localhost:1313/notes/computer-science/python/advanced-python/inheritance/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/python/advanced-python/inheritance/</guid>
      <description>According to the AI road map I&amp;rsquo;ve been following, this and the rest of the concepts in this folder are meant to be considered more advanced concepts. Some of these have been covered in the Python Tutorial, some have not. This is the starting note, but I won&amp;rsquo;t link these concepts together unless necessary, as the concepts aren&amp;rsquo;t explicitly tied together.&#xA;What is Inheritance? Inheritance is the concept that you can build a new class based off of, or derived from, an existing class.</description>
    </item>
  </channel>
</rss>
