<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to Algorithms - Part 1 on Mr. Pointing</title>
    <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/</link>
    <description>Recent content in Introduction to Algorithms - Part 1 on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 02 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to Algorithms - Chapter 3</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-3/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;characterizing-running-times&#34;&gt;Characterizing Running Times&lt;/h1&gt;&#xA;&lt;p&gt;As we saw in Chapter 2, order of growth gives us the ability to quantify the effectiveness of our algorithms, and compare them.&lt;/p&gt;&#xA;&lt;p&gt;Us studying these algorithms at large enough input sizes is us studying the &lt;strong&gt;asymptotic efficiency&lt;/strong&gt; of an algorithm. We can say an algorithm that is &amp;ldquo;&lt;em&gt;more asymptotically efficient&lt;/em&gt;&amp;rdquo; is the better choice for most cases, save small inputs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;o-notation-theta-notation-and-omega-notation&#34;&gt;O-notation, $\Theta$-notation, and $\Omega$-notation&lt;/h2&gt;&#xA;&lt;p&gt;We already met $\Theta$-notation in chapter 2; this is a type of asymptotic notation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 2</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-2/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-2/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h2 id=&#34;getting-sorted&#34;&gt;Getting Sorted&lt;/h2&gt;&#xA;&lt;p&gt;This chapter is meant to familiarize yourself with the framework used throughout the book.&lt;/p&gt;&#xA;&lt;h2 id=&#34;21-insertion-sort&#34;&gt;2.1 Insertion Sort&lt;/h2&gt;&#xA;&lt;p&gt;Solves a sorting problem (obviously).&lt;/p&gt;&#xA;&lt;p&gt;The numbers to be sorted are known as &lt;em&gt;keys&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The input comes in the form of an array with &lt;code&gt;n&lt;/code&gt; elements.&lt;/p&gt;&#xA;&lt;p&gt;A reason to sort is often because those keys are associated with other data, &lt;em&gt;Satellite data&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Key + Satellite = &lt;em&gt;Record&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;We can think of a spreadsheet, with student records having many pieces of data. Any piece can be the key; whatever the key is, is how the record is sorted.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 1</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/</guid>
      <description>&lt;p&gt;Modified: August 02 2024&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;the-role-of-algorithms-in-computing&#34;&gt;The Role of Algorithms in Computing&lt;/h2&gt;&#xA;&lt;h2 id=&#34;11-algorithms&#34;&gt;1.1 Algorithms&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Algorithm:&lt;/strong&gt; Any well defined computational procedure that takes some value, or set of values, as &lt;em&gt;input&lt;/em&gt; and produces some value, or set of values, as &lt;em&gt;output&lt;/em&gt; in a finite amount of time.&lt;/p&gt;&#xA;&lt;p&gt;We often say algorithms help us solve computational problems.&lt;/p&gt;&#xA;&lt;p&gt;We can define a sorting algorithm like so:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; A sequence of &lt;em&gt;n&lt;/em&gt; numbers, &lt;code&gt;{a_1, a_2, ... a_n}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
