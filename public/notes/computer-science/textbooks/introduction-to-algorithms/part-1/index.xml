<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to Algorithms - Part 1 on Mr. Pointing</title>
    <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/</link>
    <description>Recent content in Introduction to Algorithms - Part 1 on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 02 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to Algorithms - Chapter 3</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-3/</link>
      <pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-3/</guid>
      <description>Characterizing Running Times As we saw in Chapter 2, order of growth gives us the ability to quantify the effectiveness of our algorithms, and compare them.&#xA;Us studying these algorithms at large enough input sizes is us studying the asymptotic efficiency of an algorithm. We can say an algorithm that is &amp;ldquo;more asymptotically efficient&amp;rdquo; is the better choice for most cases, save small inputs.&#xA;O-notation, $\Theta$-notation, and $\Omega$-notation We already met $\Theta$-notation in chapter 2; this is a type of asymptotic notation.</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 2</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-2/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-2/</guid>
      <description>Getting Sorted This chapter is meant to familiarize yourself with the framework used throughout the book.&#xA;2.1 Insertion Sort Solves a sorting problem (obviously).&#xA;The numbers to be sorted are known as keys.&#xA;The input comes in the form of an array with n elements.&#xA;A reason to sort is often because those keys are associated with other data, Satellite data.&#xA;Key + Satellite = Record&#xA;We can think of a spreadsheet, with student records having many pieces of data.</description>
    </item>
    <item>
      <title>Introduction to Algorithms - Chapter 1</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/introduction-to-algorithms/part-1/introduction-to-algorithms---chapter-1/</guid>
      <description>Modified: August 02 2024&#xA;The Role of Algorithms in Computing 1.1 Algorithms Algorithm: Any well defined computational procedure that takes some value, or set of values, as input and produces some value, or set of values, as output in a finite amount of time.&#xA;We often say algorithms help us solve computational problems.&#xA;We can define a sorting algorithm like so:&#xA;Input: A sequence of n numbers, {a_1, a_2, ... a_n}</description>
    </item>
  </channel>
</rss>
