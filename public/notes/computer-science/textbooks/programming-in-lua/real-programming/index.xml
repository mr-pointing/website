<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Real Programming on Mr. Pointing</title>
    <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/</link>
    <description>Recent content in Real Programming on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 22 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programming in Lua - Chapter 13</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-13/</link>
      <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-13/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;bits-and-bytes&#34;&gt;Bits and Bytes&lt;/h1&gt;&#xA;&lt;p&gt;Not a dense chapter, but we should recognize that Lua handles binary data very similarly to text. Let&amp;rsquo;s dive right into it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bitwise-operators&#34;&gt;Bitwise Operators&lt;/h2&gt;&#xA;&lt;p&gt;There are a few Lua operators that work only on integers and binary data; &lt;code&gt;&amp;amp;&lt;/code&gt; or AND, &lt;code&gt;|&lt;/code&gt; or OR, &lt;code&gt;~&lt;/code&gt; or BITWISE OR, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; or SHIFT RIGHT, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; or SHIFT LEFT, and &lt;code&gt;~&lt;/code&gt; which can also mean BITWISE NOT.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string.format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xabcd&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; cd&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string.format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xabcd&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; abff&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unsigned-integers&#34;&gt;Unsigned Integers&lt;/h2&gt;&#xA;&lt;p&gt;Essentially, unsigned integers are any numbers that can only represent non-negative values. By default, Lua does not support them, but there are workarounds that can help implement them in necessary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 12</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-12/</link>
      <pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;date-and-time&#34;&gt;Date and Time&lt;/h1&gt;&#xA;&lt;p&gt;Not Lua&amp;rsquo;s strong-suit, but there are ways to retrieve and filter on date and time. Although, the system is quite weird.&lt;/p&gt;&#xA;&lt;p&gt;Lua officially has two ways of representing date and time. First is a single number, known as the number of seconds from the &lt;em&gt;epoch&lt;/em&gt;, or some fixed date. POSIX and Windows use the date January 1st, 1970, 0:00 UTC.&lt;/p&gt;&#xA;&lt;p&gt;The second is through a table that&amp;rsquo;s a lot more human readable. &lt;em&gt;Date tables&lt;/em&gt; have fields for &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;sec&lt;/code&gt;, &lt;code&gt;wday&lt;/code&gt;, &lt;code&gt;yday&lt;/code&gt;, and &lt;code&gt;isdst&lt;/code&gt;. All are integers save for &lt;code&gt;isdst&lt;/code&gt;, which is a Boolean for daylight savings. There is no time zone set.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 11</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-11/</link>
      <pubDate>Thu, 17 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;most-frequent-words&#34;&gt;Most Frequent Words&lt;/h1&gt;&#xA;&lt;p&gt;Another interlude chapter, this time going over a pretty simple concept; reading and counting all the words within a file. It accomplishes three main tasks;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Reads all of the text, storing each count of the occurring word within a table&lt;/li&gt;&#xA;&lt;li&gt;Sorts the table based on the order of frequency&lt;/li&gt;&#xA;&lt;li&gt;Prints all results for &lt;code&gt;n&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; io.lines() &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; word &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; string.gmatch(line, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%w+&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    counter[word] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (counter[word] &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; pairs(counter) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  words[&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;words &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;table.sort(words, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (w1, w2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; counter[w1] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; counter[w2] &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         counter[w1] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; counter[w2] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; w1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; w2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; math.min(tonumber(arg[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; math,huge, &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;words)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  io.write(words[i], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, counter[words[i]], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;exercises&#34;&gt;Exercises&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;When we apply this type of function to some text, usually we get uninteresting small words as our most frequent. Change the above code to only get words with a count of 4 or more characters.&lt;/li&gt;&#xA;&lt;li&gt;Repeat the previous exercise, but instead of using length as the criteria for ignoring a word, the program should read from a text file a list of words to be ignored.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Next:&#xA;[[Programming in Lua - Chapter 12|Chapter 12]]&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 10</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-10/</link>
      <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-10/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;pattern-matching&#34;&gt;Pattern Matching&lt;/h1&gt;&#xA;&lt;p&gt;Due to Lua&amp;rsquo;s goal of maintaining a lite and quick language, it relies on it&amp;rsquo;s own method of pattern matching rather than POSIX regex or even Perl regex.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pattern-matching-functions&#34;&gt;Pattern Matching Functions&lt;/h2&gt;&#xA;&lt;p&gt;There are four pattern matching functions within Lua&amp;rsquo;s standard string library. We&amp;rsquo;ve actually already seen two of them, &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;gsub&lt;/code&gt;. We will cover those in slightly more detail, as well as the other two, &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;gmatch&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programming in Lua - Chapter 9</title>
      <link>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-9/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/textbooks/programming-in-lua/real-programming/programming-in-lua---chapter-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;closures&#34;&gt;Closures&lt;/h1&gt;&#xA;&lt;p&gt;The first advanced topic, more of a clarification, let&amp;rsquo;s discuss the true nature of functions and how they&amp;rsquo;re treated in Lua.&lt;/p&gt;&#xA;&lt;p&gt;Any function inside Lua is a &lt;em&gt;first-class value&lt;/em&gt;, meaning they are treated with similar properties as strings and numbers. This implies that not only can we store functions inside of variables, but we can also pass functions as arguments.&lt;/p&gt;&#xA;&lt;p&gt;Another concept that gives Lua additional flexibility is &lt;em&gt;lexical scoping&lt;/em&gt;, meaning nested functions have automatic access to variables in their enclosing function.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
