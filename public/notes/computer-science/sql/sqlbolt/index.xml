<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQLBolt on Mr. Pointing</title>
    <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/</link>
    <description>Recent content in SQLBolt on Mr. Pointing</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 15 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/notes/computer-science/sql/sqlbolt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQLBolt - Lesson 16</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-16/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-16/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;creating-tables&#34;&gt;Creating Tables&lt;/h1&gt;&#xA;&lt;p&gt;One of the hardest things to do in data science (at least, to me) is pick up another person&amp;rsquo;s collected data. It will often take a few minutes of &amp;ldquo;getting calibrated&amp;rdquo; to understand the rows from simple things like understanding naming conventions (some are really bad) to more complex things like what story the data is telling.&lt;/p&gt;&#xA;&lt;p&gt;The more complicated problems will end up needing some visualization tools which is something we&amp;rsquo;ll look at later, so for now let&amp;rsquo;s not think too big. However, one of the best ways to become more familiar with a dataset is to build it from scratch. Since we&amp;rsquo;re building it from scratch, that means we&amp;rsquo;re going to need some tables to store the data in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 17 &amp; 18</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-17--18/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-17--18/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;altering-tables&#34;&gt;Altering Tables&lt;/h1&gt;&#xA;&lt;p&gt;If you need to include additional information not provided by the original tables creation statement, you can use an &lt;code&gt;ALTER TABLE&lt;/code&gt; statement to manipulate and create columns.&lt;/p&gt;&#xA;&lt;h2 id=&#34;adding-columns&#34;&gt;Adding Columns&lt;/h2&gt;&#xA;&lt;p&gt;Extremely similar to how we add in new rows, adding in a new column uses the following syntax:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt; DataType OptionalTableConstraint&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;DEFAULT&lt;/span&gt; default_value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We specify a table we want to add into, provide the column&amp;rsquo;s name and datatype, and we have the option for a table constraint and default value if needed. It&amp;rsquo;s usually good practice to insert some default value, since all rows that already exist in the table will need some value for the new column (otherwise it will be NULL).&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 13</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-13/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-13/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;inserting-rows&#34;&gt;Inserting Rows&lt;/h1&gt;&#xA;&lt;p&gt;When we first started going over SQL databases, we just understood them as basic tables with columns of properties and rows of instances. The next step up is the &lt;em&gt;Database Schema&lt;/em&gt;, which describes all tables in a database and the datatypes those rows can contain.&lt;/p&gt;&#xA;&lt;p&gt;Because each row has defined types that are allowed, it keeps the database cleaner and easier to navigate.&lt;/p&gt;&#xA;&lt;p&gt;Our first non-&lt;code&gt;SELECT&lt;/code&gt; statement, we can start to insert data into our tables using the &lt;code&gt;INSERT&lt;/code&gt; statement:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 14 &amp; 15</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-14--15/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-14--15/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;updating-rows&#34;&gt;Updating Rows&lt;/h1&gt;&#xA;&lt;p&gt;If we can &lt;code&gt;SELECT&lt;/code&gt; rows, and &lt;code&gt;INSERT&lt;/code&gt; data into rows, we can most certainly &lt;code&gt;UPDATE&lt;/code&gt; them as well.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;UPDATE&lt;/code&gt; works similarly to &lt;code&gt;INSERT&lt;/code&gt;, and needs a &lt;code&gt;WHERE&lt;/code&gt; clause to specify which rows should be updated:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value_or_expression&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    other_column &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value_or_expression&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; condition;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Obviously, like &lt;code&gt;INSERT&lt;/code&gt;, the values or expressions returned should match the data type of the expected column/property.&lt;/p&gt;&#xA;&lt;p&gt;A helpful tip is to always try a &lt;code&gt;SELECT&lt;/code&gt; statement out first to make sure you are grabbing all the rows you think you want &lt;em&gt;before&lt;/em&gt; you make any changes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 10 &amp; 11</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-10--11/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-10--11/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;queries-with-aggregates&#34;&gt;Queries with Aggregates&lt;/h1&gt;&#xA;&lt;p&gt;Aggregates are analogous with built-in functions. They&amp;rsquo;re helpful pieces of code we can use to make writing our queries easier. The syntax is as follows:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; AGG_FUNC(column_or_expression) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; agg_description&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; constraint_expression;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the previous syntax, we would use said function over all rows and return a single result. Here are some functions we&amp;rsquo;ll use:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;COUNT(column or *)&lt;/code&gt;: returns the number of rows if no columns specified, otherwise returns number of non-NULL values in chosen column&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MIN(column)&lt;/code&gt;: returns smallest numerical value for all rows in group&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MAX(column)&lt;/code&gt;: returns largest numerical value for all rows in group&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AVG(column)&lt;/code&gt;: returns average numerical value for all rows in group&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SUM(column)&lt;/code&gt;: returns sum of all numerical values for all rows in the group&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;There&amp;rsquo;s another concept we should look at called &lt;em&gt;grouped aggregate functions&lt;/em&gt;, which instead of returning values for all rows, allows you to return multiple values based upon a specified delimiter or group. We can achieve this by using the &lt;code&gt;GROUP BY&lt;/code&gt; statement:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 12</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-12/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-12/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;order-of-execution&#34;&gt;Order of Execution&lt;/h1&gt;&#xA;&lt;p&gt;The order of execution within queries is important to understand. When getting unexpected output one of the first things you should check is your syntax and be sure you 100% know what you&amp;rsquo;re saying/what you expect to get back. If you aren&amp;rsquo;t writing complete or correct sentences, you&amp;rsquo;ll never get correct responses.&lt;/p&gt;&#xA;&lt;p&gt;The following syntax is the complete structure for a query and is executed sequentially (one after the other):&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 9</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-9/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-9/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;queries-with-expressions&#34;&gt;Queries with Expressions&lt;/h1&gt;&#xA;&lt;p&gt;Now that we understand the basics of querying, we can really start to dive deeper by building more complex statements as &lt;em&gt;expressions&lt;/em&gt;. These expressions can be mathematical or even basic string functions.&lt;/p&gt;&#xA;&lt;p&gt;When writing expressions, we should use the &lt;code&gt;AS&lt;/code&gt; keyword to create an alias for our expression, which makes our statements easier to read. This can be used on columns or tables.&lt;/p&gt;&#xA;&lt;p&gt;The following statement is a great example of an expression:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 7</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-7/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-7/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;outer-joins-vs-inner-joins&#34;&gt;Outer Joins vs. Inner Joins&lt;/h1&gt;&#xA;&lt;p&gt;Any table from an &lt;code&gt;INNER JOIN&lt;/code&gt; will &lt;em&gt;only contain information that belongs in &lt;strong&gt;BOTH&lt;/strong&gt; tables.&lt;/em&gt; These can be limiting, which is where &lt;code&gt;LEFT&lt;/code&gt;, &lt;code&gt;RIGHT&lt;/code&gt;, and &lt;code&gt;FULL JOIN&lt;/code&gt;&amp;rsquo;s come into the picture.&lt;/p&gt;&#xA;&lt;p&gt;Our syntax for a standard expression doesn&amp;rsquo;t change, only get&amp;rsquo;s different options for our &lt;code&gt;JOIN&lt;/code&gt; keyword.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;, another_table_column, ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INNER&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RIGHT&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; another_table&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; mytable.id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; another_table.id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; condition(s)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;, ... &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; num_limit &lt;span style=&#34;color:#66d9ef&#34;&gt;OFFSET&lt;/span&gt; num_offset;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s say we have two tables, joining table A to table B. Doing a &lt;code&gt;LEFT JOIN&lt;/code&gt; will include rows from A even if there isn&amp;rsquo;t a match in B. Similarly, a &lt;code&gt;RIGHT JOIN&lt;/code&gt; will return rows found in B even if there is no match in A. If we were to do a &lt;code&gt;FULL JOIN&lt;/code&gt;, all rows are kept even if there is no match.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 8</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-8/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-8/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;null-values&#34;&gt;NULL Values&lt;/h1&gt;&#xA;&lt;p&gt;Unfortunately, working with data is an easy way to see that we don&amp;rsquo;t live in a perfect world. There are more than a few instances of there not being any data available to display, which can cause all sorts of issues with our queries. These values are what we call &lt;strong&gt;NULLS&lt;/strong&gt;*, and can differ depending on your situation.&lt;/p&gt;&#xA;&lt;p&gt;Most often at the start, we can leave them as NULL. However, depending on the structure of your table, you could do a 0, or even an empty text string.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 4</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-4/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-4/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;filtering-and-sorting-results&#34;&gt;Filtering and Sorting Results&lt;/h1&gt;&#xA;&lt;p&gt;One way to ensure we don&amp;rsquo;t get duplicate rows, we could use the &lt;code&gt;DISTINCT&lt;/code&gt; keyword;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DISTINCT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;, another_column, ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; condition(s);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This however is pretty indiscriminate, and we&amp;rsquo;ll look at how to specify duplicates with &lt;code&gt;GROUP BY&lt;/code&gt; later.&lt;/p&gt;&#xA;&lt;p&gt;Often in the real world, our data is not going to be ordered nice and neatly. Quite often, data is inserted without rhyme or reason, and purely based off when some events happened and collected rather than compared to the rest of the data in the data set. Because of this, we&amp;rsquo;ll want to order our data off a certain condition to make it more readable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 6</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-6/</link>
      <pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-6/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;multi-table-queries-with-joins&#34;&gt;Multi-table Queries with JOINs&lt;/h1&gt;&#xA;&lt;p&gt;Unlike the database we&amp;rsquo;ve been using for most of these lessons, real world data is usually divided into different tables, often through a process we call &lt;strong&gt;normalization&lt;/strong&gt;. Normalization is the procedure used to break down large tables into smaller more organic tables. This reduces duplicate data, and allows for a more natural growth of data within respective tables.&lt;/p&gt;&#xA;&lt;p&gt;Due to our data being broken up, our queries will in turn have to become more complex to grab information over multiple tables. We can achieve this with a &lt;code&gt;JOIN&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 2</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-2--3/</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-2--3/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;specifying-data-to-select-constraints&#34;&gt;Specifying Data to Select (Constraints)&lt;/h1&gt;&#xA;&lt;p&gt;When our table has only a few rows, a &lt;code&gt;select *&lt;/code&gt; query isn&amp;rsquo;t so bad. However, if we have hundreds, sometimes thousands of rows of data, retrieving all of them at once becomes an issue.&lt;/p&gt;&#xA;&lt;p&gt;That reason is why we have the ability to specify our results with conditional statements:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;column&lt;/span&gt;, another_column, ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; mytable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; condition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; another_condition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;OR&lt;/span&gt; ...;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can collect more complex results from building more complex queries. Say for example we wanted to collect reptiles who don&amp;rsquo;t have teeth and are the color green, we could use a query like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Introduction</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---introduction/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---introduction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sqlbolt.com/lesson/introduction&#34;&gt;Link&lt;/a&gt; to lessons.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;introduction-to-sql&#34;&gt;Introduction to SQL&lt;/h1&gt;&#xA;&lt;p&gt;What is SQL? &lt;strong&gt;Structured Query Language&lt;/strong&gt; is a language used to create, maintain, and use relational databases. Thousands of applications from simple projects to Microsoft products use SQL through various formats and configurations.&lt;/p&gt;&#xA;&lt;p&gt;Some use SQLite, MySQL, Postgres, Oracle, or Microsoft SQL, to name a few. Each use SQL as base, and include features that garner appeal from different developers.&lt;/p&gt;&#xA;&lt;h2 id=&#34;relational-databases&#34;&gt;Relational Databases&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;em&gt;relational database&lt;/em&gt; is a collection of 2D tables that are linked through some key value. All tables are made of a certain number of rows and columns.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLBolt - Lesson 1</title>
      <link>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-1/</link>
      <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/computer-science/sql/sqlbolt/sqlbolt---lesson-1/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;When we want to get information for a SQL table, we use the &lt;code&gt;SELECT&lt;/code&gt; statement, or a &lt;em&gt;query&lt;/em&gt;. Within a query is what data we want, where to get it from, and any additional formatting we want done before we get said data.&lt;/p&gt;&#xA;&lt;p&gt;When selecting information from a table, we have to understand the make-up of a table. Let&amp;rsquo;s say we have a &lt;code&gt;reptiles&lt;/code&gt; table. There might be different types of reptiles (snakes, lizards, turtles, crocodiles) but each reptile has characteristics that make it unique. These characteristics are broken down into the different columns within a table, and each entry of a reptile is denoted by the rows.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
