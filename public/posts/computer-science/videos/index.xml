<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Videos on Mr. Pointing</title>
        <link>https://mrpointing.com/posts/computer-science/videos/</link>
        <description>Recent content in Videos on Mr. Pointing</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://mrpointing.com/posts/computer-science/videos/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How to Start a Homelab for $0</title>
            <link>https://mrpointing.com/posts/computer-science/videos/how-to-start-a-homelab-for-0/</link>
            <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/videos/how-to-start-a-homelab-for-0/</guid>
            <description>Modified: July 19 2024
Link to video.
Building a Homelab is easier and more affordable than ever before.
You can start homelabbing with extra tech or cloud options.
Clustering, through something like Kubernetes, you can start small. One small machine, and expand as you grow. All you need is a command line and 2gb of RAM.
Self hosting might need something more stable.
One way to start is with an old laptop.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<p><a href="https://www.youtube.com/watch?v=upC8G5yFBsA">Link</a> to video.</p>
<hr>
<p>Building a Homelab is easier and more affordable than ever before.</p>
<p>You can start homelabbing with extra tech or cloud options.</p>
<p>Clustering, through something like Kubernetes, you can start small. One small machine, and expand as you grow. All you need is a command line and 2gb of RAM.</p>
<p>Self hosting might need something more stable.</p>
<p>One way to start is with an old laptop. The creator started with one with just 4gb of RAM.</p>
<p>Linux runs almost anywhere with Ubuntu Server and Docker. I currently have ubuntu running on a virtual machine but haven&rsquo;t gotten very far other than basic command line instructional.</p>
<p>Not really into this option at the moment, mostly because I&rsquo;m more interested in going the <a href="https://mrpointing.com/posts/projects/raspberry-pi-nas/">Raspberry Pi NAS</a> route.</p>
<p>Oracle Free Tier has free cloud services. 32gb for free. Pretty much what I&rsquo;m doing but getting into the things mentioned previously.</p>
<p>Microsoft Azure is also an option, apparently you get $200 worth of credit when you sign up with your card and you don&rsquo;t get charged.</p>
<p>Plugged his community which is $29 a month&hellip;a little pricey if you ask me. I bet if I threw up one for $1 a month people would subscribe because he has over 250 people paying him (probably ~ $6000?).</p>
]]></content>
        </item>
        
        <item>
            <title>How To Use @dataclass in Python</title>
            <link>https://mrpointing.com/posts/computer-science/videos/how-to-use-@dataclass-in-python/</link>
            <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/videos/how-to-use-@dataclass-in-python/</guid>
            <description>Modified: July 19 2024
Link to video.
Can be faster than creating a regular class.
How classes are typically written:
class Fruit: def __init__(self, name: str, calories: float): self.name = name self.calories = calories banana = Fruit(&amp;#39;Banana&amp;#39;, 10) We can do the same with a dataclass:
from dataclasses import dataclass @dataclass class Fruit: name: str calories: float banana = Fruit(&amp;#39;Banana&amp;#39;, 10) With the first example, we wouldn&amp;rsquo;t be able to print it nicely without writing a __str__ representation, but here, we can print out banana and get Fruit(name=&#39;Banana&#39;, calories=10), which looks much nicer.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<p><a href="https://www.youtube.com/watch?v=mVea6Mu15l8">Link</a> to video.</p>
<hr>
<p>Can be faster than creating a regular class.</p>
<p>How classes are typically written:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Fruit</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, name: str, calories: float):  
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name  
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>calories <span style="color:#f92672">=</span> calories  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>banana <span style="color:#f92672">=</span> Fruit(<span style="color:#e6db74">&#39;Banana&#39;</span>, <span style="color:#ae81ff">10</span>)
</span></span></code></pre></div><p>We can do the same with a <code>dataclass</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> dataclasses <span style="color:#f92672">import</span> dataclass
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@dataclass</span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Fruit</span>:  
</span></span><span style="display:flex;"><span>    name: str  
</span></span><span style="display:flex;"><span>    calories: float  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>banana <span style="color:#f92672">=</span> Fruit(<span style="color:#e6db74">&#39;Banana&#39;</span>, <span style="color:#ae81ff">10</span>)
</span></span></code></pre></div><p>With the first example, we wouldn&rsquo;t be able to print it nicely without writing a <code>__str__</code> representation, but here, we can print out <code>banana</code> and get <code>Fruit(name='Banana', calories=10)</code>, which looks much nicer. You could also set <code>float = 10</code> so that calories are set to 10 by default.</p>
<p>Another nice feature that <code>dataclass</code> make up for is comparison. When using the equality operator, <code> ==</code>,  in a regular class two instances with the same content would not return <code>True</code>, since they are not the same <em>instance</em>. You could only use <code>isinstance()</code>, which would return <code>True</code> if you compared them against one another like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>banana <span style="color:#f92672">=</span> Fruit(<span style="color:#e6db74">&#39;Banana&#39;</span>, <span style="color:#ae81ff">10</span>)  
</span></span><span style="display:flex;"><span>banana2 <span style="color:#f92672">=</span> Fruit(<span style="color:#e6db74">&#39;Banana&#39;</span>, <span style="color:#ae81ff">10</span>)  
</span></span><span style="display:flex;"><span>print(isinstance(banana, Fruit) <span style="color:#f92672">==</span> isinstance(banana2, Fruit))
</span></span></code></pre></div><p>However, this isn&rsquo;t very pretty, and they are just checking if they are both an instance of the same class.</p>
<p>We can achieve this with <code>dataclass</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>banana <span style="color:#f92672">=</span> Fruit(<span style="color:#e6db74">&#39;Banana&#39;</span>, <span style="color:#ae81ff">10</span>)  
</span></span><span style="display:flex;"><span>banana2 <span style="color:#f92672">=</span> Fruit(<span style="color:#e6db74">&#39;Banana&#39;</span>, <span style="color:#ae81ff">10</span>)  
</span></span><span style="display:flex;"><span>print(banana <span style="color:#f92672">==</span> banana2)
</span></span></code></pre></div><p><br>
Another way we could achieve this with regular classes is by writing an <code>__eq__</code> method, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> __eq__(self, other):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>__dict__ <span style="color:#f92672">==</span> other<span style="color:#f92672">.</span>__dict__
</span></span></code></pre></div><p>With such a basic example its hard to argue over writing a few extra lines. However, when the class gets more complex, I could see using <code>dataclass</code> to be more useful.</p>
<p>If we set the <code>frozen</code> attribute of a <code>dataclass</code> decorator to <code>True</code>, it will make the class read only, not allowing for modifications. Dataclasses allow for the same dot operator modifications as normal classes.</p>
<p>Each time you create a class or data class, Python makes a dictionary for that class for it easier to grab attributes. Slots are a good idea to implement to avoid having to recreate it every time we make a new instance of the class. We use the <code>__slots__</code> method when creating our data class. We can&rsquo;t use default values when using slots, and must use list formatting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#a6e22e">@dataclass</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Fruit</span>:
</span></span><span style="display:flex;"><span>	__slots__ <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;name&#39;</span>, <span style="color:#e6db74">&#39;calories&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	name: str
</span></span><span style="display:flex;"><span>	calories: float
</span></span></code></pre></div><p>We&rsquo;ll now have faster attribute access and should also reduce usage of RAM.</p>
<p>After Python 3.10, we could achieve the same as above even simpler:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#a6e22e">@dataclass</span>(slots<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Fruit</span>:
</span></span><span style="display:flex;"><span>	name: str
</span></span><span style="display:flex;"><span>	calories: float
</span></span></code></pre></div><p>If you want to change the <code>string</code> or <code>repr</code> representation, you can always overwrite them using the appropriate <code>__str__</code>, or <code>__repr__</code> method.</p>
<p>If you use the <code>kw_only</code> attribute in your <code>dataclass</code>, you&rsquo;ll only be able to assign values via keywords only.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#a6e22e">@dataclass</span>(kw_only<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Fruit</span>:
</span></span><span style="display:flex;"><span>	name: str
</span></span><span style="display:flex;"><span>	calories: float
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> __str__(self):
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>calories<span style="color:#e6db74">}</span><span style="color:#e6db74"> calories&#39;</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>The Ultimate Guide to Writing Functions</title>
            <link>https://mrpointing.com/posts/computer-science/videos/the-ultimate-guide-to-writing-functions/</link>
            <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/videos/the-ultimate-guide-to-writing-functions/</guid>
            <description>Modified: July 23 2024
Link to video.
Tip 1: Do one thing, and do it well A function should perform a single task.
Think about the level of abstraction; the function should be on the same level of abstraction.
He brings up two examples, one of a function that iterates through a collection, checking each value against a matcher to return if one exists. He says this has two levels of abstraction; the iteration, and the comparison.</description>
            <content type="html"><![CDATA[<p>Modified: July 23 2024</p>
<p><a href="https://www.youtube.com/watch?v=yatgY4NpZXE">Link</a> to video.</p>
<hr>
<h3 id="tip-1-do-one-thing-and-do-it-well">Tip 1: Do one thing, and do it well</h3>
<p>A function should perform a single task.</p>
<p>Think about the level of abstraction; the function should be on the same level of abstraction.</p>
<p>He brings up two examples, one of a function that iterates through a collection, checking each value against a matcher to return if one exists. He says this has two levels of abstraction; the iteration, and the comparison.</p>
<p>He then uses another function that does a Luhn Checksum, then validates the persons card if said checksum returns positive. He brings up that this is doing way too much, and actually decides to split this up. Mostly because the calculation does so many things in comparison to our first example with just two objectives.</p>
<p>He then brings up that even the broken up second half, that uses the checksum as a separate function and calculates some other authorization, is doing two things at once, retrieving information and returning. This leads into the second tip.</p>
<h3 id="tip-2-separate-commands-from-queries">Tip #2: Separate commands from queries</h3>
<p>A function either does a query or does a command.</p>
<p>He changes the second function, the validating card function, to not have it&rsquo;s own function to return a value, but just perform a return on some statement.</p>
<h3 id="tip-3-only-request-information-you-actually-need">Tip #3: Only request information you actually need</h3>
<p>Before, the function to validate the card would take in the entire person object, retrieving their name, home information, etc. This is hardly usable due to it taking up more space and not being as scalable.</p>
<p>He updates it to take in just the persons credit card information. This also changes the call to validate, as you don&rsquo;t pass a person, but a persons credentials.</p>
<p>He also brings up that you could make them passable as keywords if you wanted by changing the passing to start with <code>keyword=</code>, and putting <code>*,</code> at the beginning of the function definition you are calling with.</p>
<h3 id="tip-4-keep-the-number-of-parameters-minimal">Tip #4: Keep the number of parameters minimal</h3>
<p>With our new function that takes in the persons credit card number, expiry month and year, we now have a function that takes in three parameters. Even this looks more cluttered, and we can shorten this even further by implementing the credit card info as a class by itself.</p>
<p>Instead of making a dictionary in the person class, which was my first thought, he actually makes a separate class with the <code>Protocol</code> attribute. I need to learn what this does because I don&rsquo;t understand how Python knows to grab <code>number</code>, <code>exp_month</code>, and <code>exp_year</code> without being explicitly told it&rsquo;s a card type.</p>
<p>He also goes over how to just remove the card information from the user all together, create a separate card class, and pass in a type <code>card</code> when you create the <code>person</code> class.</p>
<p>The rest of the video was okay. I have a lot more work to understand about Python classes and functions, so for right now I think I&rsquo;m set.</p>
]]></content>
        </item>
        
        <item>
            <title>Browsers HTTP and You!</title>
            <link>https://mrpointing.com/posts/computer-science/videos/browsers-http-and-you/</link>
            <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/videos/browsers-http-and-you/</guid>
            <description>Modified: July 19 2024
Link to video.
Request/Response Cycle It&amp;rsquo;s like a conversation. Client and server advertise capabilities and supported formats to one another.
HTTP is stateless, but the implementation will do state like things like caching. You need to see both sides of the conversation.
Anatomy of a request GET / HTTP/1.1 Host: localhost:8001 Request body. Anatomy of a response HTTP/1.0 200 OK X-Headers: Here Response body. Request headers Sent automatically&amp;hellip;when not doing Ajax</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<p><a href="https://www.youtube.com/watch?v=ZazQd2BCA08&list=PLU-P2PlzpIf3EpWfxk-Mu_ZVJVS5Wb-_e&index=36">Link</a> to video.</p>
<hr>
<h3 id="requestresponse-cycle">Request/Response Cycle</h3>
<p>It&rsquo;s like a conversation. Client and server advertise capabilities and supported formats to one another.</p>
<p>HTTP is stateless, but the implementation will do state like things like caching. You need to see both sides of the conversation.</p>
<h3 id="anatomy-of-a-request">Anatomy of a request</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#a6e22e">GET</span> / <span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.1</span>
</span></span><span style="display:flex;"><span>Host<span style="color:#f92672">:</span> <span style="color:#ae81ff">localhost:8001</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Request body.
</span></span></code></pre></div><h3 id="anatomy-of-a-response">Anatomy of a response</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#66d9ef">HTTP</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1.0</span> <span style="color:#ae81ff">200</span> <span style="color:#a6e22e">OK</span>
</span></span><span style="display:flex;"><span>X-Headers<span style="color:#f92672">:</span> <span style="color:#ae81ff">Here</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Response body.
</span></span></code></pre></div><h3 id="request-headers">Request headers</h3>
<p>Sent automatically&hellip;when not doing Ajax</p>
<p>When sending <code>img</code>, <code>css</code>, or <code>script</code> requests, Cookies are sent.</p>
]]></content>
        </item>
        
        <item>
            <title>You Can Do Really Cool Things With Functions in Python</title>
            <link>https://mrpointing.com/posts/computer-science/videos/you-can-do-really-cool-things-with-functions-in-python/</link>
            <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/videos/you-can-do-really-cool-things-with-functions-in-python/</guid>
            <description>Modified: July 15 2024
Link to video.
This video goes over some uncommon ways to use functions in Python. It uses the following code as a base:
&amp;#34;&amp;#34;&amp;#34; main.py &amp;#34;&amp;#34;&amp;#34; import statistics from dataclasses import dataclass from typing import Protocol from exchange import Exchange class TradingStrategy(Protocol): &amp;#34;&amp;#34;&amp;#34;Trading strategy that decides whether to buy or sell, given a list of prices&amp;#34;&amp;#34;&amp;#34; def should_buy(self, prices: list[int]) -&amp;gt; bool: raise NotImplementedError() def should_sell(self, prices: list[int]) -&amp;gt; bool: raise NotImplementedError() class AverageTradingStrategy: &amp;#34;&amp;#34;&amp;#34;Trading strategy based on price averages.</description>
            <content type="html"><![CDATA[<p>Modified: July 15 2024</p>
<p><a href="https://www.youtube.com/watch?v=ph2HjBQuI8Y&list=PLU-P2PlzpIf3EpWfxk-Mu_ZVJVS5Wb-_e&index=35">Link</a> to video.</p>
<hr>
<p>This video goes over some uncommon ways to use functions in Python. It uses the following code as a base:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;  
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">main.py 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> statistics  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> dataclasses <span style="color:#f92672">import</span> dataclass  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Protocol  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> exchange <span style="color:#f92672">import</span> Exchange  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TradingStrategy</span>(Protocol):  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Trading strategy that decides whether to buy or sell, given a list of prices&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy</span>(self, prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">NotImplementedError</span>()  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell</span>(self, prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">NotImplementedError</span>()  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AverageTradingStrategy</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Trading strategy based on price averages.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy</span>(self, prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>        list_window <span style="color:#f92672">=</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>:]  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;</span> statistics<span style="color:#f92672">.</span>mean(list_window)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell</span>(self, prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>        list_window <span style="color:#f92672">=</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>:]  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;</span> statistics<span style="color:#f92672">.</span>mean(list_window)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MinMaxTradingStrategy</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Trading strategy based on price minima and maxima.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy</span>(self, prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># buy if it&#39;s below $32,000  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">32_000_00</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell</span>(self, prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># sell if it&#39;s above $33,000  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">33_000_00</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@dataclass</span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TradingBot</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Trading bot that connects to a crypto exchange and performs trades.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    exchange: Exchange  
</span></span><span style="display:flex;"><span>    trading_strategy: TradingStrategy  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run</span>(self, symbol: str) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>        prices <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>exchange<span style="color:#f92672">.</span>get_market_data(symbol)  
</span></span><span style="display:flex;"><span>        should_buy <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>trading_strategy<span style="color:#f92672">.</span>should_buy(prices)  
</span></span><span style="display:flex;"><span>        should_sell <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>trading_strategy<span style="color:#f92672">.</span>should_sell(prices)  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> should_buy:  
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>exchange<span style="color:#f92672">.</span>buy(symbol, <span style="color:#ae81ff">10</span>)  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> should_sell:  
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>exchange<span style="color:#f92672">.</span>sell(symbol, <span style="color:#ae81ff">10</span>)  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:  
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;No action required for </span><span style="color:#e6db74">{</span>symbol<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#39;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>() <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Creates the exchange and connects to it  </span>
</span></span><span style="display:flex;"><span>    exchange <span style="color:#f92672">=</span> Exchange()  
</span></span><span style="display:flex;"><span>    exchange<span style="color:#f92672">.</span>connect()  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># create the trading strategy  </span>
</span></span><span style="display:flex;"><span>    trading_strategy <span style="color:#f92672">=</span> AverageTradingStrategy()  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># create the trading bot and run the bot once  </span>
</span></span><span style="display:flex;"><span>    bot <span style="color:#f92672">=</span> TradingBot(exchange, trading_strategy)  
</span></span><span style="display:flex;"><span>    bot<span style="color:#f92672">.</span>run(<span style="color:#e6db74">&#39;BTC/USD&#39;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:  
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">exchange.py
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>PRICE_DATA <span style="color:#f92672">=</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;BTC/USD&#34;</span>: [  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">35_842_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">34_069_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">33_871_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">34_209_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">32_917_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">33_931_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">33_370_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">34_445_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">32_901_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">33_013_00</span>,  
</span></span><span style="display:flex;"><span>    ],  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;ETH/USD&#34;</span>: [  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">2_381_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">2_233_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">2_300_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">2_342_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">2_137_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">2_156_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">2_103_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">2_165_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">2_028_00</span>,  
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">2_004_00</span>,  
</span></span><span style="display:flex;"><span>    ],  
</span></span><span style="display:flex;"><span>}  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ExchangeConnectionError</span>(<span style="color:#a6e22e">Exception</span>):  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Custom error that is raised when an exchange connection fails.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Exchange</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>connected <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">connect</span>(self) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Connects to the exchange.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">&#34;Connecting to Crypto Bullshit...&#34;</span>)  
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>connected <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_connection</span>(self) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Checks if the exchange is connected.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> self<span style="color:#f92672">.</span>connected:  
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">raise</span> ExchangeConnectionError(<span style="color:#e6db74">&#34;Exchange is not connected dummy.&#34;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_market_data</span>(self, symbol: str) <span style="color:#f92672">-&gt;</span> list[int]:  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Returns fake market price for data given a market symbol.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>check_connection()  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> PRICE_DATA[symbol]  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">buy</span>(self, symbol: str, amount: int) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Simulate buying an amount of a given symbol at current price.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>check_connection()  
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Buying amount </span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">}</span><span style="color:#e6db74"> in market </span><span style="color:#e6db74">{</span>symbol<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#39;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sell</span>(self, symbol: str, amount: int) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;Simulate selling an amount of a given symbol at current price.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>check_connection()  
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Selling amount </span><span style="color:#e6db74">{</span>amount<span style="color:#e6db74">}</span><span style="color:#e6db74"> in market </span><span style="color:#e6db74">{</span>symbol<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#39;</span>)
</span></span></code></pre></div><p>Functions can replicate or even replace code that is heavily reliant on classes. As we see in the code above, the structure is built off of a base <code>TradingStrategy()</code> class, and is used/reference many times.</p>
<p>We can rebuild the previous example like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;  
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">main.py with functions instead of classes 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> statistics  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> dataclasses <span style="color:#f92672">import</span> dataclass  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Callable, Protocol  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> exchange <span style="color:#f92672">import</span> Exchange  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>TradingStrategyFunction <span style="color:#f92672">=</span> Callable[list[int], bool]  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy_avg</span>(prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>    list_window <span style="color:#f92672">=</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>:]  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;</span> statistics<span style="color:#f92672">.</span>mean(list_window)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell_avg</span>(prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>    list_window <span style="color:#f92672">=</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>:]  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;</span> statistics<span style="color:#f92672">.</span>mean(list_window)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy_minmax</span>(prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># buy if it&#39;s below $32,000  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">32_000_00</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell_minmax</span>(prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># sell if it&#39;s above $33,000  </span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">33_000_00</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@dataclass</span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TradingBot</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Trading bot that connects to a crypto exchange and performs trades.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    exchange: Exchange  
</span></span><span style="display:flex;"><span>    buy_strategy: TradingStrategyFunction  
</span></span><span style="display:flex;"><span>    sell_strategy: TradingStrategyFunction  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run</span>(self, symbol: str) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>        prices <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>exchange<span style="color:#f92672">.</span>get_market_data(symbol)  
</span></span><span style="display:flex;"><span>        should_buy <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>buy_strategy(prices)  
</span></span><span style="display:flex;"><span>        should_sell <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>sell_strategy(prices)  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> should_buy:  
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>exchange<span style="color:#f92672">.</span>buy(symbol, <span style="color:#ae81ff">10</span>)  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> should_sell:  
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>exchange<span style="color:#f92672">.</span>sell(symbol, <span style="color:#ae81ff">10</span>)  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:  
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;No action required for </span><span style="color:#e6db74">{</span>symbol<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#39;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>() <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Creates the exchange and connects to it  </span>
</span></span><span style="display:flex;"><span>    exchange <span style="color:#f92672">=</span> Exchange()  
</span></span><span style="display:flex;"><span>    exchange<span style="color:#f92672">.</span>connect()  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># create the trading bot and run the bot once  </span>
</span></span><span style="display:flex;"><span>    bot <span style="color:#f92672">=</span> TradingBot(exchange, should_buy_avg, should_sell_avg)  
</span></span><span style="display:flex;"><span>    bot<span style="color:#f92672">.</span>run(<span style="color:#e6db74">&#39;BTC/USD&#39;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:  
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>However, since we aren&rsquo;t using classes, passing parameters to things like change the window size for trading, isn&rsquo;t possible. We can fix that though by using closures. We just need to wrap the functions we are passing in closures (or all of them) that take in some parameter, adjust the function to use the parameter, and return the function as a result:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Changing the should_buy_avg and should_sell_minmax functions.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy_avg_closure</span>(window_size: int) <span style="color:#f92672">-&gt;</span> TradingStrategyFunction:  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy_avg</span>(prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>        list_window <span style="color:#f92672">=</span> prices[<span style="color:#f92672">-</span>window_size:]  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;</span> statistics<span style="color:#f92672">.</span>mean(list_window)  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> should_buy_avg
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell_minmax_closure</span>(max_price: int) <span style="color:#f92672">-&gt;</span> TradingStrategyFunction:  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell_minmax</span>(prices: list[int]) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># sell if it&#39;s above $33,000  </span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;</span> max_price  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> should_sell_minmax
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Changing the call in main.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>() <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Creates the exchange and connects to it  </span>
</span></span><span style="display:flex;"><span>    exchange <span style="color:#f92672">=</span> Exchange()  
</span></span><span style="display:flex;"><span>    exchange<span style="color:#f92672">.</span>connect()  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># create the trading bot and run the bot once  </span>
</span></span><span style="display:flex;"><span>    bot <span style="color:#f92672">=</span> TradingBot(exchange, should_buy_avg_closure(<span style="color:#ae81ff">4</span>), should_sell_minmax_closure(<span style="color:#ae81ff">35_000_00</span>))  
</span></span><span style="display:flex;"><span>    bot<span style="color:#f92672">.</span>run(<span style="color:#e6db74">&#39;BTC/USD&#39;</span>)
</span></span></code></pre></div><p>This alleviates our issue, but is not very elegant looking and a bit verbose. To avoid that route, we can use partial functions.</p>
<p>A partial function application fixes a number of arguments in the original function and returns a new function without those arguments. Different from querying. It allows us to bypass the <code>TradingStrategyFunction()</code> callable without having a type error, since we want to pass in some parameter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;  
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Using a video (https://www.youtube.com/watch?v=ph2HjBQuI8Y&amp;list=PLU-P2PlzpIf3EpWfxk-Mu_ZVJVS5Wb-_e&amp;index=35)  
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">to follow along and learn some neat things functions can do  
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> statistics  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> dataclasses <span style="color:#f92672">import</span> dataclass  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Callable, Protocol  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> exchange <span style="color:#f92672">import</span> Exchange  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> partial  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>TradingStrategyFunction <span style="color:#f92672">=</span> Callable[list[int], bool]  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy_avg</span>(prices: list[int], window_size: int) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>    list_window <span style="color:#f92672">=</span> prices[<span style="color:#f92672">-</span>window_size:]  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;</span> statistics<span style="color:#f92672">.</span>mean(list_window)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell_avg</span>(prices: list[int], window_size: int) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>    list_window <span style="color:#f92672">=</span> prices[<span style="color:#f92672">-</span>window_size:]  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;</span> statistics<span style="color:#f92672">.</span>mean(list_window)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_buy_minmax</span>(prices: list[int], min_price: int) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&lt;</span> min_price  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">should_sell_minmax</span>(prices: list[int], max_price: int) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> prices[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;</span> max_price  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@dataclass</span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TradingBot</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Trading bot that connects to a crypto exchange and performs trades.&#34;&#34;&#34;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    exchange: Exchange  
</span></span><span style="display:flex;"><span>    buy_strategy: TradingStrategyFunction  
</span></span><span style="display:flex;"><span>    sell_strategy: TradingStrategyFunction  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run</span>(self, symbol: str) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>        prices <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>exchange<span style="color:#f92672">.</span>get_market_data(symbol)  
</span></span><span style="display:flex;"><span>        should_buy <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>buy_strategy(prices)  
</span></span><span style="display:flex;"><span>        should_sell <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>sell_strategy(prices)  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> should_buy:  
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>exchange<span style="color:#f92672">.</span>buy(symbol, <span style="color:#ae81ff">10</span>)  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> should_sell:  
</span></span><span style="display:flex;"><span>            self<span style="color:#f92672">.</span>exchange<span style="color:#f92672">.</span>sell(symbol, <span style="color:#ae81ff">10</span>)  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:  
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;No action required for </span><span style="color:#e6db74">{</span>symbol<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#39;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>() <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Creates the exchange and connects to it  </span>
</span></span><span style="display:flex;"><span>    exchange <span style="color:#f92672">=</span> Exchange()  
</span></span><span style="display:flex;"><span>    exchange<span style="color:#f92672">.</span>connect()  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># create the trading bot and run the bot once  </span>
</span></span><span style="display:flex;"><span>    buy_strategy <span style="color:#f92672">=</span> partial(should_buy_avg, window_size<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)  
</span></span><span style="display:flex;"><span>    sell_strategy <span style="color:#f92672">=</span> partial(should_sell_minmax, max_price<span style="color:#f92672">=</span><span style="color:#ae81ff">35_000_00</span>)  
</span></span><span style="display:flex;"><span>    bot <span style="color:#f92672">=</span> TradingBot(exchange, buy_strategy, sell_strategy)  
</span></span><span style="display:flex;"><span>    bot<span style="color:#f92672">.</span>run(<span style="color:#e6db74">&#39;BTC/USD&#39;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:  
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
