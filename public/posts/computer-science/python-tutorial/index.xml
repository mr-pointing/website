<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The Python Tutorial on Mr. Pointing</title>
        <link>https://mrpointing.com/posts/computer-science/python-tutorial/</link>
        <description>Recent content in The Python Tutorial on Mr. Pointing</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://mrpointing.com/posts/computer-science/python-tutorial/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>The Python Tutorial Notes - Chapter 12</title>
            <link>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-12/</link>
            <pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-12/</guid>
            <description>Modified: July 19 2024
Virtual Environments and Packages 12.1 Introduction Often, you&amp;rsquo;re going to need tools and modules that aren&amp;rsquo;t included with Python by default, or in your standard library. One Python install might not suffice for most applications.
To circumnavigate this, we create virtual environments, that act as self-contained directories with an installation of Python, and any number of packages.
12.2 Creating Virtual Environments We can use the venv module to create and manage our own virtual environment.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<hr>
<h2 id="virtual-environments-and-packages"><strong>Virtual Environments and Packages</strong></h2>
<h3 id="121-introduction"><strong>12.1 Introduction</strong></h3>
<p>Often, you&rsquo;re going to need tools and modules that aren&rsquo;t included with Python by default, or in your standard library. One Python install might not suffice for most applications.</p>
<p>To circumnavigate this, we create <em>virtual environments</em>, that act as self-contained directories with an installation of Python, and any number of packages.</p>
<h3 id="122-creating-virtual-environments"><strong>12.2 Creating Virtual Environments</strong></h3>
<p>We can use the <code>venv</code> module to create and manage our own virtual environment.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>python -m venv tutorial-env
</span></span></code></pre></div><p>If it doesn&rsquo;t already exist, this will create a <code>tutorial-env</code> virtual environment.</p>
<p>A common directory location for virtual environments is usually <code>.venv</code>, keeping the directory hidden in your shell and out of the way while giving it a name that explains why the directory exists. It also prevents clashing with <code>.env</code> variables definitions.</p>
<p>You can activate the environment with the following calls:</p>
<p>Windows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>tutorial-env<span style="color:#ae81ff">\S</span>cripts<span style="color:#ae81ff">\a</span>ctivate
</span></span></code></pre></div><p>Unix:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>source tutorial-env/bin/activate
</span></span></code></pre></div><p>Once in, you should see in parenthesis your virtual environment, confirming your presence. Once done, you can simply type <code>deactivate</code> to exit the environment.</p>
<h3 id="123-managing-packages-with-pip"><strong>12.3 Managing Packages with <code>pip</code></strong></h3>
<p><code>pip</code> is a tool to help install, upgrade, and remove packages in Python. <code>pip</code> grabs modules/packages from the <a href="https://pypi.org/">Python Package Index</a>.</p>
<p>From within your virtual environment, you can use <code>pip</code> like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">(</span>tutorial-env<span style="color:#f92672">)</span> $ python -m pip install novas
</span></span><span style="display:flex;"><span>Collecting novas
</span></span><span style="display:flex;"><span>  Downloading novas-3.1.1.3.tar.gz <span style="color:#f92672">(</span>136kB<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Installing collected packages: novas
</span></span><span style="display:flex;"><span>  Running setup.py install <span style="color:#66d9ef">for</span> novas
</span></span><span style="display:flex;"><span>Successfully installed novas-3.1.1.3
</span></span></code></pre></div><p><code>pip show</code> will return information about a particular package. <code>pip list</code> will display all of the packages installed in your virtual environment.</p>
]]></content>
        </item>
        
        <item>
            <title>The Python Tutorial Notes - Chapter 11</title>
            <link>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-11/</link>
            <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-11/</guid>
            <description>Modified: July 19 2024
The Standard Library - Part 2 7/9/2024
The second part here will go over more advanced, less common modules that nevertheless, exist.
11.1 Output Formatting reprlib is an appropriately named library containing a version of repr() modified for abbreviated displays of large or deeply nested containers:
&amp;gt;&amp;gt;&amp;gt; import reprlib &amp;gt;&amp;gt;&amp;gt; reprlib.repr(set(&amp;#39;supercalafragalisticexpialidocious&amp;#39;)) &amp;#34;{&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;,...&amp;#34; pprint is a module with more sophisticated control over printing both built-in and user defined objects.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<hr>
<h2 id="the-standard-library---part-2"><strong>The Standard Library - Part 2</strong></h2>
<p>7/9/2024</p>
<p>The second part here will go over more advanced, less common modules that nevertheless, exist.</p>
<h3 id="111-output-formatting"><strong>11.1 Output Formatting</strong></h3>
<p><code>reprlib</code> is an appropriately named library containing a version of <code>repr()</code> modified for abbreviated displays of large or deeply nested containers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> reprlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> reprlib<span style="color:#f92672">.</span>repr(set(<span style="color:#e6db74">&#39;supercalafragalisticexpialidocious&#39;</span>))
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;{&#39;a&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;,...&#34;</span>
</span></span></code></pre></div><p><code>pprint</code> is a module with more sophisticated control over printing both built-in and user defined objects. Could also be called a &ldquo;pretty printer&rdquo;, it will add line breaks and indentation to more clearly reveal complex data structures.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> pprint
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t <span style="color:#f92672">=</span> [[[<span style="color:#e6db74">&#39;black&#39;</span>, <span style="color:#e6db74">&#39;cyan&#39;</span>], <span style="color:#e6db74">&#39;white&#39;</span>, [<span style="color:#e6db74">&#39;green&#39;</span>, <span style="color:#e6db74">&#39;red&#39;</span>], [<span style="color:#e6db74">&#39;magenta&#39;</span>, <span style="color:#f92672">...</span>     <span style="color:#e6db74">&#39;yellow&#39;</span>], <span style="color:#e6db74">&#39;blue&#39;</span>]]
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> pprint<span style="color:#f92672">.</span>pprint(t, width<span style="color:#f92672">=</span><span style="color:#ae81ff">30</span>)
</span></span><span style="display:flex;"><span>[[[[<span style="color:#e6db74">&#39;black&#39;</span>, <span style="color:#e6db74">&#39;cyan&#39;</span>],
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#39;white&#39;</span>,
</span></span><span style="display:flex;"><span>   [<span style="color:#e6db74">&#39;green&#39;</span>, <span style="color:#e6db74">&#39;red&#39;</span>]],
</span></span><span style="display:flex;"><span>  [[<span style="color:#e6db74">&#39;magenta&#39;</span>, <span style="color:#e6db74">&#39;yellow&#39;</span>],
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#39;blue&#39;</span>]]]
</span></span></code></pre></div><p><code>textwrap</code> formats text to fit any given screen width.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> textwrap
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> some_text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;Using wrap() is the same as using fill(), except for that it returns a list of strings instead of one big string filled with newlines to seperate wrapped lines&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(textwrap<span style="color:#f92672">.</span>fill(some_text, width<span style="color:#f92672">=</span><span style="color:#ae81ff">40</span>))
</span></span><span style="display:flex;"><span>Using wrap() <span style="color:#f92672">is</span> the same <span style="color:#66d9ef">as</span> using
</span></span><span style="display:flex;"><span>fill(), <span style="color:#66d9ef">except</span> <span style="color:#66d9ef">for</span> that it returns a
</span></span><span style="display:flex;"><span>list of strings instead of one  big
</span></span><span style="display:flex;"><span>string filled <span style="color:#66d9ef">with</span> newlines to seperate
</span></span><span style="display:flex;"><span>wrapped lines
</span></span></code></pre></div><p><code>locale</code> module helps with grabbing formats for specific parts of the world.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> locale
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> locale<span style="color:#f92672">.</span>setlocale(locale<span style="color:#f92672">.</span>LC_ALL, <span style="color:#e6db74">&#39;English_United States.1252&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;English_United States.1252&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> conv <span style="color:#f92672">=</span> locale<span style="color:#f92672">.</span>localeconv() <span style="color:#75715e"># grabs a mapping of conventions</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1234567.8</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> locale<span style="color:#f92672">.</span>format_string(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span>, x, grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;1,234,567&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> locale<span style="color:#f92672">.</span>format_string(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%s%.*f</span><span style="color:#e6db74">&#34;</span>, (conv[<span style="color:#e6db74">&#39;currency_symbol&#39;</span>],
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>    conv[<span style="color:#e6db74">&#39;frac_digits&#39;</span>], x), grouping<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;$1,234,567.80&#39;</span>
</span></span></code></pre></div><h3 id="112-templating"><strong>11.2 Templating</strong></h3>
<p>Within the <code>string</code> module, there exists a <code>Template</code> class that allows for a different method of string formatting. This is good particularly for end users, since they can customize their applications without having to alter them. Not sure why that differs much from collecting input in general but it works like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> string <span style="color:#f92672">import</span> Template
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t <span style="color:#f92672">=</span> Template(<span style="color:#e6db74">&#39;$</span><span style="color:#e6db74">{village}</span><span style="color:#e6db74">folk send $$10 to $cause.&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t<span style="color:#f92672">.</span>substitute(village<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Brooklyn&#39;</span>, cause<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Food Not Bombs&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;Brooklynfolk send $10 to Food Not Bombs&#39;</span>
</span></span></code></pre></div><p>We just need to use a <code>$</code> followed by a placeholder name. In order to use these placeholder next to names in text, we have to place the placeholder in curly braces, like with <code>village</code> above. If we want to use the <code>$</code> character in general, you need to use two instead of one.</p>
<p>The <code>substitute()</code> method raises a <code>KeyError</code> if a placeholder is not supplied in a dictionary or a keyword argument. If the placeholder exists as a key within one dictionary, only one dictionary needs to be passed. If you want to make sure it gets through regardless, you can use <code>safe_substitute()</code> instead.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t <span style="color:#f92672">=</span> Template(<span style="color:#e6db74">&#39;Return the $item to the $owner&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> d <span style="color:#f92672">=</span> dict(item<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;broadsword&#39;</span>)  
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;item&#39;</span>: <span style="color:#e6db74">&#39;keyblade&#39;</span>, <span style="color:#e6db74">&#39;owner&#39;</span>: <span style="color:#e6db74">&#39;cow&#39;</span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t<span style="color:#f92672">.</span>substitute(d)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">KeyError</span>: <span style="color:#e6db74">&#39;owner&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t<span style="color:#f92672">.</span>substitute(x)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;Return the keyblade to the cow&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t<span style="color:#f92672">.</span>safe_substitute(d)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;Return the broadsword to the $owner&#39;</span>
</span></span></code></pre></div><p>7/10/2024</p>
<p>This next example took me a while to comprehend, but it was really worth it.</p>
<p>So, for templates, the delimiter  can be customized to fit the input. In the following example, we want to use percent sign instead, in order to better format file names.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> time<span style="color:#f92672">,</span> os.path
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> photofiles <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;img_1074.jpg&#39;</span>, <span style="color:#e6db74">&#39;img_1011.jpg&#39;</span>, <span style="color:#e6db74">&#39;img_1183.jpg&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BatchRename</span>(Template):
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     delimiter <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;%&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> fmt <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#39;Enter rename style (</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">-date %n-seqnum </span><span style="color:#e6db74">%f</span><span style="color:#e6db74">-format): &#39;</span>)
</span></span><span style="display:flex;"><span>Enter rename style (<span style="color:#f92672">%</span>d<span style="color:#f92672">-</span>date <span style="color:#f92672">%</span>n<span style="color:#f92672">-</span>seqnum <span style="color:#f92672">%</span>f<span style="color:#f92672">-</span>format): Richie_<span style="color:#f92672">%</span>n<span style="color:#f92672">%</span>f
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t <span style="color:#f92672">=</span> BatchRename(fmt)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> date <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">%b%y&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> i, filename <span style="color:#f92672">in</span> enumerate(photofiles):
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     base, ext <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>splitext(filename)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     newname <span style="color:#f92672">=</span> t<span style="color:#f92672">.</span>substitute(d<span style="color:#f92672">=</span>date, n<span style="color:#f92672">=</span>i, f<span style="color:#f92672">=</span>ext)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     print(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{0}</span><span style="color:#e6db74"> --&gt; </span><span style="color:#e6db74">{1}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(filename, newname))
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>img_1074<span style="color:#f92672">.</span>jpg <span style="color:#f92672">--&gt;</span> richie_0<span style="color:#f92672">.</span>jpg
</span></span><span style="display:flex;"><span>img_1011<span style="color:#f92672">.</span>jpg <span style="color:#f92672">--&gt;</span> richie_1<span style="color:#f92672">.</span>jpg
</span></span><span style="display:flex;"><span>img_1183<span style="color:#f92672">.</span>jpg <span style="color:#f92672">--&gt;</span> richie_2<span style="color:#f92672">.</span>jpg
</span></span></code></pre></div><p>I personally think so far, this is one of the more interesting modules to learn about.</p>
<h3 id="113-working-with-binary-data-record-layouts"><strong>11.3 Working with Binary Data Record Layouts</strong></h3>
<p>We can use the <code>struct</code> module to grab <code>pack()</code> and <code>unpack()</code>, which help when working with variable length binary record formats. IN the next example, we&rsquo;ll show how to loop through header information in a ZIP file without using the <code>zipfile</code> module. We&rsquo;ll see the use of two new conventions: <code>&quot;H&quot;</code> and <code>&quot;I&quot;</code> are representative and two and four bytes unassigned, respectively, as well as <code>&quot;&lt;&quot;</code> representing that they are standard size and in little-endian byte order.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> struct
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;myfile.zip&#39;</span>, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>	data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>start <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">3</span>):     <span style="color:#75715e"># show the first 3 file headers</span>
</span></span><span style="display:flex;"><span>	start <span style="color:#f92672">+=</span> <span style="color:#ae81ff">14</span>
</span></span><span style="display:flex;"><span>	fields <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#39;&lt;IIHH&#39;</span>, data[start:start<span style="color:#f92672">*</span><span style="color:#ae81ff">16</span>])
</span></span><span style="display:flex;"><span>	crc32, comp_size, uncomp_size, filenamesize, extrasize <span style="color:#f92672">=</span> fields
</span></span><span style="display:flex;"><span>	start <span style="color:#f92672">+=</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>	filename <span style="color:#f92672">=</span> data[start:start<span style="color:#f92672">*</span>filenamesize]
</span></span><span style="display:flex;"><span>	start <span style="color:#f92672">+=</span> filenamesize
</span></span><span style="display:flex;"><span>	extra <span style="color:#f92672">=</span> data[start:start<span style="color:#f92672">*</span>extra_size]
</span></span><span style="display:flex;"><span>	print(filename, hex(crc32), comp_size, uncompsize)
</span></span><span style="display:flex;"><span>	start <span style="color:#f92672">+=</span> extra_size <span style="color:#f92672">*</span> comp_size  <span style="color:#75715e"># skip to next header</span>
</span></span></code></pre></div><p>7/11/2024</p>
<h3 id="114-multi-threading"><strong>11.4 Multi-threading</strong></h3>
<p>Threading can be defined as a technique for breaking down tasks that are not sequentially dependent. Threads advantages come from its ability to accept things like user input while background tasks are being processed.</p>
<p>In the following example, we&rsquo;ll call the <code>threading</code> module:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> threading<span style="color:#f92672">,</span> zipfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AsyncZip</span>(threading<span style="color:#f92672">.</span>Thread):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> __init__(self, infile, outfile):
</span></span><span style="display:flex;"><span>		threading<span style="color:#f92672">.</span>Thread<span style="color:#f92672">.</span>__init__(self)
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>infile <span style="color:#f92672">=</span> infile
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>outfile <span style="color:#f92672">=</span> outfile
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run</span>(self):
</span></span><span style="display:flex;"><span>		f <span style="color:#f92672">=</span> zipfile<span style="color:#f92672">.</span>ZipFile(self<span style="color:#f92672">.</span>outfile, <span style="color:#e6db74">&#39;w&#39;</span>, zipfile<span style="color:#f92672">.</span>ZIP_DEFLATED)
</span></span><span style="display:flex;"><span>		f<span style="color:#f92672">.</span>write(self<span style="color:#f92672">.</span>infile)
</span></span><span style="display:flex;"><span>		f<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#39;Finished background zip of:&#39;</span>, self<span style="color:#f92672">.</span>infile)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>background <span style="color:#f92672">=</span> AsyncZip(<span style="color:#e6db74">&#39;mydata.txt&#39;</span>, <span style="color:#e6db74">&#39;myarchive.zip&#39;</span>)
</span></span><span style="display:flex;"><span>background<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;The main program continues to run in the foreground.&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>background<span style="color:#f92672">.</span>join()    <span style="color:#75715e"># wait for background task to finish</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;Main program waited until background was done.&#39;</span>)
</span></span></code></pre></div><p>Even though there are a lot of available tools in the <code>threading</code> module, including locks, events, and more, sometimes it&rsquo;s easier to design an application that concentrates all access to a resource in one single thread, and use the <code>queue</code> module to feed that single thread requests from other threads. This is not only easier to design, but more readable and reliable.</p>
<h3 id="115-logging"><strong>11.5 Logging</strong></h3>
<p><code>logging</code> is a module that offers a fully featured logging system, which are either sent to a specified file or <code>sys.stderr</code> by default.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> logging
</span></span><span style="display:flex;"><span>logging<span style="color:#f92672">.</span>debug(<span style="color:#e6db74">&#39;Debugging Information&#39;</span>)
</span></span><span style="display:flex;"><span>logging<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;Informational Message&#39;</span>)
</span></span><span style="display:flex;"><span>logging<span style="color:#f92672">.</span>warning(<span style="color:#e6db74">&#39;Warning:config file </span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> not found&#39;</span>, <span style="color:#e6db74">&#39;server.conf&#39;</span>)
</span></span><span style="display:flex;"><span>logging<span style="color:#f92672">.</span>error(<span style="color:#e6db74">&#39;Error occured&#39;</span>)
</span></span><span style="display:flex;"><span>logging<span style="color:#f92672">.</span>critical(<span style="color:#e6db74">&#39;Critical error -- shutting down&#39;</span>)
</span></span></code></pre></div><p>Will produce the following:</p>
<pre tabindex="0"><code>WARNING:root:Warning:config file server.conf not found
ERROR:root:Error occured
CRITICAL:root:Critical error -- shutting down
</code></pre><p>By default, informational and debugging messages are suppressed. You could also set up other output options, like using routing through email, datagrams, sockets, or even to an HTTP server. The way they appear in the example above is also their message priority.</p>
<h3 id="116-weak-references"><strong>11.6 Weak References</strong></h3>
<p>Python does automatic memory management (which is why I&rsquo;m pretty sure it&rsquo;s slower than other languages). Memory is only opened after the last reference is eliminated.</p>
<p>In order to, let&rsquo;s say, track the movement of some process without wanting to be memory intensive, you can use the <code>weakref</code> module. It provides tools for tracking objects without creating a reference.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> weakref<span style="color:#f92672">,</span> gc
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">A</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">def</span> __init__(self, value):
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>          self<span style="color:#f92672">.</span>value <span style="color:#f92672">=</span> value
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">def</span> __repr__(self):
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>          <span style="color:#66d9ef">return</span> str(self<span style="color:#f92672">.</span>value)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> A(<span style="color:#ae81ff">10</span>)     <span style="color:#75715e"># create a reference</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> d <span style="color:#f92672">=</span> weakref<span style="color:#f92672">.</span>WeakValueDictionary()
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> d[<span style="color:#e6db74">&#39;primary&#39;</span>] <span style="color:#f92672">=</span> a     <span style="color:#75715e"># does not create a reference</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> d[<span style="color:#e6db74">&#39;primary&#39;</span>]     <span style="color:#75715e"># fetch the object if it is still alive</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">del</span> a     <span style="color:#75715e"># remove the one reference</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> gc<span style="color:#f92672">.</span>collect()     <span style="color:#75715e"># run garbage collection</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> d[<span style="color:#e6db74">&#39;primary&#39;</span>]     <span style="color:#75715e"># entry was automatically removed </span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    d[<span style="color:#e6db74">&#39;primary&#39;</span>]               
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;C:/python312/lib/weakref.py&#34;</span>, line <span style="color:#ae81ff">46</span>, <span style="color:#f92672">in</span> __getitem__
</span></span><span style="display:flex;"><span>    o <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>data[key]()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">KeyError</span>: <span style="color:#e6db74">&#39;primary&#39;</span>
</span></span></code></pre></div><h3 id="117-tools-for-working-with-lists"><strong>11.7 Tools for Working with Lists</strong></h3>
<p>Python does have support for more advanced versions of lists.</p>
<p>The <code>array</code> module gives an <code>array</code> object type. The following example can set <code>array</code> objects to store 2 bytes per entry rather than 16 bytes per entry per a regular list of Python <code>int</code> objects using the <code>H</code> typecode.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> array <span style="color:#f92672">import</span> array
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> array(<span style="color:#e6db74">&#39;H&#39;</span>, [<span style="color:#ae81ff">4000</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">700</span>, <span style="color:#ae81ff">22222</span>])
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> sum(a)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">26932</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a[<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>array(<span style="color:#e6db74">&#39;H&#39;</span>, [<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">700</span>])
</span></span></code></pre></div><p>The <code>collections</code>  module has a <code>deque</code> object that acts like a list but has faster appends and pops from the left side but has slower lookups for objects in the middle. <code>deque</code> objects are good for queues or breadth first search trees.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> deque
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> d <span style="color:#f92672">=</span> deque([<span style="color:#e6db74">&#39;task1&#39;</span>, <span style="color:#e6db74">&#39;task2&#39;</span>, <span style="color:#e6db74">&#39;task3&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> d<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#39;task4&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">&#39;Handling&#39;</span>, d<span style="color:#f92672">.</span>popleft())
</span></span><span style="display:flex;"><span>Handling task1
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>unsearched <span style="color:#f92672">=</span> deque([starting_node])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">breadth_first_search</span>(unsearched):
</span></span><span style="display:flex;"><span>	node <span style="color:#f92672">=</span> unsearched<span style="color:#f92672">.</span>popleft()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> gen_moves(node):
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> is_goal(m):
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> m
</span></span><span style="display:flex;"><span>		unsearched<span style="color:#f92672">.</span>append(m)
</span></span></code></pre></div><p>There is also the <code>bisect</code> module, which takes advantage of using sorted lists:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> bisect
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> scores <span style="color:#f92672">=</span> [(<span style="color:#ae81ff">100</span>, <span style="color:#e6db74">&#39;perl&#39;</span>), (<span style="color:#ae81ff">200</span>,<span style="color:#e6db74">&#39;tcl&#39;</span>), (<span style="color:#ae81ff">400</span>, <span style="color:#e6db74">&#39;lua&#39;</span>), (<span style="color:#ae81ff">500</span>, <span style="color:#e6db74">&#39;python&#39;</span>)]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> bisect<span style="color:#f92672">.</span>insort(scores, (<span style="color:#ae81ff">300</span>, <span style="color:#e6db74">&#39;ruby&#39;</span>))
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> scores
</span></span><span style="display:flex;"><span>(<span style="color:#ae81ff">100</span>, <span style="color:#e6db74">&#39;perl&#39;</span>), (<span style="color:#ae81ff">200</span>,<span style="color:#e6db74">&#39;tcl&#39;</span>), (<span style="color:#ae81ff">300</span>, <span style="color:#e6db74">&#39;ruby&#39;</span>), (<span style="color:#ae81ff">400</span>, <span style="color:#e6db74">&#39;lua&#39;</span>), (<span style="color:#ae81ff">500</span>, <span style="color:#e6db74">&#39;python&#39;</span>)
</span></span></code></pre></div><p><code>heapq</code> is a module that has functions for implementing heaps on regular lists. The lowest value entry is always kept at position zero, which is helpful for applications which need constant access to the smallest elements without resorting.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> heapq <span style="color:#f92672">import</span> heapify, heappop, heappush
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> data <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> heapify(data)     <span style="color:#75715e"># rearrange the list into heap order</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> heappush(data, <span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>)    <span style="color:#75715e"># add a new entry</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> [heappop(data) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">3</span>)]
</span></span><span style="display:flex;"><span>[<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]
</span></span></code></pre></div><h3 id="118-decimal-floating-point-arithmetic"><strong>11.8 Decimal Floating Point Arithmetic</strong></h3>
<p>Instead of using Python&rsquo;s <code>float</code>, you can use the <code>decimal</code> modules <code>Decimal</code> datatype. The benefits of using this instead of <code>float</code> follows:</p>
<ul>
<li>Financial applications that require exact decimal representation</li>
<li>Control over precision</li>
<li>Control over rounding to meet legal or regulatory requirements</li>
<li>Tracking of significant decimal places</li>
<li>Applications where the user expects the results to match calculations done by hand</li>
</ul>
<p>We can look at calculating 5% sales tax on a 70 cent phone charge, and how the result will differ depending on if the answer is a decimal floating point or a binary floating point. If you round to the nearest cent, the difference becomes significant.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> decimal <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> round(Decimal(<span style="color:#e6db74">&#39;0.70&#39;</span>) <span style="color:#f92672">*</span> Decimal(<span style="color:#e6db74">&#39;1.05&#39;</span>), <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>Decimal(<span style="color:#e6db74">&#39;0.74&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> round(<span style="color:#ae81ff">.70</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1.05</span>, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0.73</span>
</span></span></code></pre></div><hr>
<p>Next:
<a href="https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-12/">Chapter 12</a></p>
]]></content>
        </item>
        
        <item>
            <title>The Python Tutorial Notes - Chapter 10</title>
            <link>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-10/</link>
            <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-10/</guid>
            <description>Modified: July 19 2024
A Brief Tour of the Standard Library 7/4/2024
10.1 Operating System Interface The os module provides functions for interacting with operating systems:
&amp;gt;&amp;gt;&amp;gt; import os &amp;gt;&amp;gt;&amp;gt; os.getcwd() # returns the working directory &amp;#39;C:\\Python312&amp;#39; &amp;gt;&amp;gt;&amp;gt; os.chdir(&amp;#39;/server/accesslogs&amp;#39;) # change working directory &amp;gt;&amp;gt;&amp;gt; os.system(&amp;#39;mkdir today&amp;#39;) # run the command mkdir in the system shell 0 Never use from os import *. It&amp;rsquo;s not good practice to not do this regardless, but it will specifically keep os.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<hr>
<h2 id="a-brief-tour-of-the-standard-library"><strong>A Brief Tour of the Standard Library</strong></h2>
<p>7/4/2024</p>
<h3 id="101-operating-system-interface"><strong>10.1 Operating System Interface</strong></h3>
<p>The <code>os</code> module provides functions for interacting with operating systems:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> os<span style="color:#f92672">.</span>getcwd()     <span style="color:#75715e"># returns the working directory</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;C:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Python312&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> os<span style="color:#f92672">.</span>chdir(<span style="color:#e6db74">&#39;/server/accesslogs&#39;</span>)     <span style="color:#75715e"># change working directory</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> os<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#39;mkdir today&#39;</span>)     <span style="color:#75715e"># run the command mkdir in the system shell</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>
</span></span></code></pre></div><p>Never use <code>from os import *</code>. It&rsquo;s not good practice to not  do this regardless, but it will specifically keep <code>os.open()</code> from shadowing the built-in <code>open()</code> function which operators for opening files.</p>
<p>Below, we can see examples pf the <code>dir()</code> and <code>help()</code> functions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> dir(os)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>returns a list of all module functions<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> help(os)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>returns an extensive manual page created <span style="color:#f92672">from</span> the module<span style="color:#e6db74">&#39;s docstring&gt;</span>
</span></span></code></pre></div><p>For daily file and directory management tasks, the <code>shutil</code> module provides a higher level interface that is easier to use.</p>
<p><code>copyfile(source, dist)</code> copies the contents of the file <code>source</code> to the file <code>dist</code> and returns <code>dist</code> in the most efficient way possible. <code>move(source, dist)</code> recursively move a file or directory, <code>source</code>, to another location and return the destination, <code>dist</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> shutil
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> shutil<span style="color:#f92672">.</span>copyfile(<span style="color:#e6db74">&#39;data.db&#39;</span>, <span style="color:#e6db74">&#39;archive.db&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;archive.db&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> shutil<span style="color:#f92672">.</span>move(<span style="color:#e6db74">&#39;/build/executables&#39;</span>, <span style="color:#e6db74">&#39;installdir&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;installdir&#39;</span>
</span></span></code></pre></div><h3 id="102-file-wildcards"><strong>10.2 File Wildcards</strong></h3>
<p><code>glob</code> is a module that provides a function for making file lists from directory wildcard searches:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> glob
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> glob<span style="color:#f92672">.</span>glob(<span style="color:#e6db74">&#39;*.py&#39;</span>)
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;primes.py&#39;</span>, <span style="color:#e6db74">&#39;random.py&#39;</span>, <span style="color:#e6db74">&#39;quote.py&#39;</span>]
</span></span></code></pre></div><h3 id="103-command-line-arguments"><strong>10.3 Command Line Arguments</strong></h3>
<p>Common utility scripts often need to process command line arguments. These arguments are stored in <code>sys</code> module&rsquo;s <em>argv</em> attribute as a list.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># file is demo.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(sys<span style="color:#f92672">.</span>argv)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># here is the output from running python demo.py one two three</span>
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;demo.py&#39;</span>, <span style="color:#e6db74">&#39;one&#39;</span>, <span style="color:#e6db74">&#39;two&#39;</span>, <span style="color:#e6db74">&#39;three&#39;</span>]
</span></span></code></pre></div><p>The <code>argparse</code> module provides a more sophisticated mechanism to process command line arguments. The following example extracts one or more filenames and an optional number of lines to be displayed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> argparse
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser(
</span></span><span style="display:flex;"><span>	prog<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;top&#39;</span>,
</span></span><span style="display:flex;"><span>	description<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Show top lines from each file&#39;</span>)
</span></span><span style="display:flex;"><span>parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;filenames&#39;</span>, nargs<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;+&#39;</span>)
</span></span><span style="display:flex;"><span>parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#39;-1&#39;</span>, <span style="color:#e6db74">&#39;--lines&#39;</span>, type<span style="color:#f92672">=</span>int, default<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
</span></span><span style="display:flex;"><span>print(args)
</span></span></code></pre></div><p>If you run the above example with the command <code>python top.py --lines=5 alpha.txt beta.txt</code>, the script will set <code>args.lines</code> to 5 and <code>args.filenames</code> to <code>['alpha.txt', 'beta.txt']</code>.</p>
<h3 id="104-error-output-redirection-and-program-termination"><strong>10.4 Error Output Redirection and Program Termination</strong></h3>
<p><code>sys</code> also has attributes for <em>stdin</em>, <em>stdout</em>, and <em>stderr</em>. The latter is useful for emitting warnings and error messages even when <em>stdout</em> has been redirected.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> sys<span style="color:#f92672">.</span>stderr<span style="color:#f92672">.</span>wrtie(<span style="color:#e6db74">&#34;Warning, log file not found starting a new one</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Warning</span>, log file <span style="color:#f92672">not</span> found starting a new one
</span></span></code></pre></div><p>The most direct way to terminate any script is to use <code>sys.exit()</code>.</p>
<h3 id="105-string-pattern-matching"><strong>10.5 String Pattern Matching</strong></h3>
<p><code>re</code> is a module that provides regular expression tools (regex) for advanced string processing.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\bf[a-z]*&#39;</span>, <span style="color:#e6db74">&#39;which foot or hand fell fastest&#39;</span>)
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;foot&#39;</span>, <span style="color:#e6db74">&#39;fell&#39;</span>, <span style="color:#e6db74">&#39;fastest&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\b[a-z]+) \1&#39;</span>, <span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\1&#39;</span>, <span style="color:#e6db74">&#39;cat in the hat&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;cat in the hat&#39;</span>
</span></span></code></pre></div><p>For basic and simple tasks, string methods are preferred because they are easier to both read and debug.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#39;tea for too&#39;</span><span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;too&#39;</span>, <span style="color:#e6db74">&#39;two&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;tea for two&#39;</span>
</span></span></code></pre></div><h3 id="106-mathematics"><strong>10.6 Mathematics</strong></h3>
<p><code>math</code> module gives access to the underlying C library functions for floating point math.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> math
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> math<span style="color:#f92672">.</span>cos(math<span style="color:#f92672">.</span>pi <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0.70710678118654757</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> math<span style="color:#f92672">.</span>log(<span style="color:#ae81ff">1024</span>, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10.0</span>
</span></span></code></pre></div><p><code>random</code> module provides tools for random selections.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> random<span style="color:#f92672">.</span>choice([<span style="color:#e6db74">&#39;apple&#39;</span>, <span style="color:#e6db74">&#39;pear&#39;</span>, <span style="color:#e6db74">&#39;banana&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;apple&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> random<span style="color:#f92672">.</span>sample(range(<span style="color:#ae81ff">100</span>), <span style="color:#ae81ff">10</span>)     <span style="color:#75715e"># sampling without replacement</span>
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">83</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">81</span>, <span style="color:#ae81ff">41</span>, <span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">33</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> random<span style="color:#f92672">.</span>random()     <span style="color:#75715e"># random float</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0.179239851380</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> random<span style="color:#f92672">.</span>randrange(<span style="color:#ae81ff">6</span>)     <span style="color:#75715e"># random integer chosen from range(6)</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>
</span></span></code></pre></div><p><code>statistics</code> module calculates basic statistical properties (the mean, median, variance, etc.) of numeric data.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> statistics
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> data <span style="color:#f92672">=</span> [<span style="color:#ae81ff">2.75</span>, <span style="color:#ae81ff">1.75</span>, <span style="color:#ae81ff">1.25</span>, <span style="color:#ae81ff">0.25</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">1.25</span>, <span style="color:#ae81ff">3.5</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> statistics<span style="color:#f92672">.</span>mean(data)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1.60714292348</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> statistics<span style="color:#f92672">.</span>median(data)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1.25</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> statistics<span style="color:#f92672">.</span>variance(data)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1.3789436579</span>
</span></span></code></pre></div><p><strong>10.7 Internet Access</strong></p>
<p>There are a few modules that can access the internet and process internet protocols.</p>
<p>Two we can look at are <code>urllib.request</code> to retrieve URLs and <code>smtplib</code> for sending mail. For sending mail, we would need to have a mail server running on <code>localhost</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> urllib.request <span style="color:#f92672">import</span> urlopen
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">with</span> urlopen(<span style="color:#e6db74">&#39;http://worldtimeapi.org/api/timezone/etc/UTC.txt&#39;</span>) <span style="color:#66d9ef">as</span> response:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>      <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> response:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>         line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>decode()    <span style="color:#75715e"># converts bytes to a str</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>         <span style="color:#66d9ef">if</span> line<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#39;datetime&#39;</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>              print(line<span style="color:#f92672">.</span>rstrip())     <span style="color:#75715e"># removes trailing newline</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>datetime: <span style="color:#ae81ff">2022</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span>T01:<span style="color:#ae81ff">36</span>:<span style="color:#ae81ff">47.6923847239</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> smtplib
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> server <span style="color:#f92672">=</span> smtplib<span style="color:#f92672">.</span>SMTP(<span style="color:#e6db74">&#39;localhost&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> server<span style="color:#f92672">.</span>sendmail(<span style="color:#e6db74">&#39;soothsayer@example.org&#39;</span>, <span style="color:#e6db74">&#39;rpointing@example.org&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#e6db74">&#34;&#34;&#34;To: rpointing@example.org
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">... From: soothsayer@example.org
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">...
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">... Beware the Ides of March.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">... &#34;&#34;&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> server<span style="color:#f92672">.</span>quit()
</span></span></code></pre></div><p><strong>10.8 Dates and Times</strong></p>
<p><code>datetime</code> module supplies classes for manipulating dates and times in both simple and complex manners.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> date
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> now <span style="color:#f92672">=</span> date<span style="color:#f92672">.</span>today()
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(now)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2024</span><span style="color:#f92672">-</span><span style="color:#ae81ff">07</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(now<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%m/</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">/%y</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> %b %Y is a %A on the </span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> day of %B&#39;</span>))
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">07</span><span style="color:#f92672">/</span><span style="color:#ae81ff">05</span><span style="color:#f92672">/</span><span style="color:#ae81ff">24</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">05</span> Jul <span style="color:#ae81ff">2024</span> <span style="color:#f92672">is</span> a Friday on the <span style="color:#ae81ff">05</span> day of July
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> birthday <span style="color:#f92672">=</span> date(<span style="color:#ae81ff">1997</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> age <span style="color:#f92672">=</span> now <span style="color:#f92672">-</span> birthday
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> age<span style="color:#f92672">.</span>days
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9927</span>
</span></span></code></pre></div><p><strong>10.9 Data Compression</strong></p>
<p>Common data archiving/compression formats are directly supported by modules like <code>zlib</code>, <code>gzip</code>, <code>bz2</code>, <code>lzma</code>, <code>zipfile</code>, and <code>tarfile</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> zlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;witch which has which witches wrist watch&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> len(s)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">41</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t <span style="color:#f92672">=</span> zlib<span style="color:#f92672">.</span>compress(s)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> len(t)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">37</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> zlib<span style="color:#f92672">.</span>decompress(t)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;witch which has which witches wrist watch&#39;</span>
</span></span></code></pre></div><p>7/6/2024</p>
<p><strong>10.10 Performance Measurement</strong></p>
<p>Python has a built-in tool for measuring performance. <code>timeit</code> is one module that can show that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> timit <span style="color:#f92672">import</span> Timer
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> Timer(<span style="color:#e6db74">&#39;t=a; a=b; b=t&#39;</span>, <span style="color:#e6db74">&#39;a=1;b=2&#39;</span>)<span style="color:#f92672">.</span>timeit()
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0.1351344</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> Timer(<span style="color:#e6db74">&#39;a, b = b, a&#39;</span>, <span style="color:#e6db74">&#39;a=1; b=2&#39;</span>)<span style="color:#f92672">.</span>timeit()
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0.05585979999999996</span>
</span></span></code></pre></div><p><strong>10.11 Quality Control</strong></p>
<p>In order to make sure your code is up-to-stuff, or of a higher quality, you can write tests that can be run throughout the development of the project.</p>
<p>If you use the <code>doctest</code> module, and include a use case in your module&rsquo;s docstring, it can very easily run the tests.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> doctest  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">average</span>(values):  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Computes the arithmetic mean of a list of numbers  
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &gt;&gt;&gt; print(average([20, 30, 70]))  
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    40.0    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sum(values) <span style="color:#f92672">/</span> len(values)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>doctest<span style="color:#f92672">.</span>testmod()
</span></span></code></pre></div><p>In the above example, if you change the answer to something else, making it fail the test case, the compiler should show you exactly what went wrong.</p>
<p>There is also the <code>unittest</code> module, that is more complicated that <code>doctest</code> so it will obviously be a bit more comprehensive as a testing feature.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> unittest
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestStatisticalFunctions</span>(unittest<span style="color:#f92672">.</span>TestCase):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_average</span>(self):
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>assertEqual(average([<span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">70</span>]), <span style="color:#ae81ff">40.0</span>)
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>assertEqual(round(average([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">7</span>]), <span style="color:#ae81ff">1</span>), <span style="color:#ae81ff">4.3</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>assertRaises(<span style="color:#a6e22e">ZeroDivisionError</span>):
</span></span><span style="display:flex;"><span>			average([])
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>assertRaises(<span style="color:#a6e22e">TypeError</span>):
</span></span><span style="display:flex;"><span>			average(<span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">70</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>unittest<span style="color:#f92672">.</span>main()
</span></span></code></pre></div><h3 id="107-internet-access"><strong>10.7 Internet Access</strong></h3>
<p>There are a few modules that can access the internet and process internet protocols.</p>
<p>Two we can look at are <code>urllib.request</code> to retrieve URLs and <code>smtplib</code> for sending mail. For sending mail, we would need to have a mail server running on <code>localhost</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> urllib.request <span style="color:#f92672">import</span> urlopen
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">with</span> urlopen(<span style="color:#e6db74">&#39;http://worldtimeapi.org/api/timezone/etc/UTC.txt&#39;</span>) <span style="color:#66d9ef">as</span> response:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>      <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> response:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>         line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>decode()    <span style="color:#75715e"># converts bytes to a str</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>         <span style="color:#66d9ef">if</span> line<span style="color:#f92672">.</span>startswith(<span style="color:#e6db74">&#39;datetime&#39;</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>              print(line<span style="color:#f92672">.</span>rstrip())     <span style="color:#75715e"># removes trailing newline</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>datetime: <span style="color:#ae81ff">2022</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span>T01:<span style="color:#ae81ff">36</span>:<span style="color:#ae81ff">47.6923847239</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> smtplib
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> server <span style="color:#f92672">=</span> smtplib<span style="color:#f92672">.</span>SMTP(<span style="color:#e6db74">&#39;localhost&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> server<span style="color:#f92672">.</span>sendmail(<span style="color:#e6db74">&#39;soothsayer@example.org&#39;</span>, <span style="color:#e6db74">&#39;rpointing@example.org&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#e6db74">&#34;&#34;&#34;To: rpointing@example.org
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">... From: soothsayer@example.org
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">...
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">... Beware the Ides of March.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">... &#34;&#34;&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> server<span style="color:#f92672">.</span>quit()
</span></span></code></pre></div><h3 id="108-dates-and-times"><strong>10.8 Dates and Times</strong></h3>
<p><code>datetime</code> module supplies classes for manipulating dates and times in both simple and complex manners.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> date
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> now <span style="color:#f92672">=</span> date<span style="color:#f92672">.</span>today()
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(now)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2024</span><span style="color:#f92672">-</span><span style="color:#ae81ff">07</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(now<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%m/</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">/%y</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> %b %Y is a %A on the </span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> day of %B&#39;</span>))
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">07</span><span style="color:#f92672">/</span><span style="color:#ae81ff">05</span><span style="color:#f92672">/</span><span style="color:#ae81ff">24</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">05</span> Jul <span style="color:#ae81ff">2024</span> <span style="color:#f92672">is</span> a Friday on the <span style="color:#ae81ff">05</span> day of July
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> birthday <span style="color:#f92672">=</span> date(<span style="color:#ae81ff">1997</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> age <span style="color:#f92672">=</span> now <span style="color:#f92672">-</span> birthday
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> age<span style="color:#f92672">.</span>days
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9927</span>
</span></span></code></pre></div><h3 id="109-data-compression"><strong>10.9 Data Compression</strong></h3>
<p>Common data archiving/compression formats are directly supported by modules like <code>zlib</code>, <code>gzip</code>, <code>bz2</code>, <code>lzma</code>, <code>zipfile</code>, and <code>tarfile</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> zlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;witch which has which witches wrist watch&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> len(s)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">41</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t <span style="color:#f92672">=</span> zlib<span style="color:#f92672">.</span>compress(s)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> len(t)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">37</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> zlib<span style="color:#f92672">.</span>decompress(t)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;witch which has which witches wrist watch&#39;</span>
</span></span></code></pre></div><p>7/6/2024</p>
<h3 id="1010-performance-measurement"><strong>10.10 Performance Measurement</strong></h3>
<p>Python has a built-in tool for measuring performance. <code>timeit</code> is one module that can show that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> timit <span style="color:#f92672">import</span> Timer
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> Timer(<span style="color:#e6db74">&#39;t=a; a=b; b=t&#39;</span>, <span style="color:#e6db74">&#39;a=1;b=2&#39;</span>)<span style="color:#f92672">.</span>timeit()
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0.1351344</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> Timer(<span style="color:#e6db74">&#39;a, b = b, a&#39;</span>, <span style="color:#e6db74">&#39;a=1; b=2&#39;</span>)<span style="color:#f92672">.</span>timeit()
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0.05585979999999996</span>
</span></span></code></pre></div><h3 id="1011-quality-control"><strong>10.11 Quality Control</strong></h3>
<p>In order to make sure your code is up-to-stuff, or of a higher quality, you can write tests that can be run throughout the development of the project.</p>
<p>If you use the <code>doctest</code> module, and include a use case in your module&rsquo;s docstring, it can very easily run the tests.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> doctest  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">average</span>(values):  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Computes the arithmetic mean of a list of numbers  
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &gt;&gt;&gt; print(average([20, 30, 70]))  
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    40.0    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sum(values) <span style="color:#f92672">/</span> len(values)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>doctest<span style="color:#f92672">.</span>testmod()
</span></span></code></pre></div><p>In the above example, if you change the answer to something else, making it fail the test case, the compiler should show you exactly what went wrong.</p>
<p>There is also the <code>unittest</code> module, that is more complicated that <code>doctest</code> so it will obviously be a bit more comprehensive as a testing feature.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> unittest
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestStatisticalFunctions</span>(unittest<span style="color:#f92672">.</span>TestCase):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_average</span>(self):
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>assertEqual(average([<span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">70</span>]), <span style="color:#ae81ff">40.0</span>)
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>assertEqual(round(average([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">7</span>]), <span style="color:#ae81ff">1</span>), <span style="color:#ae81ff">4.3</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>assertRaises(<span style="color:#a6e22e">ZeroDivisionError</span>):
</span></span><span style="display:flex;"><span>			average([])
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>assertRaises(<span style="color:#a6e22e">TypeError</span>):
</span></span><span style="display:flex;"><span>			average(<span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">70</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>unittest<span style="color:#f92672">.</span>main()
</span></span></code></pre></div><hr>
<p>Next:
<a href="https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-11/">Chapter 11</a></p>
]]></content>
        </item>
        
        <item>
            <title>The Python Tutorial Notes - Chapter 9</title>
            <link>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-9/</link>
            <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-9/</guid>
            <description>Modified: July 19 2024
Classes 6/28/2024
Classes combine data storage and functionality into one package. When you make a new class, you are making a new type of object. A new instance, or occurrence of that type are able to be made using function call of the class.
A class is made up of attributes and methods defined by the classes definition.
Python classes follow closely to other Object Oriented Programming languages classes in the following ways:</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<hr>
<h2 id="classes"><strong>Classes</strong></h2>
<p>6/28/2024</p>
<p>Classes combine data storage and functionality into one package. When you make a new class, you are making a new <em>type</em> of object. A new <em>instance</em>, or occurrence of that type are able to be made using function call of the class.</p>
<p>A class is made up of attributes and methods defined by the classes definition.</p>
<p>Python classes follow closely to other Object Oriented Programming languages classes in the following ways:</p>
<ul>
<li>Class inheritance allows multiple base classes</li>
<li>Derived classes can override any methods of its base class or classes</li>
<li>Methods can call the method of a base class with the same name</li>
</ul>
<p>Classes follow the dynamic nature of Python: created at runtime, and can be modified further after initialization.</p>
<h3 id="91-a-word-on-names-and-objects"><strong>9.1 A Word on Names and Objects</strong></h3>
<p>Objects have individuality, and have multiple names across multiple scopes that can be bound to the same object, otherwise known as aliasing in other languages.</p>
<h3 id="92-python-scopes-and-namespaces"><strong>9.2 Python Scopes and Namespaces</strong></h3>
<p><em>Namespace</em> is the mapping from names to objects. Within Python they are stored as dictionaries. The most important thing to understand is that there is no relation between names in a different namespace; two different modules can define a function called <code>maximize</code>, but since you have to use a prefix to call which <code>maximize</code> you&rsquo;d like, there is no confusion.</p>
<p>Going forward, <em>attribute</em> is going to be used to define anything belonging to that class that would following a dot operator. That would be any value or method. There is a direct mapping between the module&rsquo;s attributes and the global names defined in the module; they share the same namespace.</p>
<p>Attributes are read-only or writable. Assignment is possible:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> modname<span style="color:#f92672">.</span>the_answer <span style="color:#f92672">=</span> <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(modname<span style="color:#f92672">.</span>the_answer)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">del</span> modname<span style="color:#f92672">.</span>the_answer
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(modname<span style="color:#f92672">.</span>the_answer)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">4</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">AttributeError</span>: <span style="color:#e6db74">&#39;modname&#39;</span> object has no attribute <span style="color:#e6db74">&#39;the_answer&#39;</span>
</span></span></code></pre></div><p>Namespaces are generally created at different points and have different lifespans. The namespace for built-in names is created when the interpreter starts for example, and as we know the namespace for a module starts when the line is executed.</p>
<p>Global namespaces and module namespaces last until the end of the program. For more local instances like a function, the local namespace is created when the function is called, and eventually deleted when the function returns or raises and exception not handled by the function.</p>
<p>We can define a <em>scope</em> as the textual region of a program where a namespace is directly accessible; basically, you can access something without having to use a prefix for another namespace.</p>
<p>When searching for an object, the scopes are used dynamically: Namespaces are searched for in this order:</p>
<ol>
<li>The innermost scope, which is searched first, containing local names</li>
<li>The scopes of any enclosing functions, which are searched starting with the nearest enclosing scope that contains non-local, but also non-global names</li>
<li>The next-to-last scope contains the current module&rsquo;s global names</li>
<li>The outermost scope is the namespace containing built-in names</li>
</ol>
<p>If a name is declared as global, it joins the outermost scope. We can use the <code>nonlocal</code> statement to rebind variables found outside of the innermost scope.</p>
<p>We say local scope references local names of the current function. Outside functions, the local scope references the same namespace as the global scape: the module&rsquo;s namespace.</p>
<p>If there is no <code>global</code> or <code>nonlocal</code> statement, assignments default to the innermost scope. Assignments don&rsquo;t copy data, they bind names to objects.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">scope_test</span>():
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">do_local</span>():
</span></span><span style="display:flex;"><span>		spam <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;local spam&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">do_nonlocal</span>():
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">nonlocal</span> spam
</span></span><span style="display:flex;"><span>		spam <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nonlocal spam&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">do_global</span>():
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">global</span> spam
</span></span><span style="display:flex;"><span>		spam <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;global spam&#34;</span>
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span>	spam <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;test spam&#34;</span>
</span></span><span style="display:flex;"><span>	do_local()
</span></span><span style="display:flex;"><span>	print(<span style="color:#e6db74">&#34;After local assignment:&#34;</span>, spam)
</span></span><span style="display:flex;"><span>	do_nonlocal()
</span></span><span style="display:flex;"><span>	print(<span style="color:#e6db74">&#34;After nonlocal assignment:&#34;</span>, spam)
</span></span><span style="display:flex;"><span>	do_global()
</span></span><span style="display:flex;"><span>	print(<span style="color:#e6db74">&#34;After global assignment:&#34;</span>, spam)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>scope_test()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;In global scope:&#34;</span>, spam)
</span></span></code></pre></div><p>will result in the following output:</p>
<pre tabindex="0"><code>After local assignment: test spam
After nonlocal assignment: nonlocal spam
After global assignment: nonlocal spam
In global scope: global spam
</code></pre><p>\</p>
<h3 id="93-a-first-look-at-classes"><strong>9.3 A First Look at Classes</strong></h3>
<p>A basic class definition can look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ClassName</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;</span>statement<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;</span>statement<span style="color:#f92672">-</span>N<span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>Just like functions, they should obviously be defined before they are used.</p>
<p>When a new class definition is entered, a new namespace is created, and used as the classes local scope. All assignments to local variables go into this new namespace.</p>
<p>A class object is essentially a wrapper around the contents of the namespace created by the class definition.</p>
<p>7/1/2024</p>
<p>Objects in classes support two kinds of operations: attribute references and instantiation.</p>
<p>Attribute reference is similar to other objects in Python as far as syntax: <code>obj.name</code>. Whatever names were used in the classes definition are considered these attribute references:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyClass</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;&#34;&#34;A simple example class&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>	i <span style="color:#f92672">=</span> <span style="color:#ae81ff">12345</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">f</span>(self):
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;no justice! no peace!&#39;</span>
</span></span></code></pre></div><p>In the above example, <code>MyClass.i</code> and <code>MyClass.f</code> are valid attribute references, returning an integer and a function object, respectively. I swear, I type some of this out, then read it, and it&rsquo;s the same thing.</p>
<p>Class attributes can be assigned to, so something like the following is legal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>MyClass<span style="color:#f92672">.</span>i <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span></code></pre></div><p>The triple quotes sets the <code>__doc__</code> attribute for the class, and is also good practice to use it for explaining function processes.</p>
<p>Class instantiation, or creating the instance of a class, uses function notation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x <span style="color:#f92672">=</span> MyClass()
</span></span></code></pre></div><p>This will create an empty object, of type <code>MyClass</code>.  In order to specify how we want our instance object to act when created, we can use the <code>__init__()</code> method in our class definition:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>	self<span style="color:#f92672">.</span>data <span style="color:#f92672">=</span> []
</span></span></code></pre></div><p>When we use this <code>__init__</code> statement, we can start to make our class objects more complex, see below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Complex</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> 	<span style="color:#66d9ef">def</span> __init__(self, realpart, imagpart):
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> 		self<span style="color:#f92672">.</span>r <span style="color:#f92672">=</span> realpart
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> 		self<span style="color:#f92672">.</span>i <span style="color:#f92672">=</span> imagpart
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x <span style="color:#f92672">=</span> Complex(<span style="color:#ae81ff">3.0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4.5</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x<span style="color:#f92672">.</span>r, x<span style="color:#f92672">.</span>i
</span></span><span style="display:flex;"><span>(<span style="color:#ae81ff">3.0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4.5</span>)
</span></span></code></pre></div><p>With instance objects, the only operations understood are by attribute references. Two major kinds of valid attribute names: data attributes and methods.</p>
<p>Data attributes are like local variables, they don&rsquo;t need to be declared prior. They come into existence when assigned too. We can create whole new variables in those instances, without worrying about them having to exist inside the class. For example, using the <code>x</code> object we instantiated in the prior example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x<span style="color:#f92672">.</span>counter <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> x<span style="color:#f92672">.</span>counter <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>:
</span></span><span style="display:flex;"><span>	x<span style="color:#f92672">.</span>counter <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>counter <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>print(x<span style="color:#f92672">.</span>counter)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">del</span> x<span style="color:#f92672">.</span>counter
</span></span></code></pre></div><p>This will print 16 without any issue.</p>
<p>The other instance attribute reference is a method. A method is just a function that &ldquo;belongs to&rdquo; an object.</p>
<p>Here&rsquo;s a deeper dive look; <code>x.f</code> is a valid method reference, since <code>MyClass.f</code> is a function. <code>x.i</code> is not, since <code>MyClass.i</code> is not. However, <code>x.f</code> is not the same thing as <code>MyClass.f</code>, it is a method object, not a function object.</p>
<p>7/2/2024</p>
<p>Quick note about method objects: they are usually just used, but can also be stored. In the example below, we can see using a regular class method as well as storing it inside a variable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x<span style="color:#f92672">.</span>f()
</span></span><span style="display:flex;"><span>no justice<span style="color:#960050;background-color:#1e0010">!</span> no peace<span style="color:#960050;background-color:#1e0010">!</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> xf <span style="color:#f92672">=</span> f()
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     print(xf())	
</span></span><span style="display:flex;"><span>no justice<span style="color:#960050;background-color:#1e0010">!</span> no peace<span style="color:#960050;background-color:#1e0010">!</span>
</span></span><span style="display:flex;"><span>no justice<span style="color:#960050;background-color:#1e0010">!</span> no peace<span style="color:#960050;background-color:#1e0010">!</span>
</span></span><span style="display:flex;"><span>no justice<span style="color:#960050;background-color:#1e0010">!</span> no peace<span style="color:#960050;background-color:#1e0010">!</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># repeats forever</span>
</span></span></code></pre></div><p>Even though in the above syntax for defining the <code>f()</code> method, we use the word <code>self</code> which might make you think we should have passed a parameter when we used it. Actually, what <code>self</code> is referring too is the specific instance in which you are using the method: the above call <code>x.f()</code> is equivalent to <code>MyClass.f(x)</code>.</p>
<p>The above scenario can be explained as so, that I&rsquo;m both paraphrasing and quoting from the doc: When a method is called from an instance usage, the class is searched for that function object. If found, it packages references to the function object and the instance object as a new method object. When this method object is called with an argument list, a brand new argument list is made from the instance object and the original argument list, and the function object is called with that new argument list.</p>
<p>Kind of confusing, but also shouldn&rsquo;t be so complicated when you draw it out.</p>
<p><em>Class variables</em> are variables that are shared by all instances of a class, while <em>instance variables</em> are variables that only exist within the instance of that individual class.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span>:
</span></span><span style="display:flex;"><span>	kind <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;canine&#39;</span>                  <span style="color:#75715e"># class variable</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> __init__(self, name):        
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name             <span style="color:#75715e"># instance variable</span>
</span></span></code></pre></div><p>In the above example, something like a dictionary that holds the tricks a dog can do, lets call it <code>tricks</code>, shouldn&rsquo;t be shared by all dogs, since not all dogs know the same tricks.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> __init__(self, name):
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>name <span style="color:#f92672">=</span> name
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>tricks <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_trick</span>(self, trick):
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>tricks<span style="color:#f92672">.</span>append(trick)
</span></span></code></pre></div><p>In the above example, we don&rsquo;t need to pass tricks as a parameter since we can just make an empty list and set it in the initialization of the instance. We also made a function that can add whatever tricks that dogs know into it, letting us access it. Notice how the function needs to pass itself in order to ensure it can be accessed by each independent instance of the class.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> b <span style="color:#f92672">=</span> Dog(<span style="color:#e6db74">&#39;Buddy&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p <span style="color:#f92672">=</span> Dog(<span style="color:#e6db74">&#39;Pugsley&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> b<span style="color:#f92672">.</span>add_trick(<span style="color:#e6db74">&#39;play dead&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p<span style="color:#f92672">.</span>add_trick(<span style="color:#e6db74">&#39;sit&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> b<span style="color:#f92672">.</span>tricks
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;play dead&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> p<span style="color:#f92672">.</span>tricks
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;sit&#39;</span>]
</span></span></code></pre></div><h3 id="94-random-remarks"><strong>9.4 Random Remarks</strong></h3>
<p>If the same name is reference in both the instance and the class, the attribute lookup will prioritize the instance of it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> 	kind <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;canine&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cat <span style="color:#f92672">=</span> Dog()
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(cat<span style="color:#f92672">.</span>kind)
</span></span><span style="display:flex;"><span>canine
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cat<span style="color:#f92672">.</span>kind <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;feline&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(cat<span style="color:#f92672">.</span>kind)
</span></span><span style="display:flex;"><span>feline
</span></span></code></pre></div><p>Data attributes may be reference by methods as well as by clients of an object.</p>
<p>Clients should always use data attributes with care, since they could mess up invariants.</p>
<p>There is no shorthand for referencing data attributes from within methods. In the below example, <code>counter</code> exists twice: as a class variable, an instance variable.</p>
<p>We also see that methods can call other methods just by using the <code>self</code> argument.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyClass</span>:
</span></span><span style="display:flex;"><span>	counter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">adder</span>(self):
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>counter <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>		MyClass<span style="color:#f92672">.</span>counter <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">adder_again</span>(self):
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>adder()
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>adder()
</span></span></code></pre></div><p>Methods can reference global names in the same ways ordinary functions can. The global scope associated with a method is the module containing its definition.</p>
<p>Each value is an object, and therefore has a class (or type). It is stored as <code>object.__class__</code>.</p>
<h3 id="95-inheritance"><strong>9.5 Inheritance</strong></h3>
<p>Like many other languages, classes accept inheritance. Essentially, the new class takes in all of the attributes of the base class. The syntax is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DerivedClassName</span>(BaseClassName):
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;</span>statement<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;</span>statement<span style="color:#f92672">-</span>n<span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>If you need to use a class from another module, you can do it like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DerivedClassName</span>(modname<span style="color:#f92672">.</span>BaseClassName)
</span></span></code></pre></div><p>7/3/2024</p>
<p>When discussing attribute references, if a requested attribute is not found in the instantiated class, the search then goes to look in the base class. The rule is applied recursively if the base class is a derived class.</p>
<p>Derived classes can override methods of the base class. An overriding method also might just want to extend the base classes method, rather than replace it. To use the original base class method, you can always just use <code>BaseClassName.methodname(self, arguments)</code>.</p>
<p>Python has two built-in functions that work with inheritance:</p>
<ol>
<li><code>isinstance()</code>: checks an instances&rsquo; type:
<ol>
<li><code>isinstance(obj, int)</code> will only be <code>True</code> if <code>obj.__class__</code> is <code>int</code> or a class derived from <code>int</code>.</li>
</ol>
</li>
<li><code>issubclass()</code>: checks class inheritance
<ol>
<li><code>issubclass(bool, int)</code> is <code>True</code> since <code>bool</code> is a subclass of <code>int</code>.</li>
<li><code>issubclass(float, int)</code> is <code>False</code> since <code>float</code> is not a subclass of <code>int</code>.</li>
</ol>
</li>
</ol>
<p>You can use multiple inheritance as well in Python:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DerivedClassName</span>(Base1, Base2, Base3):
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;</span>statement<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;</span>statement<span style="color:#f92672">-</span>N<span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>The attribute search in this situation would search the derived class, then base 1, then recursively through base 1&rsquo;s base classes, then to each other base class.</p>
<p>7/4/2024</p>
<h3 id="96-private-variables"><strong>9.6 Private Variables</strong></h3>
<p>The &ldquo;normal&rdquo; private variables other languages have, that exist in an instance and cannot be accessed except from inside that object don&rsquo;t exist within Python. There is a followed convention however, where you lead the private variable with an underscore and that variable should be treated as a non-public part of the API.</p>
<p>You could also use two underscores before, which replaces the text from <code>__spam</code> to <code>_classname__spam</code> where <code>classname</code> is the current class name with leading underscores stripped. This is called <em>name mangling</em>. Name mangling can be helpful by letting subclasses override methods without breaking interclass method calls.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Mapping</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> __init__(self, iterable):
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>items_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>__update(iterable)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update</span>(self, iterable):
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> iterable:
</span></span><span style="display:flex;"><span>			self<span style="color:#f92672">.</span>items_list<span style="color:#f92672">.</span>append(item)
</span></span><span style="display:flex;"><span>	__update <span style="color:#f92672">=</span> update           <span style="color:#75715e"># private copy of the original update()                                    method</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MappingSubclass</span>(Mapping):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">update</span>(self, keys, values):
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># provides new signature for update()</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># but does not break __init__()</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> zip(keys, values):
</span></span><span style="display:flex;"><span>			self<span style="color:#f92672">.</span>items_list<span style="color:#f92672">.</span>append(item)	
</span></span></code></pre></div><h3 id="97-odds-and-ends"><strong>9.7 Odds and Ends</strong></h3>
<p>Similar to C&rsquo;s <code>struct</code>, Python has <code>dataclasses</code>, in order to bundle together a few named data items.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> dataclasses <span style="color:#f92672">import</span> dataclass
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@dataclass</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Employee</span>:
</span></span><span style="display:flex;"><span>	name: str
</span></span><span style="display:flex;"><span>	dept: str
</span></span><span style="display:flex;"><span>	salary: int
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> richie <span style="color:#f92672">=</span> Employee(<span style="color:#e6db74">&#39;richie&#39;</span>, <span style="color:#e6db74">&#39;computers&#39;</span>, <span style="color:#ae81ff">101</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> richie<span style="color:#f92672">.</span>dept
</span></span><span style="display:flex;"><span>computers
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> richie<span style="color:#f92672">.</span>salary
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">101</span>
</span></span></code></pre></div><p>Instance methods objects also have attributes. <code>m.__self__</code> is the instance object with the method <code>m()</code>, and <code>m.__func__</code> is the function object corresponding to the method.</p>
<h3 id="98-iterators"><strong>9.8 Iterators</strong></h3>
<p>Most container objects can be looped over using a <code>for</code> statement:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> element <span style="color:#f92672">in</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]:
</span></span><span style="display:flex;"><span>	print(element)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> element <span style="color:#f92672">in</span> (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>,):
</span></span><span style="display:flex;"><span>	print(element)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> key <span style="color:#f92672">in</span> {<span style="color:#e6db74">&#39;one&#39;</span>:<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;two&#39;</span>:<span style="color:#ae81ff">2</span>}:
</span></span><span style="display:flex;"><span>	print(key)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> <span style="color:#e6db74">&#39;123&#39;</span>:
</span></span><span style="display:flex;"><span>	print(char)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> open(<span style="color:#e6db74">&#39;myfile.txt&#39;</span>):
</span></span><span style="display:flex;"><span>	print(line, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span></code></pre></div><p>This is a prevalent structure in Python. Behind the scenes, <code>for</code> is calling the <code>iter()</code> method on the container object. That function returns an iterator object that defines the method <code>__next__()</code>, which accesses elements in the container one at a time. When there are no more elements,  <code>__next__()</code> raises a <code>StopIteration</code> exception which tells the <code>for</code> loop to terminate. The below code exemplifies this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;abc&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> it <span style="color:#f92672">=</span> iter(s)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> it
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>str_iterator object at <span style="color:#ae81ff">0x10c90e650</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> next(it)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;a&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> next(it)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;b&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> next(it)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;c&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> next(it)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>   next(it)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">StopIteration</span>
</span></span></code></pre></div><p>You can even add your own iterator behavior to your own classes. If you define a <code>__iter__()</code> method, which will return an object with a <code>__next__()</code> method. If the class defines <code>__next__()</code>, then <code>__iter__()</code> can return <code>self</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Reverse</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;&#34;&#34;Iterator for looping over a sequence backwards&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> __init__(self, data):
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>data <span style="color:#f92672">=</span> data
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>index <span style="color:#f92672">=</span> len(data)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> __iter__(self):
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> self
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> __next__(self):
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>index <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">StopIteration</span>
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>index <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>index <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>data[self<span style="color:#f92672">.</span>index]
</span></span><span style="display:flex;"><span>	
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> rev <span style="color:#f92672">=</span> Reverse(<span style="color:#e6db74">&#39;spam&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> iter(rev)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>__main__<span style="color:#f92672">.</span>Reverse object at <span style="color:#ae81ff">0x09012498</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> rev:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     print(char)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>m
</span></span><span style="display:flex;"><span>a
</span></span><span style="display:flex;"><span>p
</span></span><span style="display:flex;"><span>s
</span></span></code></pre></div><p>Printing the object <code>rev</code> would just print <code>spam</code> without any reversing. The reversing happens when iterating through the object.</p>
<h3 id="99-generators"><strong>9.9 Generators</strong></h3>
<p>Generators are simple tools to create iterators. The are written like regular functions except use the <code>yield</code> statement to return data.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">reverse</span>(data):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> range(len(data)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">yield</span> data[index]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> reverse(<span style="color:#e6db74">&#39;golf&#39;</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> print(char)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>f
</span></span><span style="display:flex;"><span>l
</span></span><span style="display:flex;"><span>o
</span></span><span style="display:flex;"><span>g
</span></span></code></pre></div><p>Generators are basically the same as the iterator class we made with a built-in <code>__iter__()</code> and <code>__next__()</code> methods created automatically. Local variables and execution states are also automatically saved between calls, making the functions easier to write/read without instance variables like <code>self.index</code> and <code>self.data</code>.</p>
<h3 id="910-generator-expressions"><strong>9.10 Generator Expressions</strong></h3>
<p>Some generators can be made using a syntax similar to list comprehension but instead of square brackets, you use parentheses. They are more memory friendly but obviously, less versatile than full generator definitions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> sum(i<span style="color:#f92672">*</span>i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">285</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> xvec <span style="color:#f92672">=</span> [<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">30</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> yvec <span style="color:#f92672">=</span> [<span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> sum(x<span style="color:#f92672">*</span>y <span style="color:#66d9ef">for</span> x,y <span style="color:#f92672">in</span> zip(xvec, yvec))
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">260</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> unique_words <span style="color:#f92672">=</span> set(word <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> page <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> line<span style="color:#f92672">.</span>split())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> valedictorian <span style="color:#f92672">=</span> max((student<span style="color:#f92672">.</span>gpa, student<span style="color:#f92672">.</span>name) <span style="color:#66d9ef">for</span> student <span style="color:#f92672">in</span> graduates)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> data <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;golf&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> list(data[i] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(data)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;f&#39;</span>, <span style="color:#e6db74">&#39;l&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39;g&#39;</span>]
</span></span></code></pre></div><hr>
<p>Next:
<a href="https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-10/">Chapter 10</a></p>
]]></content>
        </item>
        
        <item>
            <title>The Python Tutorial Notes - Chapter 8</title>
            <link>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-8/</link>
            <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-8/</guid>
            <description>Modified: July 19 2024
Errors and Exceptions 6/22/2024
There are two distinguishable types of errors: syntax errors and exceptions.
8.1 Syntax Syntax errors (or parsing errors) are errors involving the actual use of the language.
&amp;gt;&amp;gt;&amp;gt; while True print(&amp;#39;Hello World&amp;#39;) File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1 while True print(&amp;#39;Hello world&amp;#39;) ^^^^^ SyntaxError: invalid syntax In the example above, the while statement is missing the : required to use it.
8.2 Exceptions Even if code is syntactically correct, an error may occur when attempting to execute it.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<hr>
<h2 id="errors-and-exceptions"><strong>Errors and Exceptions</strong></h2>
<p>6/22/2024</p>
<p>There are two distinguishable types of errors: <em>syntax errors</em> and <em>exceptions</em>.</p>
<h3 id="81-syntax"><strong>8.1 Syntax</strong></h3>
<p>Syntax errors (or parsing errors) are errors involving the actual use of the language.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span> print(<span style="color:#e6db74">&#39;Hello World&#39;</span>)
</span></span><span style="display:flex;"><span>   File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span> print(<span style="color:#e6db74">&#39;Hello world&#39;</span>)
</span></span><span style="display:flex;"><span>               <span style="color:#f92672">^^^^^</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SyntaxError</span>: invalid syntax
</span></span></code></pre></div><p>In the example above, the <code>while</code> statement is missing the <code>:</code> required to use it.</p>
<h3 id="82-exceptions"><strong>8.2 Exceptions</strong></h3>
<p>Even if code is syntactically correct, an error may occur when attempting to execute it. When the error is thrown, the last line of the error usually has an explanation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>	File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ZeroDivisionError</span>: division by zero
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> spam<span style="color:#f92672">*</span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>	File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>ZeroDivisonError: name <span style="color:#e6db74">&#39;spam&#39;</span> <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> defined
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#39;2&#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>	File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">TypeError</span>: can only concantenate str(<span style="color:#f92672">not</span> <span style="color:#e6db74">&#34;int&#34;</span>) to str
</span></span></code></pre></div><p><a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions">This</a> is a document on all of the built-in exceptions</p>
<h3 id="83-handling-exceptions"><strong>8.3 Handling Exceptions</strong></h3>
<p>You can write programs that handle errors that instead of letting your program break. I assume it uses less memory/processing power than an <code>if</code> statement.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>         x <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Please enter a number: &#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>         <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>         print(<span style="color:#e6db74">&#34;Oops!  That was no valid number.  Try again...&#34;</span>)
</span></span></code></pre></div><p>The above code will not break if you were to enter a character or anything other than a number.</p>
<p>Here is how the <code>try</code> statement works.</p>
<ol>
<li>The <em>try clause</em> (between <code>try</code> and <code>except</code>) is executed</li>
<li>If no exception occurs, the <em>except clause</em> is skipped and execution of the <code>try</code> statement is finished</li>
<li>If an exception occurs, the rest of the <em>try clause</em> is skipped. If the type of error matches the exception used in the <code>except</code>, the <em>except clause</em> is executed and then execution continues after the <code>try</code>/<code>except</code> block. (In the example above that doesn&rsquo;t happen, because we put the <code>try</code> statement in a <code>while</code> loop.)</li>
</ol>
<p>A <code>try</code> statement can have more than one <em>except clause</em>, passed in a parenthesized tuple.</p>
<p>You can place a variable after the <code>except</code> keyword, which bounds the exceptions arguments to it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#39;spam&#39;</span>, <span style="color:#e6db74">&#39;eggs&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> inst:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     print(type(inst))
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     print(inst<span style="color:#f92672">.</span>args)     
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     print(inst)             
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     x, y <span style="color:#f92672">=</span> inst<span style="color:#f92672">.</span>args     
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     print(<span style="color:#e6db74">&#39;x =&#39;</span>, x)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     print(<span style="color:#e6db74">&#39;y =&#39;</span>, y)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">Exception</span><span style="color:#e6db74">&#39;&gt;</span>
</span></span><span style="display:flex;"><span>(<span style="color:#e6db74">&#39;spam&#39;</span>, <span style="color:#e6db74">&#39;eggs&#39;</span>)
</span></span><span style="display:flex;"><span>(<span style="color:#e6db74">&#39;spam&#39;</span>, <span style="color:#e6db74">&#39;eggs&#39;</span>)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> spam
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> eggs
</span></span></code></pre></div><p>We can use <code>Exception</code> as a way to catch most errors if we don&rsquo;t specify the type.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>	f <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;myfile.txt&#39;</span>)
</span></span><span style="display:flex;"><span>	s <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readline()
</span></span><span style="display:flex;"><span>	i <span style="color:#f92672">=</span> int(s<span style="color:#f92672">.</span>strip())
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">OSError</span> <span style="color:#66d9ef">as</span> err:
</span></span><span style="display:flex;"><span>	print(<span style="color:#e6db74">&#34;OS error:&#34;</span>, err)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ValueError</span>:
</span></span><span style="display:flex;"><span>	print(<span style="color:#e6db74">&#34;Could not convert data to an integer.&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> err:
</span></span><span style="display:flex;"><span>	print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Unexpected </span><span style="color:#e6db74">{</span>err<span style="color:#e6db74">=}</span><span style="color:#e6db74">, </span><span style="color:#e6db74">{</span>type(err)<span style="color:#e6db74">=}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">raise</span>
</span></span></code></pre></div><p><code>try</code> also has an <em>else clause</em> it can take advantage of. It must follow all <em>except clauses</em>, and is useful for code that must be executed if the try clause does not raise any exception.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> arg <span style="color:#f92672">in</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>:]:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>		f <span style="color:#f92672">=</span> open(arg, <span style="color:#e6db74">&#39;r&#39;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">OSError</span>:
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#39;cannot open&#39;</span>, arg)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>		print(arg, <span style="color:#e6db74">&#39;has&#39;</span>, len(f<span style="color:#f92672">.</span>readlines()), <span style="color:#e6db74">&#39;lines&#39;</span>)
</span></span><span style="display:flex;"><span>		f<span style="color:#f92672">.</span>close()
</span></span></code></pre></div><p>Exception handlers also catch errors that happen in the body of code written, not just in the <em>try clause</em>.</p>
<h3 id="84-raising-exceptions"><strong>8.4 Raising Exceptions</strong></h3>
<p><code>raise</code> allows the programmer to force a specified exception to occur.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">NameError</span>(<span style="color:#e6db74">&#39;HiThere&#39;</span>)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>	File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>NameErrror: HiThere
</span></span></code></pre></div><p>The following example is fun to play with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">NameError</span>(<span style="color:#e6db74">&#39;HiThere&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">NameError</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     print(<span style="color:#e6db74">&#39;An exception flew by!&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">raise</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>An exception flew by<span style="color:#960050;background-color:#1e0010">!</span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">2</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">NameError</span>: HiThere
</span></span></code></pre></div><p>So if I remove the raise on line 5, the code runs with no errors. If you keep it, the code finishes with one exit error. If I don&rsquo;t raise any error in the try, the except obviously doesn&rsquo;t run.</p>
<h3 id="85-exception-chaining"><strong>8.5 Exception Chaining</strong></h3>
<p>This part is a bit complicated, so strap in.</p>
<p>So, there can be instances where an unhandled exception occurs in an except section. In this case, it will attach the error to the raised error.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     open(<span style="color:#e6db74">&#34;database.sqlite&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">OSError</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">RuntimeError</span>(<span style="color:#e6db74">&#34;unable to handle error&#34;</span>)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">2</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">FileNotFoundError</span>: [Errno <span style="color:#ae81ff">2</span>] No such file <span style="color:#f92672">or</span> directory: <span style="color:#e6db74">&#39;database.sqlite&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>During handling of the above exception, another exception occurred:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">4</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">RuntimeError</span>: unable to handle error
</span></span></code></pre></div><p>You can use the <code>from</code> clause after the <code>raise</code> statement to indicate that an exception is a direct consequence of another.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">func</span>():
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>      <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ConnectionError</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     func()
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#66d9ef">except</span> ConncetionError <span style="color:#66d9ef">as</span> exc:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">RuntimeError</span>(<span style="color:#e6db74">&#39;Failed to open database&#39;</span>) <span style="color:#f92672">from</span> exc
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">2</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">2</span>, <span style="color:#f92672">in</span> func
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ConnectionError</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The above exception was the direct cause of the following exception:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">4</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>nodule<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">RuntimeError</span>: Failed to open database
</span></span></code></pre></div><h3 id="86-user-defined-exceptions"><strong>8.6 User-defined Exceptions</strong></h3>
<p>Programs can name their own exceptions by creating a new exception class. They are either directly or indirectly derived from the <code>Exception</code> class.</p>
<p>Common for modules to define their own exceptions to report errors that occur in the functions they define.</p>
<h3 id="87-defining-clean-up-actions"><strong>8.7 Defining Clean-up Actions</strong></h3>
<p>In order to make something execute regardless of exceptions, what we can call &ldquo;clean-up actions&rdquo;, we can use <code>finally</code>.</p>
<p>The way <code>finally</code> interacts with the rest of the <code>try</code> statement can be defined as follows:</p>
<ol>
<li>If an exception occurs during the execution of the <em>try clause</em>, the <code>except</code> statement kicks in, then <code>finally</code> right after. If the error is not handled by the <em>expect clause</em>, the exception is raised after the <code>finally</code> has executed (same thing happens if an exception happens during the <em>exception clause</em></li>
<li>If the <code>finally</code> has a <code>break</code>, <code>continue</code> or <code>return</code> statement, the exceptions are <strong>not</strong> re-raised</li>
<li>If the <code>try</code> statement has a <code>break</code>, <code>continue</code> or <code>return</code> statement, the <code>finally</code> executes just prior to the <code>break</code>, <code>continue</code> or <code>return</code> execution</li>
<li>If the <code>finally</code> has a <code>return</code> statement, the returned value will be the one from the <code>finally</code> instead of the <code>try</code>.</li>
</ol>
<p>Some Examples;</p>
<p>Basic:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">KeyboardInterrupt</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>    print(<span style="color:#e6db74">&#39;Goodbye World!&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>Goodbye World<span style="color:#960050;background-color:#1e0010">!</span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">2</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">KeyboardInterrupt</span>
</span></span></code></pre></div><p>Medium:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bool_return</span>():
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>          <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>          <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> bool_return()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">False</span>
</span></span></code></pre></div><p>Complicated:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">divide</span>(x, y):
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>          result <span style="color:#f92672">=</span> x <span style="color:#f92672">/</span> y
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ZeroDivisionError</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>          print(<span style="color:#e6db74">&#34;division by zero!&#34;</span>)<span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>          print(<span style="color:#e6db74">&#34;result is&#34;</span>, result)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">finally</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>          print(<span style="color:#e6db74">&#34;executing finally clause&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> divide(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">is</span> <span style="color:#ae81ff">2.0</span>
</span></span><span style="display:flex;"><span>executing <span style="color:#66d9ef">finally</span> clause
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> divide(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>division by zero<span style="color:#960050;background-color:#1e0010">!</span>
</span></span><span style="display:flex;"><span>executing <span style="color:#66d9ef">finally</span> clause
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> divide (<span style="color:#e6db74">&#34;2&#34;</span>, <span style="color:#e6db74">&#34;1&#34;</span>)
</span></span><span style="display:flex;"><span>executing <span style="color:#66d9ef">finally</span> clause
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">3</span>, <span style="color:#f92672">in</span> divide
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">TypeError</span>: unsupprted operand type(s) <span style="color:#66d9ef">for</span> <span style="color:#f92672">/</span>: <span style="color:#e6db74">&#39;str&#39;</span> <span style="color:#f92672">and</span> <span style="color:#e6db74">&#39;str&#39;</span>
</span></span></code></pre></div><h3 id="88-predefined-clean-up-actions"><strong>8.8 Predefined Clean-up Actions</strong></h3>
<p>The only thing this section touches on is that you shouldn&rsquo;t just open a file since it might not close; you should open a file using a <code>with</code> statement.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;myfile.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> f:
</span></span><span style="display:flex;"><span>		print(line, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span></code></pre></div><h3 id="89-raising-and-handling-multiple-unrelated-exceptions"><strong>8.9 Raising and Handling Multiple Unrelated Exceptions</strong></h3>
<p>There are situations where there are several exceptions that have occurred. This is the case in concurrency frameworks, when several tasks might&rsquo;ve failed in parallel. <code>ExceptionGroup</code> can list together exception instances.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">f</span>():
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     excs <span style="color:#f92672">=</span> [<span style="color:#a6e22e">OSError</span>(<span style="color:#e6db74">&#39;error 1&#39;</span>), <span style="color:#a6e22e">SystemError</span>(<span style="color:#e6db74">&#39;error 2&#39;</span>)]
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">raise</span> ExceptionGroup(<span style="color:#e6db74">&#39;there were problems&#39;</span>, excs)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> f()
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">+</span> <span style="color:#a6e22e">Exception</span> Group Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span>   File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span>   File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">3</span>, <span style="color:#f92672">in</span> f
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">|</span> ExceptionGroup: there were problems
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">+-+----------------</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">----------------</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> <span style="color:#a6e22e">OSError</span>: error <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">+----------------</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">----------------</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">|</span> <span style="color:#a6e22e">SystemError</span>: error <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">+------------------------------------</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     f()
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;caught</span><span style="color:#e6db74">{</span>type(e)<span style="color:#e6db74">}</span><span style="color:#e6db74">: e&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>caught <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">ExceptionGroup</span><span style="color:#e6db74">&#39;&gt;: e</span>
</span></span></code></pre></div><h3 id="810-enriching-exceptions-with-notes"><strong>8.10 Enriching Exceptions with Notes</strong></h3>
<p>If an exception is created in order to be raised, it is usually initialized with information that describes the error that has occurred. Adding information on the error is achievable using the <code>add_note(note)</code> method built-into the exception class.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">TypeError</span>(<span style="color:#e6db74">&#39;bad type&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span> <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     e<span style="color:#f92672">.</span>add_note(<span style="color:#e6db74">&#39;Something biffed it dude!&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">raise</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">2</span> <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">TypeError</span>: bad type 
</span></span><span style="display:flex;"><span>Something biffed it dude<span style="color:#960050;background-color:#1e0010">!</span>
</span></span></code></pre></div><hr>
<p>Next:
<a href="https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-9/">Chapter 9</a></p>
]]></content>
        </item>
        
        <item>
            <title>The Python Tutorial Notes - Chapter 7</title>
            <link>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-7/</link>
            <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-7/</guid>
            <description>Modified: July 19 2024
Input and Output 6/18/2024
There are three main ways to present output in Python; expression statements (not using print()), using print(), and using write() which writes something into an existing or new file.
7.1 Fancier Output Formatting At any point in the command line, I can just send out some text without any print() commands and get back what I just sent in. That&amp;rsquo;s an expression statement.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<hr>
<h2 id="input-and-output"><strong>Input and Output</strong></h2>
<p>6/18/2024</p>
<p>There are three main ways to present output in Python; expression statements (not using <code>print()</code>), using <code>print()</code>, and using <code>write()</code> which writes something into an existing or new file.</p>
<h3 id="71-fancier-output-formatting"><strong>7.1 Fancier Output Formatting</strong></h3>
<p>At any point in the command line, I can just send out some text without any <code>print()</code> commands and get back what I just sent in. That&rsquo;s an expression statement. Not super important.</p>
<p>The more important would be things we can do with <code>print()</code>, that we can also do with expression statements (but we don&rsquo;t care about those).</p>
<p>We can use formatted string literals:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> year <span style="color:#f92672">=</span> <span style="color:#ae81ff">2024</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;The year is </span><span style="color:#e6db74">{</span>year<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>The year <span style="color:#f92672">is</span> <span style="color:#ae81ff">2024</span>
</span></span></code></pre></div><p>We can also use the <code>str.format()</code> method:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> yes_votes <span style="color:#f92672">=</span> <span style="color:#ae81ff">42_572_654</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> total_votes <span style="color:#f92672">=</span> <span style="color:#ae81ff">85_705_149</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> percentage <span style="color:#f92672">=</span> yes_votes <span style="color:#f92672">/</span> total_votes
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{:-9}</span><span style="color:#e6db74"> YES votes </span><span style="color:#e6db74">{:2.2%}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(yes_votes, percentage)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39; 42572654 YES votes  49.67%&#39;</span>
</span></span></code></pre></div><p>The spacing in the example is very deliberate; aside from using <code>str.format()</code>, we&rsquo;re using some format specification. You can mess around and play with the numbers to change the padding (space between objects) and the percentage.</p>
<p><code>repr()</code> sends out the full context of what a string is made up of:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> hello <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;world&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(hello)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;world&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> repr(hello)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#39;world&#39;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> hello <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;world</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(hello)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;world</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">.</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> repr(hello)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#39;world</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">.&#39;&#34;</span>
</span></span></code></pre></div><p><strong>Formatted string literals</strong> let you include Python expressions inside a string by including <code>f</code> or <code>F</code>.
If you place an integer after <code>:</code> will cause that output to be a minimum number of characters wide. This is helpful for formatting columns.</p>
<p>You can apply other modifiers after that will convert the value before formatted. <code>!a</code> can apply <code>ascii()</code>, and <code>!r</code> applies <code>repr()</code>. An equal sign expands the expression to include the variable name.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> animals <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;eels&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;This car is full of </span><span style="color:#e6db74">{</span>animals<span style="color:#e6db74">!r}</span><span style="color:#e6db74">.&#39;</span>)
</span></span><span style="display:flex;"><span>This car <span style="color:#f92672">is</span> full of <span style="color:#e6db74">&#39;eels&#39;</span><span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Amounts: </span><span style="color:#e6db74">{</span>animals<span style="color:#e6db74">=}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>Amounts: animals<span style="color:#f92672">=</span>eels
</span></span></code></pre></div><p><strong>The <code>str.format()</code> method</strong> can be used with nothing in them, an index representation for how they appear in your call, and by keywords (you can also combine them).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{}</span><span style="color:#e6db74"> DOOM&#39;</span><span style="color:#f92672">.</span>format(<span style="color:#e6db74">&#39;Metal&#39;</span>, <span style="color:#e6db74">&#39;Face&#39;</span>))
</span></span><span style="display:flex;"><span>Metal Face DOOM
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{0}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{1}</span><span style="color:#e6db74"> DOOM&#39;</span><span style="color:#f92672">.</span>format(<span style="color:#e6db74">&#39;Metal&#39;</span>, <span style="color:#e6db74">&#39;Face&#39;</span>))
</span></span><span style="display:flex;"><span>Metal Face DOOM
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{1}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{0}</span><span style="color:#e6db74"> DOOM&#39;</span><span style="color:#f92672">.</span>format(<span style="color:#e6db74">&#39;Metal&#39;</span>, <span style="color:#e6db74">&#39;Face&#39;</span>))
</span></span><span style="display:flex;"><span>Face Metal DOOM
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">&#39;The </span><span style="color:#e6db74">{noun}</span><span style="color:#e6db74"> is so </span><span style="color:#e6db74">{adjective}</span><span style="color:#e6db74">,&#39;</span><span style="color:#f92672">.</span>format(noun<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;beat&#34;</span>, adjective<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;butter&#34;</span>))
</span></span><span style="display:flex;"><span>The beat <span style="color:#f92672">is</span> so butter,
</span></span></code></pre></div><p>If you have a really long formatted string you don&rsquo;t want to break apart, you can pass a dict and using square brackets to access keys.</p>
<p>I thought this stuff might not be that important, but than I considered the memory factor. I compared looping over the table with a for loop, compared to just outputting them in a longer string format.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time  
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sys  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>table <span style="color:#f92672">=</span> {  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;MF DOOM&#39;</span>: <span style="color:#ae81ff">10</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;KING GHEEDORAH&#39;</span>: <span style="color:#ae81ff">5</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;MADVILLIAN&#39;</span>: <span style="color:#ae81ff">7</span>  
</span></span><span style="display:flex;"><span>}  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Method 1: using str.format()  </span>
</span></span><span style="display:flex;"><span>start_time <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>perf_counter()  
</span></span><span style="display:flex;"><span>formatted_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;MF DOOM: </span><span style="color:#e6db74">{0[MF DOOM]:d}</span><span style="color:#e6db74">; KING GHEEDORAH: </span><span style="color:#e6db74">{0[KING GHEEDORAH]:d}</span><span style="color:#e6db74">; MADVILLIAN: </span><span style="color:#e6db74">{0[MADVILLIAN]:d}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(table)  
</span></span><span style="display:flex;"><span>print(formatted_string)  
</span></span><span style="display:flex;"><span>end_time <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>perf_counter()  
</span></span><span style="display:flex;"><span>method_1_time <span style="color:#f92672">=</span> end_time <span style="color:#f92672">-</span> start_time  
</span></span><span style="display:flex;"><span>method_1_space <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>getsizeof(formatted_string)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Method 2: using f-string in a loop  </span>
</span></span><span style="display:flex;"><span>start_time <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>perf_counter()  
</span></span><span style="display:flex;"><span>formatted_strings <span style="color:#f92672">=</span> [<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">{</span>j<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span> <span style="color:#66d9ef">for</span> i, j <span style="color:#f92672">in</span> table<span style="color:#f92672">.</span>items()]  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> formatted_strings:  
</span></span><span style="display:flex;"><span>    print(s, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39; &#39;</span>)  
</span></span><span style="display:flex;"><span>end_time <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>perf_counter()  
</span></span><span style="display:flex;"><span>method_2_time <span style="color:#f92672">=</span> end_time <span style="color:#f92672">-</span> start_time  
</span></span><span style="display:flex;"><span>method_2_space <span style="color:#f92672">=</span> sum(sys<span style="color:#f92672">.</span>getsizeof(s) <span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> formatted_strings)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output  </span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Method 1 time: </span><span style="color:#e6db74">{</span>method_1_time<span style="color:#e6db74">:</span><span style="color:#e6db74">.4f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">; Method 2 time: </span><span style="color:#e6db74">{</span>method_2_time<span style="color:#e6db74">:</span><span style="color:#e6db74">.4f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)  
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Method 1 space: </span><span style="color:#e6db74">{</span>method_1_space<span style="color:#e6db74">}</span><span style="color:#e6db74">; Method 2 space: </span><span style="color:#e6db74">{</span>method_2_space<span style="color:#e6db74">:</span><span style="color:#e6db74">.4f</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span></code></pre></div><p>The metrics came out pretty expected: no visible difference in time, but the space of method 2 was twice the size. Maybe not the best way to test it, but I just asked AI how they would do it and this was their response.</p>
<p>I like this example they give on how to nicely format some columns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">11</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{0:2d}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{1:3d}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{2:4d}</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">.</span>format(x, x<span style="color:#f92672">*</span>x, x<span style="color:#f92672">*</span>x<span style="color:#f92672">*</span>x))
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">1</span>    <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">2</span>   <span style="color:#ae81ff">4</span>    <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">3</span>   <span style="color:#ae81ff">9</span>   <span style="color:#ae81ff">27</span>
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">4</span>  <span style="color:#ae81ff">16</span>   <span style="color:#ae81ff">64</span>
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">25</span>  <span style="color:#ae81ff">125</span>
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">6</span>  <span style="color:#ae81ff">36</span>  <span style="color:#ae81ff">216</span>
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">7</span>  <span style="color:#ae81ff">49</span>  <span style="color:#ae81ff">343</span>
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">8</span>  <span style="color:#ae81ff">64</span>  <span style="color:#ae81ff">512</span>
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">9</span>  <span style="color:#ae81ff">81</span>  <span style="color:#ae81ff">729</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">10</span> <span style="color:#ae81ff">100</span> <span style="color:#ae81ff">1000</span>
</span></span></code></pre></div><p>6/20/2024</p>
<h3 id="72-reading-and-writing-files"><strong>7.2 Reading and Writing Files</strong></h3>
<p>Using <code>open()</code> will return a file object, commonly used with two positional arguments and one keyword argument; <code>open(filename, mode, encoding=None)</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> f <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;workfile&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;utf-8&#39;</span>)
</span></span></code></pre></div><p>The first argument, obviously, is the filename. You could also use a path to get there if not local.</p>
<p>The second, mode, determines the way <code>open()</code> is connecting to the file.</p>
<ul>
<li><code>r</code> is for when the file is only to be read (the default if mode isn&rsquo;t in use)</li>
<li><code>w</code> is for writing only (any existing file of the same name will be erased)</li>
<li><code>a</code> opens the file for appending (adding data to the end of the file)</li>
<li><code>r+</code> opens the file for both reading and writing</li>
<li><code>b</code> opens the file in binary; encoding does not work with this</li>
</ul>
<p>Most encoding will be done in UTF-8, so unless otherwise specified, that&rsquo;s what we&rsquo;ll use.</p>
<p>It&rsquo;s good practice to use <code>with</code> when dealing with files, so the file is properly closed when done being used.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;workfile&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;utf-8&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>	read_data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span></code></pre></div><p>If you&rsquo;re not using <code>with</code>, you&rsquo;ll have to call <code>f.close()</code> in order to close the file and free up memory.</p>
<p><strong>Methods of File Objects</strong></p>
<p>Assuming <code>f</code> is a file we are working with:</p>
<ul>
<li><code>f.read()</code>: reads some quantity of data and returns it as a string for text mode, and a bytes object for binary mode. <em>Size</em> is an optional argument to determine how much to read. If at the last line/end of file, an empty string will be returned instead.</li>
<li><code>f.readline()</code>: reads only a single line from the file. All lines end with a <code>\n</code> except for the last line; a nice convention for us to determine if it&rsquo;s the end of the file or a new line.</li>
<li><code>f.readlines()</code>: returns all lines in a file as a list</li>
<li><code>f.write(string)</code>: writes the contents of <em>string</em> into the file. Also returns the number of characters written.</li>
<li><code>f.tell()</code>: returns an integer giving the file object&rsquo;s current position in the file</li>
<li><code>f.seek(offset, whence)</code>: To change an object&rsquo;s position; position computed by adding offset to a reference point set by whence. 0 measures from the beginning of the file, 1 is the current position, and 2 uses the end of the file as a reference point.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;This is the entire file.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>readline()
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;This is the first line of the file.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>readline()
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;Second line of the file</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>readline()
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># for when reading lines from a file</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> f:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(line, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39; &#39;</span>)
</span></span><span style="display:flex;"><span>This <span style="color:#f92672">is</span> the first line of the file<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>Second line of the file
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;This is a test</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">15</span>
</span></span></code></pre></div><p>You can also save structured data with JSON (JavaScript Object Notation). Because you can only read and write strings, numbers are difficult to process.</p>
<p>The module <code>json</code> can take Python structures and convert them into string representations, aka <strong>Serializing</strong>. The opposite, reconstructing data from the string representation is <strong>Deserializing</strong>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;stupid&#39;</span>, <span style="color:#e6db74">&#39;list&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> json<span style="color:#f92672">.</span>dumps(x)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;[1, &#34;stupid&#34;, &#34;list&#34;]&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or, we could use dump() to serialize to a text file, f</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> json<span style="color:#f92672">.</span>dump(x, f)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># and to decode back</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(f)
</span></span></code></pre></div><hr>
<p>Next:
<a href="https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-8/">Chapter 8</a></p>
]]></content>
        </item>
        
        <item>
            <title>The Python Tutorial Notes - Chapter 6</title>
            <link>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-6/</link>
            <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-6/</guid>
            <description>Modified: July 19 2024
Modules 6/15/2024
Obviously, using local instances are not viable for long time development is not realistic. This is why we write scripts.
Python has the ability to writes scripts, or another method called modules. Definitions from modules can be imported into your instance of Python.
Main is also given a definition here: the collection of variables that you have access to in a script executed at the top level and in calculator mode.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<hr>
<h2 id="modules"><strong>Modules</strong></h2>
<p>6/15/2024</p>
<p>Obviously, using local instances are not viable for long time development is not realistic. This is why we write <em>scripts</em>.</p>
<p>Python has the ability to writes scripts, or another method called modules. Definitions from modules can be imported into your instance of Python.</p>
<p>Main is also given a definition here: the collection of variables that you have access to in a script executed at the top level and in calculator mode.</p>
<p>You can write local modules by defining some basic functions on a <code>.py</code> file, then importing that file and calling them directly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># file named intro.py</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">print_intro</span>(name):
</span></span><span style="display:flex;"><span>	print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Welcome to the game </span><span style="color:#e6db74">{</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">!&#39;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> intro
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>username <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#39;What is your name? &#39;</span>)
</span></span><span style="display:flex;"><span>intro<span style="color:#f92672">.</span>print_intro(username)
</span></span></code></pre></div><p>6/16/2024</p>
<h3 id="61-more-on-modules"><strong>6.1 More on Modules</strong></h3>
<p>Modules can contain executable statements and function definitions.</p>
<p>Statements are ran the <em>first</em> time they are encountered from an <code>import</code>.</p>
<p>Modules have their own private namespace, which is used as the global namespace by all functions defined in said module (<code>modname.itemname</code>).</p>
<p>Modules can import other modules.</p>
<p>It is customary to always use <code>import</code> at the beginning of a file. When placed, they are added to the modules global namespace.</p>
<p>You can vary the way you use an <code>import</code> to allow for selecting just a few functions, or all of them explicitly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># specific call</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> intro <span style="color:#f92672">import</span> print_intro
</span></span><span style="display:flex;"><span>print_intro()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># all items</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> intro <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>         <span style="color:#75715e"># looked down upon due to low readability</span>
</span></span><span style="display:flex;"><span>print_intro()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># using a name using as</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> intro <span style="color:#66d9ef">as</span> ir
</span></span><span style="display:flex;"><span>ir<span style="color:#f92672">.</span>print_intro()
</span></span></code></pre></div><p>If you want to ensure your code your module can run as a script, you can do the following;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>	username <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#39;What is your name? &#39;</span>)
</span></span><span style="display:flex;"><span>	print_intro(username)
</span></span></code></pre></div><p>This makes it usable as a script and an importable module, since the code that parse the command line only runs if the modules is executed as the &ldquo;main&rdquo; file.</p>
<p>6/17/2024</p>
<p>When importing modules, the built-in modules are separate from the ones you bring into the environment. Let&rsquo;s say we have a module named <code>spam</code>. When we import <code>spam</code>, the interpreter first searches that list of built-in modules (that list is stored in <code>sys.builtin_module_names</code>). If not found, it will search for a <code>spam.py</code> in a list of directories given by <code>sys.path</code>:</p>
<ul>
<li>The directory containing the input script (the current directory if not specified)</li>
<li><a href="https://docs.python.org/3.12/using/cmdline.html#envvar-PYTHONPATH"><code>PYTHONPATH</code></a> (a list of directory names)</li>
<li>The installation-dependent default</li>
</ul>
<h3 id="62-standard-modules"><strong>6.2 Standard Modules</strong></h3>
<p>Python comes with it&rsquo;s own standard library with useful functions. These are described in the Python Library Reference, which I have back in the first note for this series.</p>
<p>One thing they bring up is <code>sys</code>. You can edit path by using <code>sys.path</code> like so,</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> sys
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> sys<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#39;/ufs/guido/lib/python&#39;</span>)
</span></span></code></pre></div><h3 id="63-the-dir-function"><strong>6.3 The <code>dir()</code> Function</strong></h3>
<p><code>dir()</code> is used to find out which names a module defines.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">import</span> intro
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> dir(intro)
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;__name__&#39;</span>, <span style="color:#e6db74">&#39;print_intro&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> dir()
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;__builtins__&#39;</span>, <span style="color:#e6db74">&#39;__name__&#39;</span>, <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;intro&#39;</span>]
</span></span></code></pre></div><p>It ends up listing out all types of things, like variables modules, and functions.</p>
<p>To see the built-in functions and variables, you can use <code>dir(builtins)</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> import(builtins)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> dir(builtins)
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;ArithmeticError&#39;</span>, <span style="color:#e6db74">&#39;AssertionError&#39;</span>, <span style="color:#e6db74">&#39;AttributeError&#39;</span>, <span style="color:#e6db74">&#39;BaseException&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;BlockingIOError&#39;</span>, <span style="color:#e6db74">&#39;BrokenPipeError&#39;</span>, <span style="color:#e6db74">&#39;BufferError&#39;</span>, <span style="color:#e6db74">&#39;BytesWarning&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;ChildProcessError&#39;</span>, <span style="color:#e6db74">&#39;ConnectionAbortedError&#39;</span>, <span style="color:#e6db74">&#39;ConnectionError&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;ConnectionRefusedError&#39;</span>, <span style="color:#e6db74">&#39;ConnectionResetError&#39;</span>, <span style="color:#e6db74">&#39;DeprecationWarning&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;EOFError&#39;</span>, <span style="color:#e6db74">&#39;Ellipsis&#39;</span>, <span style="color:#e6db74">&#39;EnvironmentError&#39;</span>, <span style="color:#e6db74">&#39;Exception&#39;</span>, <span style="color:#e6db74">&#39;False&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;FileExistsError&#39;</span>, <span style="color:#e6db74">&#39;FileNotFoundError&#39;</span>, <span style="color:#e6db74">&#39;FloatingPointError&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;FutureWarning&#39;</span>, <span style="color:#e6db74">&#39;GeneratorExit&#39;</span>, <span style="color:#e6db74">&#39;IOError&#39;</span>, <span style="color:#e6db74">&#39;ImportError&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;ImportWarning&#39;</span>, <span style="color:#e6db74">&#39;IndentationError&#39;</span>, <span style="color:#e6db74">&#39;IndexError&#39;</span>, <span style="color:#e6db74">&#39;InterruptedError&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;IsADirectoryError&#39;</span>, <span style="color:#e6db74">&#39;KeyError&#39;</span>, <span style="color:#e6db74">&#39;KeyboardInterrupt&#39;</span>, <span style="color:#e6db74">&#39;LookupError&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;MemoryError&#39;</span>, <span style="color:#e6db74">&#39;NameError&#39;</span>, <span style="color:#e6db74">&#39;None&#39;</span>, <span style="color:#e6db74">&#39;NotADirectoryError&#39;</span>, <span style="color:#e6db74">&#39;NotImplemented&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;NotImplementedError&#39;</span>, <span style="color:#e6db74">&#39;OSError&#39;</span>, <span style="color:#e6db74">&#39;OverflowError&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;PendingDeprecationWarning&#39;</span>, <span style="color:#e6db74">&#39;PermissionError&#39;</span>, <span style="color:#e6db74">&#39;ProcessLookupError&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;ReferenceError&#39;</span>, <span style="color:#e6db74">&#39;ResourceWarning&#39;</span>, <span style="color:#e6db74">&#39;RuntimeError&#39;</span>, <span style="color:#e6db74">&#39;RuntimeWarning&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;StopIteration&#39;</span>, <span style="color:#e6db74">&#39;SyntaxError&#39;</span>, <span style="color:#e6db74">&#39;SyntaxWarning&#39;</span>, <span style="color:#e6db74">&#39;SystemError&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;SystemExit&#39;</span>, <span style="color:#e6db74">&#39;TabError&#39;</span>, <span style="color:#e6db74">&#39;TimeoutError&#39;</span>, <span style="color:#e6db74">&#39;True&#39;</span>, <span style="color:#e6db74">&#39;TypeError&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;UnboundLocalError&#39;</span>, <span style="color:#e6db74">&#39;UnicodeDecodeError&#39;</span>, <span style="color:#e6db74">&#39;UnicodeEncodeError&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;UnicodeError&#39;</span>, <span style="color:#e6db74">&#39;UnicodeTranslateError&#39;</span>, <span style="color:#e6db74">&#39;UnicodeWarning&#39;</span>, <span style="color:#e6db74">&#39;UserWarning&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;ValueError&#39;</span>, <span style="color:#e6db74">&#39;Warning&#39;</span>, <span style="color:#e6db74">&#39;ZeroDivisionError&#39;</span>, <span style="color:#e6db74">&#39;_&#39;</span>, <span style="color:#e6db74">&#39;__build_class__&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;__debug__&#39;</span>, <span style="color:#e6db74">&#39;__doc__&#39;</span>, <span style="color:#e6db74">&#39;__import__&#39;</span>, <span style="color:#e6db74">&#39;__name__&#39;</span>, <span style="color:#e6db74">&#39;__package__&#39;</span>, <span style="color:#e6db74">&#39;abs&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;all&#39;</span>, <span style="color:#e6db74">&#39;any&#39;</span>, <span style="color:#e6db74">&#39;ascii&#39;</span>, <span style="color:#e6db74">&#39;bin&#39;</span>, <span style="color:#e6db74">&#39;bool&#39;</span>, <span style="color:#e6db74">&#39;bytearray&#39;</span>, <span style="color:#e6db74">&#39;bytes&#39;</span>, <span style="color:#e6db74">&#39;callable&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;chr&#39;</span>, <span style="color:#e6db74">&#39;classmethod&#39;</span>, <span style="color:#e6db74">&#39;compile&#39;</span>, <span style="color:#e6db74">&#39;complex&#39;</span>, <span style="color:#e6db74">&#39;copyright&#39;</span>, <span style="color:#e6db74">&#39;credits&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;delattr&#39;</span>, <span style="color:#e6db74">&#39;dict&#39;</span>, <span style="color:#e6db74">&#39;dir&#39;</span>, <span style="color:#e6db74">&#39;divmod&#39;</span>, <span style="color:#e6db74">&#39;enumerate&#39;</span>, <span style="color:#e6db74">&#39;eval&#39;</span>, <span style="color:#e6db74">&#39;exec&#39;</span>, <span style="color:#e6db74">&#39;exit&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;filter&#39;</span>, <span style="color:#e6db74">&#39;float&#39;</span>, <span style="color:#e6db74">&#39;format&#39;</span>, <span style="color:#e6db74">&#39;frozenset&#39;</span>, <span style="color:#e6db74">&#39;getattr&#39;</span>, <span style="color:#e6db74">&#39;globals&#39;</span>, <span style="color:#e6db74">&#39;hasattr&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;hash&#39;</span>, <span style="color:#e6db74">&#39;help&#39;</span>, <span style="color:#e6db74">&#39;hex&#39;</span>, <span style="color:#e6db74">&#39;id&#39;</span>, <span style="color:#e6db74">&#39;input&#39;</span>, <span style="color:#e6db74">&#39;int&#39;</span>, <span style="color:#e6db74">&#39;isinstance&#39;</span>, <span style="color:#e6db74">&#39;issubclass&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;iter&#39;</span>, <span style="color:#e6db74">&#39;len&#39;</span>, <span style="color:#e6db74">&#39;license&#39;</span>, <span style="color:#e6db74">&#39;list&#39;</span>, <span style="color:#e6db74">&#39;locals&#39;</span>, <span style="color:#e6db74">&#39;map&#39;</span>, <span style="color:#e6db74">&#39;max&#39;</span>, <span style="color:#e6db74">&#39;memoryview&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;min&#39;</span>, <span style="color:#e6db74">&#39;next&#39;</span>, <span style="color:#e6db74">&#39;object&#39;</span>, <span style="color:#e6db74">&#39;oct&#39;</span>, <span style="color:#e6db74">&#39;open&#39;</span>, <span style="color:#e6db74">&#39;ord&#39;</span>, <span style="color:#e6db74">&#39;pow&#39;</span>, <span style="color:#e6db74">&#39;print&#39;</span>, <span style="color:#e6db74">&#39;property&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;quit&#39;</span>, <span style="color:#e6db74">&#39;range&#39;</span>, <span style="color:#e6db74">&#39;repr&#39;</span>, <span style="color:#e6db74">&#39;reversed&#39;</span>, <span style="color:#e6db74">&#39;round&#39;</span>, <span style="color:#e6db74">&#39;set&#39;</span>, <span style="color:#e6db74">&#39;setattr&#39;</span>, <span style="color:#e6db74">&#39;slice&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;sorted&#39;</span>, <span style="color:#e6db74">&#39;staticmethod&#39;</span>, <span style="color:#e6db74">&#39;str&#39;</span>, <span style="color:#e6db74">&#39;sum&#39;</span>, <span style="color:#e6db74">&#39;super&#39;</span>, <span style="color:#e6db74">&#39;tuple&#39;</span>, <span style="color:#e6db74">&#39;type&#39;</span>, <span style="color:#e6db74">&#39;vars&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;zip&#39;</span>]
</span></span></code></pre></div><h3 id="64-packages"><strong>6.4 Packages</strong></h3>
<p>Packages are structures that contain nested modules. You use the dot operator to access modules through subfolders. The following structure if you wanted to design your own package for uniform handling of sound files and sound data; there are many different sound files and types so they all have different utilities.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sound<span style="color:#f92672">/</span>                          Top<span style="color:#f92672">-</span>level package
</span></span><span style="display:flex;"><span>      __init__<span style="color:#f92672">.</span>py               Initialize the sound package
</span></span><span style="display:flex;"><span>      formats<span style="color:#f92672">/</span>                  Subpackage <span style="color:#66d9ef">for</span> file format conversions
</span></span><span style="display:flex;"><span>              __init__<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              wavread<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              wavwrite<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              aiffread<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              aiffwrite<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              auread<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              auwrite<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>      effects<span style="color:#f92672">/</span>                  Subpackage <span style="color:#66d9ef">for</span> sound effects
</span></span><span style="display:flex;"><span>              __init__<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              echo<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              surround<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              reverse<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>      filters<span style="color:#f92672">/</span>                  Subpackage <span style="color:#66d9ef">for</span> filters
</span></span><span style="display:flex;"><span>              __init__<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              equalizer<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              vocoder<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              karaoke<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">...</span>
</span></span></code></pre></div><p>If you only wanted to access a certain module from the package, you could use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sound.effects.echo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sound<span style="color:#f92672">.</span>effects<span style="color:#f92672">.</span>echo<span style="color:#f92672">.</span>echofilter(input, output, delay<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>, atten<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span></code></pre></div><p>You could also do it like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sound.effects <span style="color:#f92672">import</span> echo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo<span style="color:#f92672">.</span>echofilter(input, output, delay<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>, atten<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span></code></pre></div><p>or even like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> sound.effets.echo <span style="color:#f92672">import</span> echofilter
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echofilter(input, output, delay<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>, atten<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
</span></span></code></pre></div><p>Each item in the dot operator context, each item must be a package except for the last item. The last item can be a module or a package but not a class or function or variable.</p>
<hr>
<p>Next:
<a href="https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-7/">Chapter 7</a></p>
]]></content>
        </item>
        
        <item>
            <title>The Python Tutorial Notes - Chapter 5</title>
            <link>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-5/</link>
            <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-5/</guid>
            <description>Modified: July 19 2024
Data Structures 6/10/2024
5.1 More on Lists Methods for Lists:
list.append(x) Adds an item to the end of the list Equivalent to a[len(a):] = [x] list.extend(iterable) Extend the list by appending all items from an iterable list.insert(i, x) Insert an item into a given position, where i is the index location and x is the value list.remove(x) Remove the first item from the list whose value is equal to x, ValueError if no such item list.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<hr>
<h2 id="data-structures"><strong>Data Structures</strong></h2>
<p>6/10/2024</p>
<h3 id="51-more-on-lists"><strong>5.1 More on Lists</strong></h3>
<p>Methods for Lists:</p>
<ul>
<li><code>list.append(x)</code>
<ul>
<li>Adds an item to the end of the list</li>
<li>Equivalent to <code>a[len(a):] = [x]</code></li>
</ul>
</li>
<li><code>list.extend(iterable)</code>
<ul>
<li>Extend the list by appending all items from an iterable</li>
</ul>
</li>
<li><code>list.insert(i, x)</code>
<ul>
<li>Insert an item into a given position, where <code>i</code> is the index location and <code>x</code> is the value</li>
</ul>
</li>
<li><code>list.remove(x)</code>
<ul>
<li>Remove the first item from the list whose value is equal to <code>x</code>, <code>ValueError</code> if no such item</li>
</ul>
</li>
<li><code>list.pop([i])</code>
<ul>
<li>Remove the item at the given position in the list, and return it. Without an index, it will remove and return the last item in the list. <code>IndexError</code> if the list is empty or the index is out of the list range</li>
</ul>
</li>
<li><code>list.clear()</code>
<ul>
<li>Remove all items from the list. Equivalent to <code>del a[:]</code></li>
</ul>
</li>
<li><code>list.index(x[, start[, end]]</code>
<ul>
<li>Return zero-based index from the value <code>x</code>. <code>ValueError</code> if <code>x</code> does not exist.</li>
<li>Parameters interpreted as slices from the list in <code>[]</code> format</li>
</ul>
</li>
<li><code>list.count(x)</code>
<ul>
<li>Return the number of times <code>x</code> appears in the list</li>
</ul>
</li>
<li><code>list.sort(*, key=None, reverse=False)</code>
<ul>
<li>Sort the items of the list in place</li>
<li>Arguments used for sort customization</li>
<li><code>key</code> can be set to things like <code>key=str.lower</code></li>
<li>There&rsquo;s a good <a href="https://docs.python.org/3.12/howto/sorting.html#sortinghowto">doc</a> on sorting I want to go over later</li>
</ul>
</li>
<li><code>list.reverse()</code>
<ul>
<li>Reverse the elements of the list in place</li>
</ul>
</li>
<li><code>list.copy()</code>
<ul>
<li>Return a copy of the list</li>
<li>Same as <code>a[:]</code></li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Atticus&#39;</span>, <span style="color:#e6db74">&#39;Peaches&#39;</span>, <span style="color:#e6db74">&#39;Aphrodite&#39;</span>, <span style="color:#e6db74">&#39;Aphrodite&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#39;Peaches&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#39;Shroomie&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#39;Aphrodite&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#39;Aphrodite&#39;</span>, <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats<span style="color:#f92672">.</span>reverse()
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;Aphrodite&#39;</span>, <span style="color:#e6db74">&#39;Aphrodite&#39;</span>, <span style="color:#e6db74">&#39;Peaches&#39;</span>, <span style="color:#e6db74">&#39;Atticus&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#39;David&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;Aphrodite&#39;</span>, <span style="color:#e6db74">&#39;Aphrodite&#39;</span>, <span style="color:#e6db74">&#39;Peaches&#39;</span>, <span style="color:#e6db74">&#39;Atticus&#39;</span>, <span style="color:#e6db74">&#39;David&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats<span style="color:#f92672">.</span>sort()
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;David&#39;</span>, <span style="color:#e6db74">&#39;Aphrodite&#39;</span>, <span style="color:#e6db74">&#39;Aphrodite&#39;</span>, <span style="color:#e6db74">&#39;Atticus&#39;</span>, <span style="color:#e6db74">&#39;Peaches&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> cats<span style="color:#f92672">.</span>pop()
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;Peaches&#39;</span>
</span></span></code></pre></div><p>Methods like <code>insert</code>, <code>remove</code> or <code>sort</code> modify the list and actually return <code>None</code>.</p>
<p>Not all data can be sorted or compared; integers cannot be compared to strings and <code>None</code> can&rsquo;t be compared to other types.</p>
<p>List methods make it easy to use as a <strong>Stack</strong>. Last element added is the first element retrieved, <strong>last-in, first-out.</strong> <code>append()</code> adds directly to the end of the list, and <code>pop()</code> retrieves and removes the last element.</p>
<p>You can also use a list as a <strong>Queue</strong>, where the first element added is the first element retrieved, <strong>first-in, last-out</strong>. They aren&rsquo;t very efficient at it though. You can use <code>collections.deque</code> to replicate it though.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> deque
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> queue <span style="color:#f92672">=</span> deque([<span style="color:#e6db74">&#39;Adam&#39;</span>, <span style="color:#e6db74">&#39;Eve&#39;</span>, <span style="color:#e6db74">&#39;Steve&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> queue<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#39;God&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> queue<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#39;Satan&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> queue<span style="color:#f92672">.</span>popleft()
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;Adam&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> queue<span style="color:#f92672">.</span>popleft()
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;Eve&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> queue
</span></span><span style="display:flex;"><span>dequ([<span style="color:#e6db74">&#39;Steve&#39;</span>, <span style="color:#e6db74">&#39;God&#39;</span>, <span style="color:#e6db74">&#39;Satan&#39;</span>])
</span></span></code></pre></div><p><strong>List Comprehension</strong> is an easier way to create lists using shortened syntax. If you have some sort of iteration that needs to happen, whether modified or not, you can easily make new lists using such info.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> squares <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	squares<span style="color:#f92672">.</span>append(x<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> squares
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">25</span>, <span style="color:#ae81ff">36</span>, <span style="color:#ae81ff">49</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">81</span>]
</span></span></code></pre></div><p>We can achieve the same with either</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>squares <span style="color:#f92672">=</span> list(map(<span style="color:#66d9ef">lambda</span> x: x<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, range(<span style="color:#ae81ff">10</span>)))
</span></span><span style="display:flex;"><span>squares <span style="color:#f92672">=</span> [x<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>)]
</span></span></code></pre></div><p>The latter is clearly, more readable and easier to understand.</p>
<p>You can add conditionals, and even complicated structures:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> math <span style="color:#f92672">import</span> pi
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> [str(round(pi, i)) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">6</span>)]
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;3.1&#39;</span>, <span style="color:#e6db74">&#39;3.14&#39;</span>, <span style="color:#e6db74">&#39;3.142&#39;</span>, <span style="color:#e6db74">&#39;3.1416&#39;</span>, <span style="color:#e6db74">&#39;3.14159&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> vec <span style="color:#f92672">=</span> [<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> [x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> vec <span style="color:#66d9ef">if</span> x <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>]
</span></span></code></pre></div><h3 id="52-the-del-statement"><strong>5.2 The <code>del</code> statement</strong></h3>
<p>To delete an item from a list based on it&rsquo;s index instead of it&rsquo;s value, we can use the <code>del</code> statement. Instead of <code>pop()</code> which returns a value, <code>del</code> can remove slices and even clear a list. It can also delete entire variables</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> [<span style="color:#ae81ff">69</span>, <span style="color:#ae81ff">420</span>, <span style="color:#ae81ff">6969</span>, <span style="color:#ae81ff">4200</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">del</span> a[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">420</span>, <span style="color:#ae81ff">6969</span>, <span style="color:#ae81ff">4200</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">del</span> a[<span style="color:#ae81ff">0</span>:]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">420</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">del</span> a
</span></span></code></pre></div><h3 id="53-tuples-and-sequences"><strong>5.3 Tuples and Sequences</strong></h3>
<p>Tuples are a sequence type, along with list and range. Tuples consist of any number of values separated by a comma. They can be nested, and are <em>immutable</em>, which means they cannot be altered once made. They can however, contain items that are mutable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t <span style="color:#f92672">=</span> <span style="color:#ae81ff">123</span>, <span style="color:#e6db74">&#39;360 no scope&#39;</span>, <span style="color:#ae81ff">420</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">123</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t
</span></span><span style="display:flex;"><span>(<span style="color:#ae81ff">123</span>, <span style="color:#e6db74">&#39;360 no scope&#39;</span>, <span style="color:#ae81ff">420</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> u <span style="color:#f92672">=</span> t, <span style="color:#ae81ff">69</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> u
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> ((<span style="color:#ae81ff">123</span>, <span style="color:#e6db74">&#39;360 no scope&#39;</span>, <span style="color:#ae81ff">420</span>), <span style="color:#ae81ff">69</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">456</span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">TypeError</span>: <span style="color:#e6db74">&#39;tuple&#39;</span> object does <span style="color:#f92672">not</span> support item assignment
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> v <span style="color:#f92672">=</span> ([<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>],[<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>])
</span></span></code></pre></div><p>6/14/2024</p>
<p>Even though they are similar to lists, we use them for different purpose. Mostly this is the case because of the immutability of the tuple versus the list. When you need to store a value that doesn&rsquo;t need to change and is in some specific order, tuple over list makes sense. The only thing you must do is if you have only one item, you must leave a comma after the value, regardless of there not being anything following it. Empty parenthesis are okay for an empty tuple.</p>
<p>A fun thing you can do with tuples is unpack them, like so,</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> t <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello&#34;</span>, <span style="color:#ae81ff">123</span>, <span style="color:#ae81ff">456</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x, y, z <span style="color:#f92672">=</span> t
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;hello&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> y
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">123</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> z
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">456</span>
</span></span></code></pre></div><h3 id="54-sets"><strong>5.4 Sets</strong></h3>
<p>Sets are unordered, no-duplicate collection of elements. Use cases are membership testing(?) and eliminating duplicate entries. Sets also support math operations like union, intersection, difference, and symmetric difference.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> bag <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;sword&#39;</span>, <span style="color:#e6db74">&#39;potion&#39;</span>, <span style="color:#e6db74">&#39;potion&#39;</span>, <span style="color:#e6db74">&#39;spell&#39;</span>, <span style="color:#e6db74">&#39;axe&#39;</span>, <span style="color:#e6db74">&#39;spell&#39;</span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(bag)
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;sword&#39;</span>, <span style="color:#e6db74">&#39;potion&#39;</span>, <span style="color:#e6db74">&#39;spell&#39;</span>, <span style="color:#e6db74">&#39;axe&#39;</span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#39;axe&#39;</span> <span style="color:#f92672">in</span> bag
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#39;wand&#39;</span> <span style="color:#f92672">in</span> bag
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> set(<span style="color:#e6db74">&#39;abracadabra&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> b <span style="color:#f92672">=</span> set(<span style="color:#e6db74">&#39;alakazam&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span>, <span style="color:#e6db74">&#39;d&#39;</span>}                       <span style="color:#75715e"># sets are naturally unordered</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">-</span> b
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;d&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>}                                 <span style="color:#75715e"># letters in a but not in b</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">|</span> b
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;d&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#e6db74">&#39;m&#39;</span>, <span style="color:#e6db74">&#39;z&#39;</span>, <span style="color:#e6db74">&#39;l&#39;</span>}        <span style="color:#75715e"># letters in a or b or both</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">&amp;</span> b
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span>}                                      <span style="color:#75715e"># letters in both a and b</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">^</span> b
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;d&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#e6db74">&#39;m&#39;</span>, <span style="color:#e6db74">&#39;z&#39;</span>, <span style="color:#e6db74">&#39;l&#39;</span>}                  <span style="color:#75715e"># letters in a or b but not both</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> {x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> <span style="color:#e6db74">&#39;abracadabra&#39;</span> <span style="color:#66d9ef">if</span> x <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> <span style="color:#e6db74">&#39;abc&#39;</span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;d&#39;</span>}
</span></span></code></pre></div><h3 id="55-dictionaries"><strong>5.5 Dictionaries</strong></h3>
<p>Dictionaries are comparable to other languages &ldquo;associative arrays&rdquo;. Basically, a key, value pair. Unlike sequences where index determines location, that key is your index.</p>
<p>Keys can be numbers, strings, tuples (as long as there are no mutable structures inside), and lists (you can mutate the list via <code>.append()</code> or <code>.extend()</code>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> tel <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;jack&#39;</span>: <span style="color:#ae81ff">4098</span>, <span style="color:#e6db74">&#39;baki&#39;</span>: <span style="color:#ae81ff">4139</span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> tel[<span style="color:#e6db74">&#39;yujiro&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">4127</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> tel
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;jack&#39;</span>: <span style="color:#ae81ff">4098</span>, <span style="color:#e6db74">&#39;baki&#39;</span>: <span style="color:#ae81ff">4139</span>, <span style="color:#e6db74">&#39;yujiro&#39;</span>: <span style="color:#ae81ff">4127</span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> tel[<span style="color:#e6db74">&#39;baki&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4139</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">del</span>[<span style="color:#e6db74">&#39;jack&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> tel[<span style="color:#e6db74">&#39;retsu&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">4127</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> tel
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;baki&#39;</span>: <span style="color:#ae81ff">4139</span>, <span style="color:#e6db74">&#39;yujiro&#39;</span>: <span style="color:#ae81ff">4127</span>, <span style="color:#e6db74">&#39;retsu&#39;</span>: <span style="color:#ae81ff">4127</span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> list(tel)
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;baki&#39;</span>, <span style="color:#e6db74">&#39;yujiro&#39;</span>, <span style="color:#e6db74">&#39;retsu&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> sorted(tel)
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;baki&#39;</span>, <span style="color:#e6db74">&#39;retsu&#39;</span>, <span style="color:#e6db74">&#39;yujiro&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#39;baki&#39;</span> <span style="color:#f92672">in</span> tel
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#39;retsu&#39;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> tel
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dict() constructor</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> dict([(<span style="color:#e6db74">&#39;baki&#39;</span>, <span style="color:#ae81ff">4120</span>), (<span style="color:#e6db74">&#39;retsu&#39;</span>, <span style="color:#ae81ff">0909</span>)])
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;baki&#39;</span>: <span style="color:#ae81ff">4120</span>, <span style="color:#e6db74">&#39;retsu&#39;</span>: <span style="color:#ae81ff">0909</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dict comprehension</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> {x:x<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> (<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">6</span>)}
</span></span><span style="display:flex;"><span>{<span style="color:#ae81ff">2</span>: <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>: <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">6</span>: <span style="color:#ae81ff">36</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># using keyword arguments</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> dict(baki<span style="color:#f92672">=</span><span style="color:#ae81ff">123</span>, yujiro<span style="color:#f92672">=</span><span style="color:#ae81ff">456</span>, retsu<span style="color:#f92672">=</span><span style="color:#ae81ff">999</span>)
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;baki&#39;</span>: <span style="color:#ae81ff">123</span>, <span style="color:#e6db74">&#39;yujiro&#39;</span>: <span style="color:#ae81ff">456</span>, <span style="color:#e6db74">&#39;retsu&#39;</span>: <span style="color:#ae81ff">999</span>}
</span></span></code></pre></div><h3 id="56-looping-techniques"><strong>5.6 Looping Techniques</strong></h3>
<p>When looping through dictionaries, you can use the <code>items()</code> method to get both the key and the value.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> knights <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;Arthur&#39;</span>: <span style="color:#e6db74">&#39;The Giant Douche&#39;</span>, <span style="color:#e6db74">&#39;Robin&#39;</span>: <span style="color:#e6db74">&#39;The Turd Sandwich&#39;</span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> knights<span style="color:#f92672">.</span>items()
</span></span><span style="display:flex;"><span>		print(k, v)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Arthur The Giant Douche
</span></span><span style="display:flex;"><span>Robin The Turd Sandwich
</span></span></code></pre></div><p>When looping through a sequence, the position of index and corresponding value can be obtained at the same time using <code>enumerate()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> i, v <span style="color:#f92672">in</span> enumerate([<span style="color:#e6db74">&#39;la&#39;</span>, <span style="color:#e6db74">&#39;ti&#39;</span>, <span style="color:#e6db74">&#39;da&#39;</span>]):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(i, v)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span> la
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> ti
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> da
</span></span></code></pre></div><p>To loop over two or more sequences at the same time, you can use the <code>zip()</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> questions <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;name&#39;</span>, <span style="color:#e6db74">&#39;purpose&#39;</span>, <span style="color:#e6db74">&#39;motto&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> answers <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;lancelot&#39;</span>, <span style="color:#e6db74">&#39;fuck bitches&#39;</span>, <span style="color:#e6db74">&#39;get money&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> q, a <span style="color:#f92672">in</span> zip(questions, answers):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(<span style="color:#e6db74">&#39;What is your </span><span style="color:#e6db74">{0}</span><span style="color:#e6db74">? It is</span><span style="color:#e6db74">{1}</span><span style="color:#e6db74">.&#39;</span><span style="color:#f92672">.</span>format(q, a))
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;</span>
</span></span><span style="display:flex;"><span>What <span style="color:#f92672">is</span> your name<span style="color:#960050;background-color:#1e0010">?</span> It <span style="color:#f92672">is</span> lancelot<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>What <span style="color:#f92672">is</span> your purpose<span style="color:#960050;background-color:#1e0010">?</span> It <span style="color:#f92672">is</span> fuck bitches<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>What <span style="color:#f92672">is</span> your motto<span style="color:#960050;background-color:#1e0010">?</span> It <span style="color:#f92672">is</span> get money<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>To loop over a sequence in reverse, use the <code>reversed()</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> reversed(range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">2</span>)):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(i)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>To loop over a sequence that is sorted, use the <code>sorted()</code> function. You can combine that with <code>set()</code> to go through a sorted list of unique values.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> friends(<span style="color:#e6db74">&#39;yujiro&#39;</span>, <span style="color:#e6db74">&#39;baki&#39;</span>, <span style="color:#e6db74">&#39;baki&#39;</span>, <span style="color:#e6db74">&#39;baki&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> f <span style="color:#f92672">in</span> sorted(set(friends)):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(f)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;</span>
</span></span><span style="display:flex;"><span>baki
</span></span><span style="display:flex;"><span>yujiro
</span></span></code></pre></div><p>It is usually better to create a new list than sort and manipulate over an existing list.</p>
<p>6/15/2024</p>
<h3 id="57-more-on-conditionals"><strong>5.7 More on Conditionals</strong></h3>
<p>Conditions used in <code>while</code> and <code>if</code> statements can contain any operators, not just comparisons.</p>
<p><code>in</code> and <code>not in</code> are membership tests that determine if a value is in or not in some container (sequence, iterable). They can also compare if two objects are the same object or not.</p>
<p>Comparisons can also be chained: <code>a &lt; b == c</code> will test whether <code>a</code> is less than <code>b</code> and moreover <code>b</code> equals <code>c</code>.  They can be combined using <code>and</code> or <code>or</code>.</p>
<p><code>and</code> and <code>or</code> are <em>short-circuit</em> operators; meaning their arguments are evaluated from left to right and evaluation stops when a condition is met. IF <code>a</code> and <code>c</code> are true, but <code>b</code> is false, <code>a and b and c</code> does not evaluate <code>c</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> string1, string2, string3 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#e6db74">&#39;Dio&#39;</span>, <span style="color:#e6db74">&#39;Kars&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> non_null <span style="color:#f92672">=</span> string1 <span style="color:#f92672">or</span> string2 <span style="color:#f92672">or</span> string3
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> non_null
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;Dio&#39;</span>
</span></span></code></pre></div><h3 id="58-comparing-sequences-and-other-types"><strong>5.8 Comparing Sequences and Other Types</strong></h3>
<p>Sequence objects are usually only compared to other objects with the same sequence type. They are compared using <em>lexicographical</em> ordering; one item is compared directly against another, and so on until potential matches are exhausted.</p>
<hr>
<p>Next:
<a href="https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-6/">Chapter 6</a></p>
]]></content>
        </item>
        
        <item>
            <title>The Python Tutorial Notes - Chapter 4</title>
            <link>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-4/</link>
            <pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-4/</guid>
            <description>Modified: July 19 2024
Control Flow Tools 6/5/2024
The while loop was seen in the previous Fibonacci Sequence example.
4.1 if Statements &amp;gt;&amp;gt;&amp;gt; x = int(input(&amp;#34;Please enter an integer: &amp;#34;)) Please enter an integer: 42 &amp;gt;&amp;gt;&amp;gt; if x &amp;lt; 0: &amp;gt;&amp;gt;&amp;gt; x = 0 &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Negative so now it&amp;#39;s zero!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; elif x == 0: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Zero!!!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; elif x == 1: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;UNO!!!!!&amp;#34;) &amp;gt;&amp;gt;&amp;gt; else: &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Nice B)&amp;#34;) Nice B) Very basic; all you need is an if statement.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<hr>
<h2 id="control-flow-tools"><strong>Control Flow Tools</strong></h2>
<p>6/5/2024</p>
<p>The while loop was seen in the previous Fibonacci Sequence example.</p>
<h3 id="41-if-statements"><strong>4.1 <code>if</code> Statements</strong></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#34;Please enter an integer: &#34;</span>))
</span></span><span style="display:flex;"><span>Please enter an integer: <span style="color:#ae81ff">42</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">if</span> x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(<span style="color:#e6db74">&#34;Negative so now it&#39;s zero!&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">elif</span> x <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(<span style="color:#e6db74">&#34;Zero!!!&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">elif</span> x <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(<span style="color:#e6db74">&#34;UNO!!!!!&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(<span style="color:#e6db74">&#34;Nice B)&#34;</span>)
</span></span><span style="display:flex;"><span>Nice B)
</span></span></code></pre></div><p>Very basic; all you need is an if statement. Else is optional, and you can have many else if (<code>elif</code>) statements as you desire.</p>
<p>Similar to the <code>switch</code> and <code>case</code> statements in other languages (which?)</p>
<p>Also similar to <code>match</code> statements</p>
<h3 id="42-for-statements"><strong>4.2 <code>for</code> Statements</strong></h3>
<p>Unlike C++ where the user can define the iteration step and end conditions, Python&rsquo;s <code>for</code> statement iterates through an object (any sequence of data) in the order they appear, usually a list or a string.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> words <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;cat&#34;</span>, <span style="color:#e6db74">&#34;binky&#34;</span>, <span style="color:#e6db74">&#34;aphrodite&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> w <span style="color:#f92672">in</span> words:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(w, len(w))
</span></span><span style="display:flex;"><span>cat <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>binky <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>aphrodite <span style="color:#ae81ff">9</span>
</span></span></code></pre></div><p>Pro-tip: if your loop modifies a sequence while iterating over it, it is best to make a copy or create a new collection</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create sample dictionary</span>
</span></span><span style="display:flex;"><span>users <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;Richie&#39;</span>: <span style="color:#e6db74">&#39;active&#39;</span>, <span style="color:#e6db74">&#39;Sarah&#39;</span>: <span style="color:#e6db74">&#39;inactive&#39;</span>, <span style="color:#e6db74">&#39;Atticus&#39;</span>: <span style="color:#e6db74">&#39;active&#39;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 1st strat: Iterate over a copy</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> user, status <span style="color:#f92672">in</span> users<span style="color:#f92672">.</span>copy()<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> status <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;inactive&#39;</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">del</span> users[user]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2nd strat: Create a new dictionary</span>
</span></span><span style="display:flex;"><span>active_users <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> user, status <span style="color:#f92672">in</span> user<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> status <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;active&#39;</span>:
</span></span><span style="display:flex;"><span>		active_users[user] <span style="color:#f92672">=</span> status
</span></span></code></pre></div><h3 id="43-the-range-function"><strong>4.3 The <code>range()</code> Function</strong></h3>
<p>An easy way to iterate over a sequence of numbers is to use the <code>range()</code> function alongside a <code>for</code> loop. The number you use as the limit will never be reached; it has three basic parameters.</p>
<p>With just one parameter:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">3</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(i)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>
</span></span></code></pre></div><p>With two parameters:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># range(start, step)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> <span style="color:#f92672">in</span> <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(i)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">6</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9</span>
</span></span></code></pre></div><p>With three parameters:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># range(start, stop, step)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">2</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(i)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9</span>
</span></span></code></pre></div><p>To iterate over the indices of a sequence, you can use <code>range()</code> and <code>len()</code> together, but you could also use <code>enumerate()</code> to get the same effect, which I will get into later I&rsquo;m sure.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> loughlin <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Let&#39;s&#34;</span>, <span style="color:#e6db74">&#34;go&#34;</span>, <span style="color:#e6db74">&#34;Lions!&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(loughlin)):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(i, a[i])
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span> Let<span style="color:#e6db74">&#39;s</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> go
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> Lions<span style="color:#960050;background-color:#1e0010">!</span>
</span></span></code></pre></div><p>The item returned by <code>range()</code> acts like a list but isn&rsquo;t; it just returns a sequence of desired numbers based on parameters. Since it&rsquo;s not a list it saves space.</p>
<h3 id="44-break-and-continue-statements-and-else-clauses-on-loops"><strong>4.4 <code>break</code> and <code>continue</code> Statements, and <code>else</code> Clauses on Loops</strong></h3>
<p>Both <code>for</code> and <code>while</code> loops can have an else clause. For a <code>for</code> loop, the else clause is executed after the loop reaches a final iteration. For the <code>while</code> loop, the else clause executes after the loop&rsquo;s condition becomes false.</p>
<p>The <code>break</code> statement interrupts a <code>for</code> or <code>while</code> loop. If either loop has an <code>else</code> clause, the break statement will bypass the <code>else</code> so it doesn&rsquo;t execute. We can see the above ideas below when searching for prime numbers:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	<span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>, n):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>		<span style="color:#66d9ef">if</span> n <span style="color:#f92672">%</span> x <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>			print(n, <span style="color:#e6db74">&#39;equals&#39;</span>, x, <span style="color:#e6db74">&#39;*&#39;</span>, n<span style="color:#f92672">//</span>x)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>			<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>	<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>		<span style="color:#75715e"># loop falls through without finding a factor</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>		print(n, <span style="color:#e6db74">&#39;is a prime number&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span> <span style="color:#f92672">is</span> a prime number
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span> <span style="color:#f92672">is</span> a prime number
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span> equals <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">5</span> <span style="color:#f92672">is</span> a prime number
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">6</span> equals <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">7</span> <span style="color:#f92672">is</span> a prime number
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">8</span> equals <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9</span> equals <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
</span></span></code></pre></div><p>When used with a loop, the <code>else</code> clause has more in common with the clause of a <code>try</code> statement than an <code>if</code> statement; a <code>try</code> statement&rsquo;s clause will run when no exception occurs while a loops clause will run when no <code>break</code> occurs</p>
<p>The <code>continue</code> statement moves onto the next iteration of a loop:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">for</span> num <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	<span style="color:#66d9ef">if</span> num <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 		print(<span style="color:#e6db74">&#34;Found an even number&#34;</span>, num)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 		<span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(<span style="color:#e6db74">&#34;Found an odd number&#34;</span>, num)
</span></span><span style="display:flex;"><span>Found an even number <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>Found an odd number <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>Found an even number <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>Found an odd number <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>Found an even number <span style="color:#ae81ff">6</span>
</span></span><span style="display:flex;"><span>Found an odd number <span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span>Found an even number <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>Found an odd number <span style="color:#ae81ff">9</span>
</span></span></code></pre></div><p>6/6/2024</p>
<h3 id="45-pass-statements"><strong>4.5 <code>pass</code> Statements</strong></h3>
<p>The <code>pass</code> statement does nothing really; just allows something to exist which doesn&rsquo;t necessarily need to do anything.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">pass</span>    <span style="color:#75715e"># Waits for keyboard interrupt (Ctrl + c)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyEmptyClass</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">pass</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">initlog</span>(<span style="color:#f92672">*</span>args):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">pass</span>      <span style="color:#75715e"># Remember to implement this!</span>
</span></span></code></pre></div><h3 id="46-match-statements"><strong>4.6 <code>match</code> Statements</strong></h3>
<p>A <code>match</code> statement takes in an expression, and compares it to case blocks in some successive pattern. Only the first pattern found gets executed.</p>
<p>A basic implementation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">http_error</span>(status):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">match</span> status:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> <span style="color:#ae81ff">400</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Bad Request&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> <span style="color:#ae81ff">404</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Not found&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> <span style="color:#ae81ff">420</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Falcon Punch!&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> _:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Something&#39;s effed up with the net&#34;</span>
</span></span></code></pre></div><p>In the above example, <code>_</code> acts like a wildcard, and will execute if no cases are matched. You can combine multiple literals in a single pattern using the Pipe operator <code>|</code> (&ldquo;or&rdquo;).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#ae81ff">401</span> <span style="color:#f92672">|</span> <span style="color:#ae81ff">402</span> <span style="color:#f92672">|</span> <span style="color:#ae81ff">403</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Not allowed&#34;</span>
</span></span></code></pre></div><p>The pattern to be matched can be also used to unpack assignments, and can also bind variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># point is an (x, y) tuple</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">match</span> point:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;Origin&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> (<span style="color:#ae81ff">0</span>, y):
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Y=</span><span style="color:#e6db74">{</span>y<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> (x, <span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;X=</span><span style="color:#e6db74">{</span>x<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> (x, y):
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;X=</span><span style="color:#e6db74">{</span>x<span style="color:#e6db74">}</span><span style="color:#e6db74">, Y=</span><span style="color:#e6db74">{</span>y<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> _:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;Not a point&#34;</span>)	
</span></span></code></pre></div><p>In the above example, the first pattern uses literals, while the second and third combine literals and a variable (binding a value from the subject <em>point</em>), and the fourth pattern uses two values, which is conceptually similar to unpacking <code>(x, y) = point</code>.</p>
<p>You can also use classes with patterns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Point</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> __init__(self, x, y):
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>x <span style="color:#f92672">=</span> x
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>y <span style="color:#f92672">=</span> y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">where_is</span>(point):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">match</span> point:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> Point(x<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, y<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>			print(<span style="color:#e6db74">&#34;Origin&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> Point(x<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, y<span style="color:#f92672">=</span>y):
</span></span><span style="display:flex;"><span>			print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Y=</span><span style="color:#e6db74">{</span>y<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> Point(x<span style="color:#f92672">=</span>x, y<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>			print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;X=</span><span style="color:#e6db74">{</span>x<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> Point(x<span style="color:#f92672">=</span>x, y<span style="color:#f92672">=</span>y):
</span></span><span style="display:flex;"><span>			print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;X=</span><span style="color:#e6db74">{</span>x<span style="color:#e6db74">}</span><span style="color:#e6db74">, Y=</span><span style="color:#e6db74">{</span>y<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> _:
</span></span><span style="display:flex;"><span>			print(<span style="color:#e6db74">&#34;Not a point&#34;</span>)
</span></span></code></pre></div><p>Positional parameters can be accounted for if order is required for attributes; you can also define specific positions for attributes in patterns by setting the <code>__match_args__</code> special attribute in user defined classes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># if we used __match_args__ = (&#39;x&#39;, &#39;y&#39;) in our class, these</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># would all be valid ways of writing cases and all assign y to the var variable</span>
</span></span><span style="display:flex;"><span>Point(<span style="color:#ae81ff">1</span>, var)
</span></span><span style="display:flex;"><span>Point(<span style="color:#ae81ff">1</span>, y<span style="color:#f92672">=</span>var)
</span></span><span style="display:flex;"><span>Point(x<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, y<span style="color:#f92672">=</span>var)
</span></span><span style="display:flex;"><span>Point(y<span style="color:#f92672">=</span>var, x<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p>They say, &ldquo;A recommended way to read patterns is to look at them as an extended form of what you would put on the left of an assignment, to understand which variables would be set to what.&rdquo;
I honestly don&rsquo;t understand this, so I&rsquo;ll need someone smarter than me to clarify this further for me.</p>
<p>You can nest patterns:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Point</span>:
</span></span><span style="display:flex;"><span>	__match_args__ <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;x&#39;</span>, <span style="color:#e6db74">&#39;y&#39;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> __init__(self, x, y):
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>x <span style="color:#f92672">=</span> x
</span></span><span style="display:flex;"><span>		self<span style="color:#f92672">.</span>y <span style="color:#f92672">=</span> y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">match</span> points:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> []:
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;No points&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> [Point(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)]:
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;The origin&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> [Point(x, y)]:
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Single point </span><span style="color:#e6db74">{</span>x<span style="color:#e6db74">}</span><span style="color:#e6db74">, </span><span style="color:#e6db74">{</span>y<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> [Point(<span style="color:#ae81ff">0</span>, y1), Point(<span style="color:#ae81ff">0</span>, y2)]:
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Two on the y axis at </span><span style="color:#e6db74">{</span>y1<span style="color:#e6db74">}</span><span style="color:#e6db74">, </span><span style="color:#e6db74">{</span>y2<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> _:
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;Something else&#34;</span>)
</span></span></code></pre></div><p>We can also add an <code>if</code> clause to a pattern, known as a guard. If the guard is false, the <code>match</code> goes onto the next case block:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">match</span> point:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> Point(x, y) <span style="color:#66d9ef">if</span> x <span style="color:#f92672">==</span> y:
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Y=X at </span><span style="color:#e6db74">{</span>x<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> Point(x, y):
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Not on the diagnol&#34;</span>)
</span></span></code></pre></div><p>More key features about <code>match</code> statements:</p>
<ul>
<li>Tuple and list patterns have the same meaning and match arbitrary sequences. An exception is they don&rsquo;t match iterators or strings.</li>
<li>Sequence patterns support extended unpacking: <code>[x, y, *rest]</code> and <code>(x, y, *rest)</code> work like unpacking assignments. You can also use <code>_</code> after the <code>*</code>, so you can match a sequence of two items without binding the remaining items.</li>
<li>Literals are compared by equality; singletons compared by identity.</li>
<li>Patterns can be named constants; must be dotted names so they aren&rsquo;t interpreted as capture variables:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> enum <span style="color:#f92672">import</span> Enum
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Color</span>(Enum):
</span></span><span style="display:flex;"><span>	RED <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;red&#39;</span>
</span></span><span style="display:flex;"><span>	GREEN <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;green&#39;</span>
</span></span><span style="display:flex;"><span>	BLUE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;blue&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>color <span style="color:#f92672">=</span> Color(input(<span style="color:#e6db74">&#34;Enter your choice of red, blue, or green: &#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">match</span> color:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> Color<span style="color:#f92672">.</span>RED:
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;I see red!&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> Color<span style="color:#f92672">.</span>GREEN:
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;I see green!&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> Color<span style="color:#f92672">.</span>BLUE:
</span></span><span style="display:flex;"><span>		print(<span style="color:#e6db74">&#34;I see blue!&#34;</span>)
</span></span></code></pre></div><p>A tutorial on how to better use <code>match</code> is <a href="https://peps.python.org/pep-0636/">here</a>.</p>
<h3 id="47-defining-functions"><strong>4.7 Defining Functions</strong></h3>
<p>We can create a function for that Fibonacci sequence from earlier:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fib</span>(n):      <span style="color:#75715e"># write a Fibonacci series up to n</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	<span style="color:#e6db74">&#34;&#34;&#34;Print a Fibonacci series up to n.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	a, b <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	<span style="color:#66d9ef">while</span> a <span style="color:#f92672">&lt;</span> n:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 		print(a, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39; &#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 		a, b <span style="color:#f92672">=</span> b, a<span style="color:#f92672">+</span>b
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print()
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> fib(<span style="color:#ae81ff">2000</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">8</span> <span style="color:#ae81ff">13</span> <span style="color:#ae81ff">21</span> <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">55</span> <span style="color:#ae81ff">89</span> <span style="color:#ae81ff">144</span> <span style="color:#ae81ff">233</span> <span style="color:#ae81ff">377</span> <span style="color:#ae81ff">610</span> <span style="color:#ae81ff">987</span> <span style="color:#ae81ff">1597</span>
</span></span></code></pre></div><p>The <code>def</code> keyword for <em>definition</em> defines the function, with the name directly following and parenthesis to house the formal parameters, followed by a colon. The instructions follow underneath indented.</p>
<p>The first line of a function has the option to create a <em>docstring</em> using three quotation marks, seen above. More for accessibility, it&rsquo;s good practice to use them.</p>
<p>6/8/2024</p>
<p>The scope of variables within a function are local and are in a separate table than variables outside; they will not be able to directly modify/update out of scope variables. We can circumnavigate this by using the <code>global</code> call for a variable inside a function.</p>
<p>The parameters of a function are  introduced in that separate variable table specifically for that function; this means parameters are passed using <em>call by value</em> (value passed is a reference, not the value of the object).</p>
<p>Other languages might assume since a function doesn&rsquo;t return anything it&rsquo;s a procedure; in Python, if there is no <code>return</code> specified, it returns <code>None</code>.</p>
<p>We can rewrite the above Fibonacci Series with a return statement instead of print:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fib2</span>(n):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	<span style="color:#e6db74">&#34;&#34;&#34;Return a list containing a Fibonacci Series up to n.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	result <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	a, b <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	<span style="color:#66d9ef">while</span> a <span style="color:#f92672">&lt;</span> n:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 		result<span style="color:#f92672">.</span>append(a)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 		a, b <span style="color:#f92672">=</span> b, a <span style="color:#f92672">+</span> b
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	<span style="color:#66d9ef">return</span> result
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> f100 <span style="color:#f92672">=</span> fib2(<span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> f100
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">34</span>, <span style="color:#ae81ff">55</span>, <span style="color:#ae81ff">89</span>]
</span></span></code></pre></div><h3 id="48-more-on-defining-functions"><strong>4.8 More on Defining Functions</strong></h3>
<p>Three forms of defining functions with a variable number of arguments;</p>
<ol>
<li>Default Argument Values
<ol>
<li>Very useful; allows for leaving out parameters not needed.</li>
<li>We could call the function below in a few ways:
<ol>
<li>Only the mandatory argument: <code>ask_ok(&quot;Do you really want to quit?&quot;)</code></li>
<li>Giving optional arguments: <code>ask_ok(&quot;OK to overwrite the file?&quot;, 2)</code></li>
<li>All arguments: <code>ask_ok(&quot;OK to overwrite file?&quot;, 2, &quot;Only yes or no buster!&quot;)</code></li>
</ol>
</li>
</ol>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ask_of</span>(prompt, retries<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>, reminder<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Please try again!&#34;</span>):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>		reply <span style="color:#f92672">=</span> input(propt)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> reply <span style="color:#f92672">in</span> {<span style="color:#e6db74">&#39;y&#39;</span>, <span style="color:#e6db74">&#39;ye&#39;</span>, <span style="color:#e6db74">&#39;yes&#39;</span>}:        <span style="color:#75715e"># tests whether or not a sequence                    return True                        # contains a certain value</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> reply <span style="color:#f92672">in</span> {<span style="color:#e6db74">&#39;n&#39;</span>, <span style="color:#e6db74">&#39;no&#39;</span>, <span style="color:#e6db74">&#39;nop&#39;</span>, <span style="color:#e6db74">&#39;nope&#39;</span>}:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>		retries <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> retries <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#39;invalid user response&#39;</span>)
</span></span><span style="display:flex;"><span>		print(reminder)
</span></span></code></pre></div><ol start="2">
<li>Keyword Arguments
<ol>
<li>Functions can be called using keyword arguments, <code>kwarg=value</code>.
<ol>
<li>In the code below, the function requires one parameter <code>voltage</code> and three optional parameters <code>state</code>, <code>action</code>, and <code>type</code> .</li>
</ol>
</li>
</ol>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parrot</span>(voltage, state<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;a stiff&#39;</span>, action<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;voom&#39;</span>, type<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Norwegian Blue&#39;</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>	print(<span style="color:#e6db74">&#34;-- This parrot wouldn&#39;t&#34;</span>, action, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39; &#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>	print(<span style="color:#e6db74">&#34;If you put&#34;</span>, voltage, <span style="color:#e6db74">&#34;volts to it.&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>	print(<span style="color:#e6db74">&#34;-- Lovely plumage, the&#34;</span>, type)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>	print(<span style="color:#e6db74">&#34;-- It&#39;s&#34;</span>, state,<span style="color:#e6db74">&#34;!&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#75715e"># Valid Calls</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> parrot(<span style="color:#ae81ff">1000</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> parrot(voltage<span style="color:#f92672">=</span><span style="color:#ae81ff">1000</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> parrot(voltage<span style="color:#f92672">=</span><span style="color:#ae81ff">10000</span>, action<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;VMOOM&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> parrot(action<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;VMOOOM&#34;</span>, voltage<span style="color:#f92672">=</span><span style="color:#ae81ff">10000</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> parrot(<span style="color:#e6db74">&#39;a million&#39;</span>, <span style="color:#e6db74">&#39;bereft of life&#39;</span>, <span style="color:#e6db74">&#39;jump&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> parrot(<span style="color:#e6db74">&#39;a thousand&#39;</span>, state<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;pushin up daises&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#75715e"># Invalid Calls</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> parrot()                       <span style="color:#75715e"># required argument missing</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> parrot(voltage<span style="color:#f92672">=</span><span style="color:#ae81ff">5.0</span>, <span style="color:#e6db74">&#39;dead&#39;</span>)    <span style="color:#75715e"># non-keyword assignment after keyword assignment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> parrot(<span style="color:#ae81ff">110</span>, voltage<span style="color:#f92672">=</span><span style="color:#ae81ff">220</span>)       <span style="color:#75715e"># duplicate value for the same argument</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> parrot(actor<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;John Cleese&#39;</span>)    <span style="color:#75715e"># unknown keyword argument</span>
</span></span></code></pre></div><ol start="2">
<li>When the final formal parameter is in the syntax <code>**name</code>, it receives a dictionary with all keyword arguments except for those corresponding to a formal parameter. This is usually combined with a formal parameter of syntax <code>*name</code> which receives a tuple containing the positional arguments beyond the formal parameter list. <code>*name</code> must go before <code>**name</code>, obviously. We can write the following:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">donut_shop</span>(flavor, <span style="color:#f92672">*</span>arguments, <span style="color:#f92672">**</span>keywords):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(<span style="color:#e6db74">&#34;-- Do you have any&#34;</span>, flavor, <span style="color:#e6db74">&#34;?&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(<span style="color:#e6db74">&#34;-- I&#39;m sorry, we&#39;re all out of &#34;</span>, flavor)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	<span style="color:#66d9ef">for</span> arg <span style="color:#f92672">in</span> arguments:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 		print(arg)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">40</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	<span style="color:#66d9ef">for</span> kw <span style="color:#f92672">in</span> keywords:
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 		print(kw, <span style="color:#e6db74">&#34;:&#34;</span>, keywords[kw])
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> donut_shop(<span style="color:#e6db74">&#34;Red Velvet&#34;</span>, <span style="color:#e6db74">&#34;We have no Donuts...&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 			<span style="color:#e6db74">&#34;We have...no...DONUTS????&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 			vanilla<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Out of Stock&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 			chocolate<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Out of Stock&#34;</span>,
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 			oreo<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Out of Stock&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> Do you have any Red Velvet<span style="color:#960050;background-color:#1e0010">?</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> I<span style="color:#e6db74">&#39;m sorry, we&#39;</span>re all out of Red Velvet
</span></span><span style="display:flex;"><span>We have no Donuts<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>We have<span style="color:#f92672">...</span>no<span style="color:#f92672">...</span>DONUTS<span style="color:#960050;background-color:#1e0010">???</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">------------------------------------------</span>
</span></span><span style="display:flex;"><span>vanilla : Out of Stock
</span></span><span style="display:flex;"><span>chocolate : Out of Stock
</span></span><span style="display:flex;"><span>oreo : Out of Stock
</span></span></code></pre></div><ol start="3">
<li>Special Parameters
<ol>
<li>By default, arguments passed to a Python function by position or keyword. TO increase readability and performance, you should restrict the way arguments are passed so a developer can just look at a function definition to determine if items are passed via position, position or keyword, or by keyword.</li>
<li>Function notation for this looks like the following:
<ol>
<li><code>def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):</code></li>
<li><code>/</code> and <code>*</code> are optional, when used they indicate the kind of parameter by how the arguments may be passed to the function.</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>6/10/2024</p>
<p>Examples of Function Calls:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">standard_arg</span>(arg)L
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(arg)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">pos_only_arg</span>(arg, <span style="color:#f92672">/</span>):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(arg)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">kwd_only_arg</span>(<span style="color:#f92672">*</span>, arg):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(arg)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">combined_example</span>(post_only, <span style="color:#f92672">/</span>, standard, <span style="color:#f92672">*</span>, kwd_only):
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> 	print(pos_only, standard, kwd_only)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> standard_arg(<span style="color:#ae81ff">2</span>)             
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>                             <span style="color:#75715e"># first function takes either</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> standard_arg(arg<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> pos_only_arg(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> pos_only_arg(arg<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">TypeError</span>: pos_only_arg() got some positional<span style="color:#f92672">-</span>only arguments passed <span style="color:#66d9ef">as</span> keyword arguments: <span style="color:#e6db74">&#39;arg&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> kwd_only_arg(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">TypeError</span>: kwd_only_arg() takes <span style="color:#ae81ff">0</span> positional arguments but <span style="color:#ae81ff">1</span> was given
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> kwd_only_arg(arg<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> combined_example(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">TypeError</span>: combined_example() takes <span style="color:#ae81ff">2</span> positional arguments but <span style="color:#ae81ff">3</span> were given
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> combined_example(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, kwd_only<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> combine_example(<span style="color:#ae81ff">1</span>, standard<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, kwd_only<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> combine_example(pos_only<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, standard<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, kwd_only<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">TypeError</span>: combined_example() got some positional<span style="color:#f92672">-</span>only arguments passed <span style="color:#66d9ef">as</span> keyword arguments: <span style="color:#e6db74">&#39;pos_only&#39;</span>
</span></span></code></pre></div><p><strong>Recap:</strong></p>
<ul>
<li>Positional-only if you want the name of the parameters to not be available to the users, or if they are arbitrary/have no meaning.</li>
<li>Keyword-only when names have meaning and function definition is more understandable.</li>
<li>For API, use positional-only to prevent breaking API changes if the parameters name is modified</li>
</ul>
<p>Another less frequently used option is to specify that your function can be called with any amount of arguments. Arguments are wrapped as a tuple. Zero or more normal arguments may go before the <code>*args</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrote_multiple_items</span>(file, seperator, <span style="color:#f92672">*</span>args):
</span></span><span style="display:flex;"><span>	file<span style="color:#f92672">.</span>write(separator<span style="color:#f92672">.</span>join(args))
</span></span></code></pre></div><p>We can do the reverse of this situation if there is a list with values already:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> list(range(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> args <span style="color:#f92672">=</span> [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">6</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> list(range(<span style="color:#f92672">*</span>args))
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>]
</span></span></code></pre></div><hr>
<p>Next:
<a href="https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-5/">Chapter 5</a></p>
]]></content>
        </item>
        
        <item>
            <title>The Python Tutorial Notes - Chapter 1, 2, and 3</title>
            <link>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</link>
            <pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-1-2-and-3/</guid>
            <description>Modified: July 19 2024
Link to source
6/2/2024
In order to get a better understanding of Python as a whole language, I&amp;rsquo;m going to document and take notes as I go through the tutorial. I mostly would like to improve as a programmer, and eventually get a software job at Google or something.
Introduction What is Python?
Python is an easy to learn, powerful programming language. Featuring efficient high-level data structures as well as a simple but effective approach to object-oriented programming.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<p><a href="https://docs.python.org/3/tutorial/index.html">Link to source</a></p>
<hr>
<p>6/2/2024</p>
<p>In order to get a better understanding of Python as a whole language, I&rsquo;m going to document and take notes as I go through the tutorial. I mostly would like to improve as a programmer, and eventually get a software job at Google or something.</p>
<h2 id="introduction"><strong>Introduction</strong></h2>
<p>What is Python?</p>
<ol>
<li>Python is an easy to learn, powerful programming language. Featuring efficient high-level data structures as well as a simple but effective approach to object-oriented programming.</li>
<li>Ideal language for scripting and rapid application development</li>
</ol>
<p>Description of objects and modules are in <a href="https://docs.python.org/3/library/index.html#library-index">The Python Standard Library</a>. I&rsquo;ll probably go through this another day.</p>
<p>Same goes for <a href="https://docs.python.org/3/reference/index.html#reference-index">The Python Language Reference</a>. This goes over the syntax are &ldquo;core semantics&rdquo; of the language.</p>
<p><a href="https://docs.python.org/3/glossary.html#glossary">Python&rsquo;s Glossary</a></p>
<h2 id="1-whetting-your-appetite"><strong>1. Whetting Your Appetite</strong></h2>
<p>Python is a language well suited for small, quick, and useful applications</p>
<p>Python is an interpreted language - saving time during program development due to not needing compilation and linking.</p>
<p>Python enables programs to be written compactly and are easily readable; python programs are usually shorter than C++/Java programs for three main reasons:</p>
<ol>
<li>High-level data types allow you to express complex operations in single statements</li>
<li>Statement grouping is done by indentation rather than beginning/end brackets</li>
<li>No variable or argument declarations are necessary</li>
</ol>
<h2 id="2-using-the-python-interpreter"><strong>2. Using the Python Interpreter</strong></h2>
<h3 id="21-invoking-the-interpreter">2.1 Invoking the Interpreter</h3>
<p>Usually, when installed correctly, you can open up a shell/command line and run;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>python3<span style="color:#ae81ff">.12</span>
</span></span></code></pre></div><p>or</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>py
</span></span></code></pre></div><p>You can stop typing at anytime using ctrl-z or <code>quit()</code>.</p>
<p>Arguments are passed using square-bracket list format: turned into strings and saved as <code>argv</code> variable in the sys module.</p>
<p>Interactive mode is the feature that lets you continue to write long statements on the command line, usually denoted by ellipses instead of the usual three greater than signs.</p>
<h3 id="22-the-interpreter-and-its-environment">2.2 The Interpreter and Its Environment</h3>
<p>Python source files are treated as encoded in UTF-8, where characters of most languages in the world can be used in string literals, identifies, and comments; the standard library only uses ASCII characters for identifies.</p>
<p>To declare an encoding besides default, use</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># -*- coding: encoding -*-</span>
</span></span></code></pre></div><p>where <em>encoding</em> is a valid <a href="https://docs.python.org/3/library/codecs.html#module-codecs">codec</a> supported by Python.</p>
<h2 id="3-an-informal-introduction-to-python"><strong>3. An Informal Introduction to Python</strong></h2>
<p>Comments are left usually with &lsquo;#&rsquo;;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># This is my super awesome comment</span>
</span></span></code></pre></div><p>Number calculations are a breeze with Python. By default, Python acts as a standard calculator, following basic rules of arithmetic (PEMDAS, etc.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">50</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">6</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#ae81ff">50</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">6</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">8</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5</span>  <span style="color:#75715e"># division always returns a floating point number</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">8</span> <span style="color:#f92672">//</span> <span style="color:#ae81ff">5</span> <span style="color:#75715e"># integer division truncates decimal *does not round up*</span>
</span></span></code></pre></div><p>Modular division calculates the remainder of a division problem.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ae81ff">17</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span> <span style="color:#75715e"># equals 2</span>
</span></span></code></pre></div><p>Mod anything by 2, and you&rsquo;ll get either 0 or 1-even or odd respectively.</p>
<p>Powers are shown with double star:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ae81ff">5</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">2</span>
</span></span></code></pre></div><p>Data in Python is stored and separated into different data types. The most basic are <strong>int</strong> or integer data types (whole numbers), <strong>float</strong> or decimal point numbers, <strong>str</strong> or strings which hold anything in-between two quotation marks, and <strong>bool</strong> or Booleans, which return true or false.</p>
<p>The equal sign is known as the assignment operator. It is used to place values into named, identifiable spaces to be called on later.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>width <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>height <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">9</span>
</span></span><span style="display:flex;"><span>width <span style="color:#f92672">*</span> height <span style="color:#75715e"># returns 900</span>
</span></span></code></pre></div><p>Variables must be assigned some value before being called/used.</p>
<p>Expressions with mixed types (including floats) will return floats.</p>
<p>In interactive mode, <code>_</code> acts as the last produced value.</p>
<p>Python also supports <strong>Decimal</strong>, <strong>Fraction</strong>, and <strong>complex numbers</strong>.</p>
<p>Strings can be used with single or double quotes, with the backslash acting as an escape character.</p>
<p>In regular Python shell commands, the output doesn&rsquo;t account for any backslashes. The <code>print()</code> command will accomplish that</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;First line.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Second line.&#39;</span>  <span style="color:#75715e"># \n means newline</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> s  <span style="color:#75715e"># without print(), special characters are included in the string</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;First line.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Second line.&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(s)  <span style="color:#75715e"># with print(), special characters are interpreted, so \n produces new line</span>
</span></span><span style="display:flex;"><span>First line<span style="color:#f92672">.</span>
</span></span><span style="display:flex;"><span>Second line<span style="color:#f92672">.</span>
</span></span></code></pre></div><p>Placing <code>r</code> before a string will output it as <em>raw</em> strings; special characters aren&rsquo;t account for.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">&#39;C:\some</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">ame&#39;</span>)
</span></span><span style="display:flex;"><span>C:\some
</span></span><span style="display:flex;"><span>ame
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;C:\some\name&#39;</span>)
</span></span><span style="display:flex;"><span>C:\some\name
</span></span></code></pre></div><p>Strings can also take up more than one line using the triple quotation mark notation: <code>&quot;&quot;&quot;...&quot;&quot;&quot;</code></p>
<p>Strings can be concatenated using the <code>+</code> operator, and repeated with the <code>*</code> operator.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> <span style="color:#e6db74">&#39;hi&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; there&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;hihihi there&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> prefix <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Py&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> prefix <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;thon&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;Python&#39;</span>
</span></span></code></pre></div><p>Strings can be indexed, starting at 0 and the last character represented as -1:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> word <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello world!&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> word[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;H&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span>word[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;!&#39;</span>
</span></span></code></pre></div><p>Slicing is also supported:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> word[:<span style="color:#ae81ff">2</span>] <span style="color:#75715e"># characters from beginning to position 2 (excluding)</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;He&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> word [<span style="color:#ae81ff">2</span>:] <span style="color:#75715e"># characters from position 2 (included) to the end</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;llo world!&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> word[<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>:] <span style="color:#75715e"># characters from second to last position (including) to the end</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;d!&#39;</span>
</span></span></code></pre></div><p>Here is a useful diagram to think about how index positions work in Python:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span> <span style="color:#f92672">+---+---+---+---+---+---+</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">|</span> P <span style="color:#f92672">|</span> y <span style="color:#f92672">|</span> t <span style="color:#f92672">|</span> h <span style="color:#f92672">|</span> o <span style="color:#f92672">|</span> n <span style="color:#f92672">|</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">+---+---+---+---+---+---+</span>
</span></span><span style="display:flex;"><span> <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">2</span>   <span style="color:#ae81ff">3</span>   <span style="color:#ae81ff">4</span>   <span style="color:#ae81ff">5</span>   <span style="color:#ae81ff">6</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>  <span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>  <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>  <span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>  <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>  <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Python strings are immutable, meaning they cannot be changed at the index level. You cannot reassign individual or sliced portions of a string. You can either make a new one or reassign the entire string&rsquo;s value at once.</p>
<p>The built-in function <code>len()</code> returns the length of a string.</p>
<p>All methods for strings can be found <a href="https://docs.python.org/3/library/stdtypes.html#string-methods">here</a>.</p>
<p>Python has multiple <em>compound</em> data types that hold values together. The most versatile is a <em>list</em>, which is commonly written as a group of elements separated by a comma surrounded by square brackets.</p>
<p><em>Lists</em> can hold many different data types, but is usually confined to just one.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> squares <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">25</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> squares
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">25</span>]
</span></span></code></pre></div><p>Like strings, lists can be indexed and sliced, as well as concatenated, and are fully mutable, meaning we can change the list at exact locations.</p>
<p>You can add items to the end of the list using the <code>.append()</code> method:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> squares<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">36</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> squares<span style="color:#f92672">.</span>append(<span style="color:#ae81ff">7</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> squares
</span></span><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">25</span>, <span style="color:#ae81ff">36</span>, <span style="color:#ae81ff">45</span>]
</span></span></code></pre></div><p>Simple assignment doesn&rsquo;t copy data; when you assign a list to a variable, the variable refers to the existing list. Any changes made to a list through one variable is seen through all other variables that refer to that same list.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> rgb <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Red&#34;</span>, <span style="color:#e6db74">&#34;Green&#34;</span>, <span style="color:#e6db74">&#34;Blue&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> rgba <span style="color:#f92672">=</span> rgb
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> id(rgb) <span style="color:#f92672">==</span> id(rgba) <span style="color:#75715e">#checking to see if they reference the same object</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> rgba<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#34;Alph&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> rgb
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#34;Red&#34;</span>, <span style="color:#e6db74">&#34;Green&#34;</span>, <span style="color:#e6db74">&#34;Blue&#34;</span>, <span style="color:#e6db74">&#34;Alph&#34;</span>]
</span></span></code></pre></div><p>Slices can also be reassigned. <code>len()</code> also applies to lists, counting the number of elements inside the list.</p>
<p>Nested lists are also possible:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;A&#39;</span>, <span style="color:#e6db74">&#39;B&#39;</span>, <span style="color:#e6db74">&#39;C&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> a_low <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x <span style="color:#f92672">=</span> [a, a_low]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x
</span></span><span style="display:flex;"><span> [<span style="color:#e6db74">&#39;A&#39;</span>, <span style="color:#e6db74">&#39;B&#39;</span>, <span style="color:#e6db74">&#39;C&#39;</span>], [<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#39;A&#39;</span>, <span style="color:#e6db74">&#39;B&#39;</span>, <span style="color:#e6db74">&#39;C&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>B
</span></span></code></pre></div><p>Next Steps: We can create a Fibonacci sequence.</p>
<p>Fibonacci Sequence: a sequence in which each number is the sum of the two preceding ones. Numbers that are part of this sequence are known as Fibonacci numbers.</p>
<p>I first tried making a Fibonacci sequence from scratch, but I failed to understand how the assignment should work so that a and b are updated without adding the wrong values. <a href="https://chatgpt.com/share/f43b22f2-7f7f-41bd-881f-72fc7ad92d25">I used ChatGPT to help facilitate my error</a>.</p>
<hr>
<p>Next:
<a href="https://mrpointing.com/posts/computer-science/python-tutorial/the-python-tutorial-notes---chapter-4/">Chapter 4</a></p>
]]></content>
        </item>
        
    </channel>
</rss>
