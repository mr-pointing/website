<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Leet Code Problems on Mr. Pointing</title>
        <link>http://localhost:1313/posts/computer-science/leet-code-problems/</link>
        <description>Recent content in Leet Code Problems on Mr. Pointing</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/computer-science/leet-code-problems/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>75. Sort Colors</title>
            <link>http://localhost:1313/posts/computer-science/leet-code-problems/75.-sort-colors/</link>
            <pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/computer-science/leet-code-problems/75.-sort-colors/</guid>
            <description>Modified: August 02 2024
Description:
Given an array nums with n objects colored red, white, or blue, sort in-place so that objects of the same color are adjacent. Colors are integers 0, 1, and 2 respectively.
Example: Input: nums = [2,0,2,1,1,0] Output: [0,0,1,1,2,2]
Basically, sort them in order without using the built-in sort function.
So I worked on this at work, and I got to a certain point where I was using a hash map to count the amount of times they went through, which I was able to make.</description>
            <content type="html"><![CDATA[<p>Modified: August 02 2024</p>
<hr>
<p><strong>Description:</strong></p>
<p>Given an array <code>nums</code> with n objects colored red, white, or blue, sort <em>in-place</em> so that objects of the same color are adjacent. Colors are integers 0, 1, and 2 respectively.</p>
<p><em>Example:</em>
<strong>Input:</strong> <code>nums = [2,0,2,1,1,0]</code>
<strong>Output:</strong> <code>[0,0,1,1,2,2]</code></p>
<p>Basically, sort them in order without using the built-in sort function.</p>
<p>So I worked on this at work, and I got to a certain point where I was using a hash map to count the amount of times they went through, which I was able to make. However, I was having issues with sorting. I tried on my own for a while, I will try to get the code from my school LeetCode account and paste it here. Otherwise, I had a decent idea of what to do. I used ChatGPT to ask why my sorting wasn&rsquo;t working, and it gave the best answer from LeetCode below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sortColors</span>(self, nums: List[int]) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>		low, mid, high <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, len(nums) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">while</span> mid <span style="color:#f92672">&lt;=</span> high:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> nums[mid] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>				nums[low], nums[mid] <span style="color:#f92672">=</span> nums[mid], nums[low]
</span></span><span style="display:flex;"><span>				low <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>				mid <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">elif</span> nums[mid] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>				mid <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>				nums[mid], nums[high] <span style="color:#f92672">=</span> nums[high], nums[mid]
</span></span><span style="display:flex;"><span>				high <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>This is a true two pointer approach, and it only kind of makes sense to me. I followed the code with some test cases and understood it, but I think it would be hard to explain without looking at notes.</p>
<p>One approach I preferred from another source was from a commentor who used counting the amount of zeros and ones, indexing to fill those in, then placing the rest with 2&rsquo;s. Less efficient, but I think I prefer this way.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sortColors</span>(self, nums: List[int]) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        Do not return anything, modify nums in-place instead.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        zeros, ones, n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, len(nums)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> num <span style="color:#f92672">in</span> nums:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> num <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>                zeros <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">elif</span> num <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>                ones <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, zeros):
</span></span><span style="display:flex;"><span>            nums[i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(zeros, zeros <span style="color:#f92672">+</span> ones):
</span></span><span style="display:flex;"><span>            nums[i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(zeros <span style="color:#f92672">+</span> ones, n):
</span></span><span style="display:flex;"><span>            nums[i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>1122. Relative Sort Array</title>
            <link>http://localhost:1313/posts/computer-science/leet-code-problems/1122.-relative-sort-array/</link>
            <pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/computer-science/leet-code-problems/1122.-relative-sort-array/</guid>
            <description>Modified: August 02 2024
Description:
Given two arrays, arr1 and arr2, where all elements in arr2 are distinct, as well as all elements in arr2 are in arr1.
Sort the elements of arr1 so that the ordering of items in arr1 is the same as arr2. Any element not in arr2 should be appended in ascending/increasing order at the end of the list.
Example: Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6] Output: [2,2,2,1,4,3,3,9,6,7,19]</description>
            <content type="html"><![CDATA[<p>Modified: August 02 2024</p>
<hr>
<p><strong>Description:</strong></p>
<p>Given two arrays, <code>arr1</code> and <code>arr2</code>, where all elements in <code>arr2</code> are distinct, as well as all elements in <code>arr2</code> are in <code>arr1</code>.</p>
<p>Sort the elements of <code>arr1</code> so that the ordering of items in <code>arr1</code> is the same as <code>arr2</code>. Any element not in <code>arr2</code> should be appended in ascending/increasing order at the end of the list.</p>
<p><em>Example:</em>
<strong>Input:</strong> <code>arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]</code>
<strong>Output:</strong> <code>[2,2,2,1,4,3,3,9,6,7,19]</code></p>
<p>Answer:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">relativeSortArray</span>(self, arr1: List[int], arr2: List[int]) <span style="color:#f92672">-&gt;</span> List[int]:
</span></span><span style="display:flex;"><span>        count_map <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>        remaining <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># initialize count map with relative order elements</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> num <span style="color:#f92672">in</span> arr2:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># a dictionary update statement, pushing each value</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># into it as a key and a value of 0</span>
</span></span><span style="display:flex;"><span>            count_map[num] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># count occurances of elements in target array</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> num <span style="color:#f92672">in</span> arr1:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> num <span style="color:#f92672">in</span> count_map:
</span></span><span style="display:flex;"><span>                count_map[num] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                remaining<span style="color:#f92672">.</span>append(num)  
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># sort remaining</span>
</span></span><span style="display:flex;"><span>        remaining<span style="color:#f92672">.</span>sort()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># add elements per relative order</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># num has to be in square brackets, else it breaks</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> num <span style="color:#f92672">in</span> arr2:
</span></span><span style="display:flex;"><span>            result<span style="color:#f92672">.</span>extend([num] <span style="color:#f92672">*</span> count_map[num])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># add remaining elements</span>
</span></span><span style="display:flex;"><span>        result<span style="color:#f92672">.</span>extend(remaining)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> result
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
