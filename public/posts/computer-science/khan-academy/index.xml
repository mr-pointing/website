<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Khan Academy on Mr. Pointing</title>
        <link>https://mrpointing.com/posts/computer-science/khan-academy/</link>
        <description>Recent content in Khan Academy on Mr. Pointing</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://mrpointing.com/posts/computer-science/khan-academy/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Khan Academy - AP Computer Science Principles - Unit 1</title>
            <link>https://mrpointing.com/posts/computer-science/khan-academy/khan-academy---ap-computer-science-principles---unit-1/</link>
            <pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>https://mrpointing.com/posts/computer-science/khan-academy/khan-academy---ap-computer-science-principles---unit-1/</guid>
            <description>Modified: August 02 2024
Most of this I should know, being a computer science teacher. However, outlining this should make teaching this rather boring portion easier. I want to try implementing more diagrams while I teach; I&amp;rsquo;ll be looking forward to stealing their ideas.
Bits and bytes How do computers represent data? All computers understand is Binary, 0&amp;rsquo;s and 1&amp;rsquo;s.
The video explains the example of using one single wire to transfer electricity through it; on or off.</description>
            <content type="html"><![CDATA[<p>Modified: August 02 2024</p>
<hr>
<p>Most of this I should know, being a computer science teacher. However, outlining this should make teaching this rather boring portion easier. I want to try implementing more diagrams while I teach; I&rsquo;ll be looking forward to stealing their ideas.</p>
<h2 id="bits-and-bytes">Bits and bytes</h2>
<h3 id="how-do-computers-represent-data">How do computers represent data?</h3>
<p>All computers understand is <strong>Binary</strong>, 0&rsquo;s and 1&rsquo;s.</p>
<p>The video explains the example of using one single wire to transfer electricity through it; on or off. This is the most fundamental understanding of how our computers function. This is just one single bit. Common machines use hundreds of thousands of bits to achieve their objective.</p>
<p>With text, it&rsquo;s easier to visualize. Every character has a value related to some makeup of a 0 and a 1. Images are harder, since they&rsquo;re made up of tiny pixels. Each pixel holds a color. Each color can thankfully be represented by a number. Think about videos, that are rendering 30 to 60 images per second.</p>
<p>Audio can also be broken down into numbers, usually by vibrations as a waveform, and that waveform as a number.</p>
<p>Bits hold only a single value, on or off. Generally only binary decisions are used by single bits.</p>
<p>Computers will use multiple bits to represent more complex data. The more bits, the more information deliverable.</p>
<p>We can see that a sequence of two bits can represent four ($2^2$) distinct values:</p>
<p>$00, 01, 10, 11$</p>
<p>While a sequence of three bits can represent eight ($2^3$) distinct values:</p>
<p>$000, 001, 010, 011, 100, 101, 110, 111$</p>
<p>While a bit is a single piece of information, a byte is a unit that consists of 8 bits.</p>
<p>The conversion is pretty simple: multiple by 8 to go from bits to bytes, and divide by 8 to go from bytes to bits.</p>
<h2 id="binary-numbers">Binary Numbers</h2>
<p>The binary number system works very similarly to how decimal numbers work.</p>
<p>In decimal numbers, you multiply each number by a different power of 10. You start in the ones&rsquo; place, the tens&rsquo; place, and the hundreds&rsquo; place. 234 is equal to $(2 * 100) + (3 * 10) + (4 * 1)$. Ones&rsquo; place is $10^0$, tens&rsquo; place is $10^1$, and hundreds&rsquo; place is $10^2$.</p>
<p>The binary number system multiplies to the power of 2 instead of 10.</p>
<p>The decimal number 1, can be represented in binary as 0001. That&rsquo;s the same as $(0 * 8) + (0 * 4) + (0 * 2) + (1 * 1)$, or $0 + 0 + 0 + 1$, which gives you 1.</p>
<p>The decimal number 10, in binary is 1010. We know this because of $(1 * 8) + (0 * 4) + (1 * 2) + (0 * 1)$, which is $8 + 0 + 2 + 0$, which equals 10.</p>
<h3 id="converting-decimal-to-binary">Converting decimal to binary</h3>
<p>{{ $image := .Resources.Get &ldquo;decimal_to_binary.png&rdquo; }}
<!-- raw HTML omitted --></p>
<h2 id="limitations-of-storing-numbers">Limitations of Storing Numbers</h2>
<h3 id="number-limits-overflow-and-roundoff">Number limits, overflow, and roundoff</h3>
<p>Storing numbers requires some work for binary representation. We run into issues with problems like <em>roundoff</em>, <em>overflow</em>, and <em>precision</em>. These issues are usually centered around memory issues.</p>
<h3 id="integer-representation">Integer representation</h3>
<p>An integer is any whole number: $1, 10, 230, -400$ are all integers. In order to store integers, for however many bits the number is stored in, the first indicates the sign, and the others contain the absolute value.</p>
<p>{{ $image2 := .Resources.Get &ldquo;Khan Academy - AP Computer Science Principles - Unit 1.png&rdquo; }}
<!-- raw HTML omitted --></p>
<h3 id="overflow">Overflow</h3>
<p>Let&rsquo;s suggest we only have 4-bits of memory to store our integers on a computer. That means we could only store up to the number 7. If we were to then try to go beyond it, like say with the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p><code>x</code> is easily able to be stored, but <code>y</code> would give us a problem since it goes beyond the capabilities of our systems memory. This type of error is called an <em>Overflow Error</em>. Some systems might throw this error, truncate it to 7, or wrap back to 1.</p>
<p>Thankfully, 64-bit is the common standard.</p>
<h3 id="floating-point-representation">Floating-point representation</h3>
<p>Floating-point numbers represent every number that isn&rsquo;t an integer-irrational, fractional, etc.</p>
<p>In floating-point representation, a number is multiplied by a base that&rsquo;s raised to some exponent.</p>
<p>In mathematics it often looks like this: $300=3*10^2$</p>
<p>Since computers use the binary system instead of the decimal system, it looks like this: $128=1*2^7$.</p>
<p>Numbers between the powers of 2 end up looking more so like this: $160=1.25<em>2^7$, or $0.25=1</em>2^-2$.</p>
<p>Modern 64 bit systems use 1 bit for the sign, 11 bits for the exponent, and 52 bits for the number in the front.</p>
<h3 id="roundoff-errors">Roundoff errors</h3>
<p>There are still some issues since there are some numbers that can&rsquo;t be easily represented. $.3^-$ (repeating) is an infinitely repeating sequence that can&rsquo;t be stored in any device. The computer will eventually have to round at some point. A <em>roundoff error</em> is when we get an unexpected error due to the computers rounding of a complicated-to-represent number.</p>
]]></content>
        </item>
        
    </channel>
</rss>
