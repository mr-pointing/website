<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Projects on Mr. Pointing</title>
        <link>http://localhost:1313/posts/projects/</link>
        <description>Recent content in Projects on Mr. Pointing</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/projects/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Mr. Pointing Website</title>
            <link>http://localhost:1313/posts/projects/mr.-pointing-website/</link>
            <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/projects/mr.-pointing-website/</guid>
            <description>Modified: August 02 2024
So, I want to make my website using Obsidian to write Markdown files, have Hugo collect and display them, then use Cloudflare to host it. I have a few things I know I need to get done:
Get pages formatted to look good on Hugo Add date property to all pages Get Excalidraw images linked Ignore Templates, re-route Excalidraw Get mr.pointing domain name Create README Update/Connect GitHub Start Hosting Hugo Using Cloudflare So some updates before I go to bed:</description>
            <content type="html"><![CDATA[<p>Modified: August 02 2024</p>
<hr>
<p>So, I want to make my website using Obsidian to write Markdown files, have Hugo collect and display them, then use Cloudflare to host it. I have a few things I know I need to get done:</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Get pages formatted to look good on Hugo</li>
<li><input disabled="" type="checkbox"> Add <code>date</code> property to all pages</li>
<li><input disabled="" type="checkbox"> Get Excalidraw images linked</li>
<li><input disabled="" type="checkbox"> Ignore Templates, re-route Excalidraw</li>
<li><input checked="" disabled="" type="checkbox"> Get mr.pointing domain name</li>
<li><input disabled="" type="checkbox"> Create README</li>
<li><input checked="" disabled="" type="checkbox"> Update/Connect GitHub</li>
<li><input checked="" disabled="" type="checkbox"> Start <a href="http://localhost:1313/posts/computer-science/hugo/hosting-hugo-using-cloudflare/">Hosting Hugo Using Cloudflare</a></li>
</ul>
<p>So some updates before I go to bed:</p>
<ul>
<li>There&rsquo;s an issue where the images need to be told explicitly, when turned into Hugo Markdown files, that the Excalidraw files are actually markdown files. So those have to be edited manually.</li>
<li>All attachments need to be rewritten to not point to a markdown file like obsidian uses, but using Hugo&rsquo;s image reference <code>{{ $image := resources.Get &quot;images/sunset.jpg&quot; }}</code></li>
</ul>
<p>Dates have to be in this format:</p>
<pre tabindex="0"><code>YYYY-MM-DD
</code></pre><p>Replace Text Script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> os  
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> re  
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pathlib <span style="color:#f92672">import</span> Path  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">read_file</span>(file_path):  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(file_path, <span style="color:#e6db74">&#39;r&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;utf-8&#39;</span>) <span style="color:#66d9ef">as</span> file:  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> file<span style="color:#f92672">.</span>read()  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write_file</span>(file_path, content):  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(file_path, <span style="color:#e6db74">&#39;w&#39;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;utf-8&#39;</span>) <span style="color:#66d9ef">as</span> file:  
</span></span><span style="display:flex;"><span>        file<span style="color:#f92672">.</span>write(content)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">replace_text_in_content</span>(content, search_text, replacement_text):  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> re<span style="color:#f92672">.</span>sub(search_text, replacement_text, content)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">process_directory</span>(directory_path, search_text, replacement_text):  
</span></span><span style="display:flex;"><span>    pathlist <span style="color:#f92672">=</span> Path(directory_path)<span style="color:#f92672">.</span>glob(<span style="color:#e6db74">&#39;**/*.md&#39;</span>)  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> path <span style="color:#f92672">in</span> pathlist:  
</span></span><span style="display:flex;"><span>        path_in_str <span style="color:#f92672">=</span> str(path)  
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Processing file: </span><span style="color:#e6db74">{</span>path_in_str<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>        content <span style="color:#f92672">=</span> read_file(path_in_str)  
</span></span><span style="display:flex;"><span>        new_content <span style="color:#f92672">=</span> replace_text_in_content(content, search_text, replacement_text)  
</span></span><span style="display:flex;"><span>        write_file(path_in_str, new_content)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():  
</span></span><span style="display:flex;"><span>    directory_path <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter the directory path: &#34;</span>)  
</span></span><span style="display:flex;"><span>    search_text <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter the text to search for: &#34;</span>)  
</span></span><span style="display:flex;"><span>    replacement_text <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter the text to replace with: &#34;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    process_directory(directory_path, search_text, replacement_text)  
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Text replacement completed.&#34;</span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:  
</span></span><span style="display:flex;"><span>    main()
</span></span></code></pre></div><p>Obsidian to Hugo Script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> obsidian_to_hugo <span style="color:#f92672">import</span> ObsidianToHugo  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">filter_file</span>(file_contents: str, file_path: str) <span style="color:#f92672">-&gt;</span> bool:  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;draft: false&#39;</span> <span style="color:#f92672">in</span> file_contents:  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">True</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:  
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>obsidian_to_hugo <span style="color:#f92672">=</span> ObsidianToHugo(  
</span></span><span style="display:flex;"><span>    obsidian_vault_dir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;C:/Users/rpoin/Documents/Main Brain&#34;</span>,  
</span></span><span style="display:flex;"><span>    hugo_content_dir<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;C:/Users/rpoin/quicksite/content&#34;</span>,  
</span></span><span style="display:flex;"><span>    filters<span style="color:#f92672">=</span>[filter_file],  
</span></span><span style="display:flex;"><span>)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>obsidian_to_hugo<span style="color:#f92672">.</span>run()
</span></span></code></pre></div><p>My first initial <code>.toml</code> file:</p>
<pre tabindex="0"><code>baseURL = &#39;https://example.org/&#39;
languageCode = &#39;en-us&#39;
title = &#39;mr.pointing&#39;
theme = &#39;hello-friend-ng&#39;

paginate     = 10

[params]
  dateform        = &#34;Jan 2, 2006&#34;
  dateformShort   = &#34;Jan 2&#34;
  dateformNum     = &#34;2006-01-02&#34;
  dateformNumTime = &#34;2006-01-02 15:04&#34;

  # Subtitle for home
  homeSubtitle = &#34;Python Teacher&#34;

  # Set disableReadOtherPosts to true in order to hide the links to other posts.
  disableReadOtherPosts = false

  # Enable sharing buttons, if you like
  enableSharingButtons = false
  
  # Show a global language switcher in the navigation bar
  enableGlobalLanguageMenu = false

  # Metadata mostly used in document&#39;s head
  description = &#34;My new homepage or blog&#34;
  keywords = &#34;homepage, blog&#34;
  images = [&#34;&#34;]

[taxonomies]
    category = &#34;blog&#34;
    tag      = &#34;tags&#34;
    series   = &#34;series&#34;

[languages]
  [languages.en]
    title = &#34;Mr. Pointing&#34;
    keywords = &#34;&#34;
    copyright = &#39;&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;&#39;
    

  [languages.en.params]
    subtitle  = &#34;Python Teacher&#34;

    [languages.en.params.logo]
      logoText = &#34;mr. pointing&#34;
      logoHomeLink = &#34;/&#34;
    # or
    #
    # path = &#34;/img/your-example-logo.svg&#34;
    # alt = &#34;Your example logo alt text&#34;

  # And you can even create generic menu
  [menu.main]
    identifier = &#34;blog&#34;
    name       = &#34;Posts&#34;
    url        = &#34;/posts&#34;
	
  [menu.main]
    identifier = &#34;about&#34;
    name       = &#34;About&#34;
    url        = &#34;/about&#34;
</code></pre><p>Ask ChatGPT with a picture of the website to give it a color scheme in hex based off red instead of hex # fe5186.</p>
<p>Images I think go in the metadata of the file?</p>
<p>I downloaded <a href="https://github.com/anvithks/hugo-embed-pdf-shortcode">an embed pdf shortcut</a> to help out, you can use it like this:</p>
<p>The PDF embed didn’t work, I think it might be a linking issue.</p>
<p>Need to fix the projects pages, need a date fix.</p>
]]></content>
        </item>
        
        <item>
            <title>Deploying a Flask Application via Apache</title>
            <link>http://localhost:1313/posts/projects/deploying-a-flask-application-via-apache/</link>
            <pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/projects/deploying-a-flask-application-via-apache/</guid>
            <description>Modified: August 02 2024
Link to the project website.</description>
            <content type="html"><![CDATA[<p>Modified: August 02 2024</p>
<p><a href="https://www.opensourceforu.com/2023/03/deploying-a-flask-application-via-the-apache-server/">Link</a> to the project website.</p>
<hr>
]]></content>
        </item>
        
        <item>
            <title>Lython</title>
            <link>http://localhost:1313/posts/projects/lython/</link>
            <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/projects/lython/</guid>
            <description>Modified: July 19 2024
Lython is my final project for my Masters program. I based it off an idea I had of giving my students a filtered AI, which branched off into editing ChatGPT with prompt filtering. Seeing that alone was particularly easy, I looked into implementing RAG, which works kind of.
Github
I&amp;rsquo;d like to continue working on my project as an actual tool to use during class. I&amp;rsquo;d like to be able to launch it to a production server, so my students can access it during class.</description>
            <content type="html"><![CDATA[<p>Modified: July 19 2024</p>
<hr>
<p>Lython is my final project for my Masters program. I based it off an idea I had of giving my students a filtered AI, which branched off into editing ChatGPT with prompt filtering. Seeing that alone was particularly easy, I looked into implementing RAG, which works kind of.</p>
<p><a href="https://github.com/mr-pointing/Lython_GCU">Github</a></p>
<p>I&rsquo;d like to continue working on my project as an actual tool to use during class. I&rsquo;d like to be able to launch it to a production server, so my students can access it during class. That way, I can cut the websites to just Lython, and the website they need to submit their assignments on.</p>
<p>So far, I was able to get it downloadable as a PyPI project. Previously I was happy with it being live on their Test server, being on production felt super cool.</p>
]]></content>
        </item>
        
        <item>
            <title>Raspberry Pi NAS</title>
            <link>http://localhost:1313/posts/projects/raspberry-pi-nas/</link>
            <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/projects/raspberry-pi-nas/</guid>
            <description>Modified: July 14 2024
Link</description>
            <content type="html"><![CDATA[<p>Modified: July 14 2024</p>
<p><a href="https://www.youtube.com/watch?v=gyMpI8csWis&t=122s">Link</a></p>
<hr>
]]></content>
        </item>
        
        <item>
            <title>Jobany Rosario</title>
            <link>http://localhost:1313/posts/projects/jobany-rosario/</link>
            <pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/projects/jobany-rosario/</guid>
            <description>Modified: July 02 2024
New updated Schedule:
Monday:
Dojo 11am - 12pm 8pm - 9pm Wednesday:
Dojo 11am - 12pm Clockwork 7:30pm - 8:30pm Tuesday/Thursday/Friday:
Link to contact for privates </description>
            <content type="html"><![CDATA[<p>Modified: July 02 2024</p>
<hr>
<p>New updated Schedule:</p>
<p>Monday:</p>
<ul>
<li>Dojo
<ul>
<li>11am - 12pm</li>
<li>8pm - 9pm</li>
</ul>
</li>
</ul>
<p>Wednesday:</p>
<ul>
<li>Dojo
<ul>
<li>11am - 12pm</li>
</ul>
</li>
<li>Clockwork
<ul>
<li>7:30pm - 8:30pm</li>
</ul>
</li>
</ul>
<p>Tuesday/Thursday/Friday:</p>
<ul>
<li>Link to contact for privates</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Designing a RESTful API</title>
            <link>http://localhost:1313/posts/projects/designing-a-restful-api/</link>
            <pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/projects/designing-a-restful-api/</guid>
            <description>Modified: August 02 2024
Watched this video to take some notes on what REST is.
API: Application Programming Interface, is how to computers can communicate with each other.
Client sends a Request to the server, server sends a response back to the client.
REST, or Representational State Transfer, is the most popular way to communicate with these web servers.
REST is actually a set of rules and standards. Any API that follows the REST rules is known as a RESTful API.</description>
            <content type="html"><![CDATA[<p>Modified: August 02 2024</p>
<hr>
<p>Watched <a href="https://www.youtube.com/watch?v=-mN3VyJuCjM">this</a> video to take some notes on what REST is.</p>
<p>API: Application Programming Interface, is how to computers can communicate with each other.</p>
<p>Client sends a Request to the server, server sends a response back to the client.</p>
<p>REST, or Representational State Transfer, is the most popular way to communicate with these web servers.</p>
<p>REST is actually a set of rules and standards. Any API that follows the REST rules is known as a RESTful API.</p>
<p>Stripe and Google Maps are two examples.</p>
<p>RESTful API organizes resources into a set of unique URI&rsquo;s (uniform resource identifiers):</p>
<pre tabindex="0"><code>https://example.com/api/v3/products
https://example.com/api/v3/users
</code></pre><p>The URI&rsquo;s differentiate different types of resources on the sever.</p>
<p>{{ $image := .Resources.GetMatch &ldquo;Pasted image 20240620090314.png&rdquo; }}
{{ with $image }}
<!-- raw HTML omitted -->
{{ end }}</p>
<p>When requesting, the format has to be specific. Since the client is communicating with the server over HTTP, the request often looks something like this: <code>POST /products HTTP/1.1</code>. The URI is preceded by an HTTP verb, POST, that tells the server what we want to do with the URI resource.</p>
<p>POST is to create a new resource.
GET means we want to read data about an existing resource.
PUT is for when you want update an existing resource.
DELETE is for removing an existing resource.</p>
<p>In the body of any of the previous requests, there can exist an additional HTTP request body that contains a custom payload of data, usually in JSON. Server receives request, processes it, then formats the result into a response.</p>
<p>The first line of the response has a HTTP status code to let the client know what happened.</p>
<p>200 means the request was successful.
400 means something was wrong with the request.
500 means something was wrong with the server.</p>
<p>Idempotent refers to an action, that when performed multiple times on the same subject, it has no further effect on it&rsquo;s subject after the first time it&rsquo;s performed.</p>
<p>{{ $image := .Resources.GetMatch &ldquo;Pasted image 20240620091713.png&rdquo; }}
{{ with $image }}
<!-- raw HTML omitted -->
{{ end }}</p>
<p>A RESTful API should be stateless; the client and server should not store any information about one another, and every request and response (cycle) is independent from all others.</p>
<hr>
<p>Taking notes from <a href="https://blog.luisrei.com/articles/rest.html">this</a> article on more REST</p>
<p><strong>How to design a RESTful Web API</strong></p>
<p>Everything is a resource; every interaction is an interaction with a resource. We can simplify all REST calls as mapping and endpoint to a resource, which becomes our URL.</p>
<p>This article uses URL, while the previous uses URI. For simplicities sake, I&rsquo;ll use URL for the rest of the notes on this article.</p>
<p>An example of a resource: a user can be a resource, and would have the following URL:</p>
<pre tabindex="0"><code>https://api.github.com/users/rpointing
</code></pre><p>Resources have different representations. The example above might have some JSON representation:</p>
<pre tabindex="0"><code>{
	&#34;login&#34;: &#34;rpointing&#34;,
	&#34;created_at&#34;: &#34;1997-05-01T21:00:00&#34;,
	&#34;name&#34;: &#34;Richard Pointing&#34;,
	&#34;email&#34;: &#34;rpointing@gmail.com&#34;,
	&#34;id&#34;: 58632,
	&#34;blog&#34;: &#34;https://jobanyrosario.com&#34;
}
</code></pre><p>Resources are nouns, and actions are verbs. Actions are HTTP verbs, aka request methods.</p>
<ul>
<li>GET: Retrieves a representation of a resource without side-effects (no changes to the server)</li>
<li>HEAD: retrieves just the resource meta-information (headers) i.e. same as GET without the response body or side effects</li>
<li>OPTIONS: Returns the actions supported by the specified resource</li>
<li>POST: Creates a resource</li>
<li>PUT: (completely) replaces an existing resource</li>
<li>PATCH: Partial modification of a resource</li>
<li>DELETE: Deletes a resource</li>
</ul>
<p>We attach information after the URL:</p>
<pre tabindex="0"><code>POST https://api.github.com/gists/gists
{
	&#34;description&#34;: &#34;The description for this gist&#34;,
	&#34;public&#34;: true,
	&#34;files&#34;: {
		&#34;file1.txt&#34;: {
			&#34;content&#34;: &#34;String file contents&#34;
		}
	}
}
</code></pre><p>If its not a resource or an action, the rest goes in the header.</p>
<p><strong>Content Negotiation</strong> is how we chose between different representations of the same resource.</p>
<pre tabindex="0"><code>GET https://api.github.com/gists/1
Accept: application/json

# or

GET https://api.github.com/gists/1
Accept: application/xml
</code></pre><p>One will retrieve the JSON representation of the resource, the other will get the XML version. You can even specify compression or language.</p>
<p><strong>Caching</strong> is the process of storing responses from API requests. The two main response headers they go over here are <em>Expires</em> which specifies an absolute expiry time for cached representations, and <em>Cache-control</em> which specifies a relative expiry time using max-age directive.</p>
<p>Both work with <em>ETag</em>, which is an identifier, commonly stored as a hash, meant to change when the resource changes, invalidating cached versions of the object.</p>
<p><strong>Authorization</strong> is what keeps anyone from making POST requests to any server at any given time. Basic HTTP authentication should be used with HTTPs to ensure safety.</p>
<p><strong>Rate Limiting</strong> allows you to set the amount of calls a client can make to the server.</p>
<pre tabindex="0"><code>&gt;&gt;&gt; GET https://api.github.com/gists/1
200 OK
X-RateLimit-Limit: 5000
X-RateLimit-Remaining: 4966
</code></pre><p>The Limit is the total amount allowed (per hour), and the remaining is the amount left to make before the limit is reached.</p>
<p>6/25/2024</p>
<p><strong>HATEOAS, Options, and Error Handling</strong></p>
<p>&ldquo;A REST API must not define fixed resource names or hierarchies (a coupling of client and server). Servers must have the freedom to control their own namespace&hellip;A REST API should be entered with no prior knowledge beyond the initial URI&rdquo; - Roy Thomas</p>
<p>Basically in a REST based architecture, any URL besides the initial URL can be changed, even to other servers without worrying about the client.</p>
<p>HATEOAS stands for Hypermedia As The Engine Of Application State, and is the thinking of the API as a state machine where resources are thought of as states and the transitions between states are links between resources.</p>
<pre tabindex="0"><code>GET https://api.spire.io

# results in 

200 OK
{
	&#34;url&#34;: &#34;https://api.spire.io/&#34;,
	&#34;resources&#34;: {
		&#34;sessions&#34;: {
			&#34;url&#34;: &#34;https://api.spire.io/sessions&#34;
		},
		&#34;accounts&#34;: {
			&#34;url&#34;: &#34;https://api.spire.io/accounts&#34;
		},
		&#34;billing&#34;: {
			&#34;url&#34;: &#34;https://api.spire.io/billing&#34;
		}
	}
}
</code></pre><p>In the above example, the root resource, or what we call the <em>initial state</em> contains the transitions to the other resources (states) reachable from it: &ldquo;sessions&rdquo;, &ldquo;accounts&rdquo;, &ldquo;billing&rdquo;.</p>
<p>Like we saw in the list above, OPTION will return the actions that can be performed on any given resource.</p>
<pre tabindex="0"><code>OPTIONS https://api.spire.io/accounts

# results in

Status Code: 200
access-control-allow-methods: GET,POST
access-control-allow-origin: *
</code></pre><p>Error responses should consist of:</p>
<ul>
<li>The appropriate HTTP error status code with relevant headers</li>
<li>A human readable message in the appropriate format</li>
<li>A <em>Link</em> header to a meaningful state transition if appropriate</li>
</ul>
<pre tabindex="0"><code>GET https://api.twilio.com/2010-04-01/Accounts.json

# results in

401 Unauthorized
WWW-Authenticate: Basic realm=&#34;Twilio API&#34;
{
	&#34;status&#34;: 401,
	&#34;message&#34;: &#34;Authenticate&#34;,
	&#34;code&#34;: 20003,
	&#34;more_info&#34;: &#34;http:\/\/www.twilio.com\/docs\/errors\/20003&#34;
}
</code></pre><hr>
<p>Starting <a href="https://blog.luisrei.com/articles/flaskrest.html">this</a> project.</p>
<p>We&rsquo;re going to use Flask for this for a few reasons:</p>
<ul>
<li>Flask is written in Python</li>
<li>Simple to use</li>
<li>Flexible</li>
<li>Many different deployment options</li>
<li>RESTful request dispatching</li>
</ul>
<p><strong>Resources</strong></p>
<p>We can start the app by implementing a response for the root, an articles page, and accessing a specific article:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> flask <span style="color:#f92672">import</span> Flask, url_for
</span></span><span style="display:flex;"><span>app <span style="color:#f92672">=</span> Flask(__name__)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">api_root</span>():
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;Welcome&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/articles&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">api_articles</span>():
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;List of &#39;</span> <span style="color:#f92672">+</span> url_for(<span style="color:#e6db74">&#39;api_articles&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/articles/&lt;articleid&gt;&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">api_article</span>(articleid):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;You are reading &#39;</span> <span style="color:#f92672">+</span> articleid
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>	app<span style="color:#f92672">.</span>run()
</span></span></code></pre></div><p>In order to actually run these events, you can run the code and use the following prompts to start getting responses:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; GET /
Welcome

&gt;&gt;&gt; GET /articles
List of /articles

&gt;&gt;&gt; GET /articles/123
You are reading 123
</code></pre><p>Special note about using variables in the example above: if you want to specify exactly what data type the variable should be, use it like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/articles/&lt;int:articleid&gt;&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/articles/&lt;float:articleid&gt;&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/articles/&lt;path:articleid&gt;&#39;</span>)
</span></span></code></pre></div><p>6/27/2024</p>
<p><strong>Requests</strong></p>
<p>The following code works with GET requests as well, and is a bit more complex than the above examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> flask <span style="color:#f92672">import</span> request
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/hello&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">api_hello</span>():
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;name&#39;</span> <span style="color:#f92672">in</span> request<span style="color:#f92672">.</span>args:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;Hello &#39;</span> <span style="color:#f92672">+</span> request<span style="color:#f92672">.</span>args[<span style="color:#e6db74">&#39;name&#39;</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;Hello stranga!&#39;</span>
</span></span></code></pre></div><p>We can use the following calls on the above (going forward I&rsquo;ll use the convention of using RESTED Chrome application):</p>
<pre tabindex="0"><code>&gt;&gt;&gt; GET http://127.0.0.1:5000/hello
Hello stranga!

&gt;&gt;&gt; GET http://127.0.0.1:5000/hello?name=clifford%20the%20big%20red%20dog
Hello clifford the big red dog
</code></pre><p>We can specify the request methods that can be called on a resource by specifying the methods in the app route:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/echo&#39;</span>, methods <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;GET&#39;</span>, <span style="color:#e6db74">&#39;POST&#39;</span>, <span style="color:#e6db74">&#39;PATCH&#39;</span>, <span style="color:#e6db74">&#39;PUT&#39;</span>, <span style="color:#e6db74">&#39;DELETE&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">api_echo</span>():
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;GET&#39;</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ECHO: GET</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">elif</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;POST&#39;</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ECHO: POST</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">elif</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;PATCH&#39;</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ECHO: PATCH</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">elif</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;PUT&#39;</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ECHO: PUT</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">elif</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;DELETE&#39;</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;ECHO: DELETE&#34;</span>
</span></span></code></pre></div><p>6/29/2024</p>
<p>We can specify further what type of data can be requested and what to do when certain types are requested:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/messages&#39;</span>, methods <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;POST&#39;</span>])  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">api_message</span>():  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> request<span style="color:#f92672">.</span>headers[<span style="color:#e6db74">&#39;Content-Type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;text/plain&#39;</span>:  
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Text Message: &#34;</span> <span style="color:#f92672">+</span> request<span style="color:#f92672">.</span>data  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> request<span style="color:#f92672">.</span>headers[<span style="color:#e6db74">&#39;Content-Type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;application/json&#39;</span>:  
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;JSON Message: &#34;</span> <span style="color:#f92672">+</span> json<span style="color:#f92672">.</span>dumps(request<span style="color:#f92672">.</span>json)  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> request<span style="color:#f92672">.</span>headers[<span style="color:#e6db74">&#39;Content-Type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;application/octet-stream&#39;</span>:  
</span></span><span style="display:flex;"><span>       f <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;./binary&#39;</span>, <span style="color:#e6db74">&#39;wb&#39;</span>)  
</span></span><span style="display:flex;"><span>       f<span style="color:#f92672">.</span>write(request<span style="color:#f92672">.</span>data)  
</span></span><span style="display:flex;"><span>       f<span style="color:#f92672">.</span>close()  
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;Binary message written!&#39;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:  
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;415 Unsupported Media Type! ;)&#34;</span>
</span></span></code></pre></div><p><strong>Responses</strong></p>
<p>Flask has  built in Response class to handle responses:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/hello&#39;</span>, methods <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;GET&#39;</span>])  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">api_hello</span>():  
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> {  
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#39;hello&#39;</span>: <span style="color:#e6db74">&#39;world&#39;</span>,  
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#39;number&#39;</span>: <span style="color:#ae81ff">3</span>  
</span></span><span style="display:flex;"><span>    }  
</span></span><span style="display:flex;"><span>    js <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>dumps(data)  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    resp <span style="color:#f92672">=</span> Response(js, status<span style="color:#f92672">=</span><span style="color:#ae81ff">200</span>, mimetype<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;application/json&#39;</span>)  
</span></span><span style="display:flex;"><span>    resp<span style="color:#f92672">.</span>headers[<span style="color:#e6db74">&#39;Link&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://jobanyrosario.com&#39;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> resp
</span></span></code></pre></div><p>will return the following:</p>
<pre tabindex="0"><code># header
Server: Werkzeug/3.0.3 Python/3.9.13 Date: Sat, 29 Jun 2024 16:35:18 GMT Content-Type: application/json Content-Length: 31 Link: https://jobanyrosario.com Connection: close

# output
{ 
	&#34;hello&#34;: &#34;world&#34;,
	&#34;number&#34;: 3 
}
</code></pre><p><em>Mimetype</em> acts as the content&rsquo;s type without including additional information (like charset, encoding, etc.). Flask also has a built-in method that makes generating JSON responses easier. By including the header <code>jsonify</code>, you can replace the <code>Response</code> initialization with the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>resp <span style="color:#f92672">=</span> jsonify(data)
</span></span><span style="display:flex;"><span>resp<span style="color:#f92672">.</span>status_code <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>
</span></span></code></pre></div><p>This will generate the same response as before.  I took out the second line (specifying the status code) and it still gave me a response code of 200, so that second line might be optional (making it even more useful).</p>
<p><strong>Status Codes &amp; Errors</strong></p>
<p>Even if there aren&rsquo;t many circumstances where handling a 200 status code is necessary, it can be for error handling. In the following example, we create a handler that can deal with any 404 error the API receives, as well as an example of how it can be used usefully:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#a6e22e">@app.errorhandler</span>(<span style="color:#ae81ff">404</span>)  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">not_found</span>(error<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):  
</span></span><span style="display:flex;"><span>    message <span style="color:#f92672">=</span> {  
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#39;status&#39;</span>: <span style="color:#ae81ff">404</span>,  
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#39;message&#39;</span>: <span style="color:#e6db74">&#39;Not Found &#39;</span> <span style="color:#f92672">+</span> request<span style="color:#f92672">.</span>url  
</span></span><span style="display:flex;"><span>    }  
</span></span><span style="display:flex;"><span>    resp <span style="color:#f92672">=</span> jsonify(message)  
</span></span><span style="display:flex;"><span>    resp<span style="color:#f92672">.</span>status_code <span style="color:#f92672">=</span> <span style="color:#ae81ff">404</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> resp  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/users/&lt;userid&gt;&#39;</span>, methods <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;GET&#39;</span>])  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">api_users</span>(userid):  
</span></span><span style="display:flex;"><span>    users <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;1&#39;</span>: <span style="color:#e6db74">&#39;Alex&#39;</span>, <span style="color:#e6db74">&#39;2&#39;</span>: <span style="color:#e6db74">&#39;Jaime&#39;</span>, <span style="color:#e6db74">&#39;3&#39;</span>: <span style="color:#e6db74">&#39;Akuma&#39;</span>}  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> userid <span style="color:#f92672">in</span> users:  
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">return</span> jsonify({userid:users[userid]})  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:  
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">return</span> not_found()
</span></span></code></pre></div><p>You could also overwrite error messages using the <code>@error_handler</code> decorator above, or in the following way:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>app<span style="color:#f92672">.</span>error_handler_spec[<span style="color:#66d9ef">None</span>][<span style="color:#ae81ff">404</span>] <span style="color:#f92672">=</span> not_found
</span></span></code></pre></div><p><strong>Authorization</strong></p>
<p>In the below code, we begin handling HTTP Basic Authentication:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> wraps
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_auth</span>(username, password):  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> username <span style="color:#f92672">&lt;</span>mark<span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;admin&#39;</span> <span style="color:#f92672">and</span> password <span style="color:#f92672">&lt;/</span>mark<span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;secret&#39;</span>  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">authenticate</span>():  
</span></span><span style="display:flex;"><span>    message <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;message&#39;</span>: <span style="color:#e6db74">&#39;Authenticate.&#39;</span>}  
</span></span><span style="display:flex;"><span>    resp <span style="color:#f92672">=</span> jsonify(message)  
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>    resp<span style="color:#f92672">.</span>status_code <span style="color:#f92672">=</span> <span style="color:#ae81ff">401</span>  
</span></span><span style="display:flex;"><span>    resp<span style="color:#f92672">.</span>headers[<span style="color:#e6db74">&#39;WWW-Authenticate&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Basic realm=&#34;Example&#34;&#39;</span>  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> resp  
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">requires_auth</span>(f):  
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@wraps</span>(f)  
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decorated</span>(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):  
</span></span><span style="display:flex;"><span>       auth <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>authorization  
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> auth:  
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span> authenticate()  
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">elif</span> <span style="color:#f92672">not</span> check_auth(auth<span style="color:#f92672">.</span>username, auth<span style="color:#f92672">.</span>password):  
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span> authenticate()  
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">return</span> f(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)  
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> decorated
</span></span></code></pre></div><p>In the above example, to reiterate, <code>*args</code> takes in any <em>positional</em> arguments passed and keeps them as a tuple, and <code>**kwargs</code> allows the function to take in any number of <em>keyword</em> arguments, stored as a dictionary. These are helpful to keep the function flexible, and able to take in any function with any amount of parameters.</p>
<p><strong>Simple Debug &amp; Logging</strong></p>
<p>In order to debug while developing, you can easily set <code>debug=True</code> when calling the app to start running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>app<span style="color:#f92672">.</span>run(debug<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span></code></pre></div><p>Flask uses python logging off the rip:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> logging
</span></span><span style="display:flex;"><span>file_handler <span style="color:#f92672">=</span> logging<span style="color:#f92672">.</span>FileHandler(<span style="color:#e6db74">&#39;app.log&#39;</span>)
</span></span><span style="display:flex;"><span>app<span style="color:#f92672">.</span>logger<span style="color:#f92672">.</span>addHandler(file_handler)
</span></span><span style="display:flex;"><span>app<span style="color:#f92672">.</span>logger<span style="color:#f92672">.</span>setLevel(logging<span style="color:#f92672">.</span>INFO)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/hello&#39;</span>, methods<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;GET&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">api_hello</span>():
</span></span><span style="display:flex;"><span>	app<span style="color:#f92672">.</span>logger<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#39;informing&#39;</span>)
</span></span><span style="display:flex;"><span>	app<span style="color:#f92672">.</span>logger<span style="color:#f92672">.</span>warning(<span style="color:#e6db74">&#39;warning&#39;</span>)
</span></span><span style="display:flex;"><span>	app<span style="color:#f92672">.</span>logger<span style="color:#f92672">.</span>error(<span style="color:#e6db74">&#39;screaming bloody murder!&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;Check your logs!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Future Projects</title>
            <link>http://localhost:1313/posts/projects/future-projects/</link>
            <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/projects/future-projects/</guid>
            <description>Modified: June 20 2024
Obsidian Related:
Integrate an AI model into Obsidian as a plug-in LLM trained on my Obsidian data Obsidian plug-in that automates a bibliography from links Website related:
Python script that automates adding .md to Excalidraw files after Obsidian to Hugo transfer. </description>
            <content type="html"><![CDATA[<p>Modified: June 20 2024</p>
<hr>
<p>Obsidian Related:</p>
<ul>
<li>Integrate an AI model into Obsidian as a plug-in</li>
<li>LLM trained on my Obsidian data</li>
<li>Obsidian plug-in that automates a bibliography from links</li>
</ul>
<p>Website related:</p>
<ul>
<li>Python script that automates adding <code>.md</code> to Excalidraw files after Obsidian to Hugo transfer.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Vinyl Visualizer</title>
            <link>http://localhost:1313/posts/projects/vinyl-visualizer/</link>
            <pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
            
            <guid>http://localhost:1313/posts/projects/vinyl-visualizer/</guid>
            <description>Modified: June 22 2024
A passion project I&amp;rsquo;d like to make. It would be my first time using hardware and software together.
To start, I&amp;rsquo;d like to grab a raspberry pi with a screen and audio in so it can display the record cover, the title, artist, and duration that updates as the song goes on.
I first asked ChatGPT 3.5 for advice.
I also asked ChatGPT 4o and got a little better/pointed advice.</description>
            <content type="html"><![CDATA[<p>Modified: June 22 2024</p>
<hr>
<p>A passion project I&rsquo;d like to make. It would be my first time using hardware and software together.</p>
<p>To start, I&rsquo;d like to grab a raspberry pi with a screen and audio in so it can display the record cover, the title, artist, and duration that updates as the song goes on.</p>
<p>I first asked <a href="https://chatgpt.com/share/ec6a257c-6e65-4364-b964-c66f437d005c">ChatGPT 3.5</a> for advice.</p>
<p>I also asked <a href="https://chatgpt.com/share/7c70547a-f544-4dd5-a80a-b645661ac905">ChatGPT 4o</a> and got a little better/pointed advice. Not much different though. It gave me advice on the script without asking.</p>
<p>Hardware:</p>
<p><a href="https://www.canakit.com/raspberry-pi-5-8gb.html?cid=USD&src=raspberrypi">The Raspberry Pi</a></p>
<p><a href="https://www.canakit.com/official-raspberry-pi-beginners-guide-5th-edition.html">Raspberry Pi Guidebook</a></p>
<p><a href="https://www.canakit.com/raspberry-pi-lcd-display-touchscreen.html">Raspberry Pi Screen</a></p>
<p>Software:</p>
<p><a href="https://audd.io/">AudD</a>, an API that should help collecting data</p>
<p><a href="https://people.csail.mit.edu/hubert/pyaudio/docs/">PyAudio</a>, to help collect audio from the microphone</p>
<p><a href="https://docs.python.org/3/library/tk.html">Python GUI</a> info</p>
]]></content>
        </item>
        
    </channel>
</rss>
